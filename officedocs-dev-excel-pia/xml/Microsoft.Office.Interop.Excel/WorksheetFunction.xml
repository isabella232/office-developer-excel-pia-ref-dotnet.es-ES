<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3799dd3aab76ef91457248bfb93a39319ab94831a31142a4195f749f0f13c96" /><Meta Name="ms.sourcegitcommit" Value="daf501296516d104cf396246ac0d336adfeffd0d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/06/2021" /><Meta Name="ms.locfileid" Value="54511889" /></Metadata><TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Se usa como contenedor para las Excel de hoja de c√°lculo a las que se puede llamar desde Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg2">Primer inter√©s: fecha del primer inter√©s del valor burs√°til.</param>
        <param name="Arg3">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til.</param>
        <param name="Arg4">Tasa: tasa de inter√©s nominal anual del valor burs√°til.</param>
        <param name="Arg5">Valor nominal que se supone.</param>
        <param name="Arg6">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o.</param>
        <param name="Arg7">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el inter√©s devengado de un valor burs√°til que paga intereses peri√≥dicos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la tabla siguiente se describen los valores que se pueden usar para <paramref name="Arg5" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til.</param>
        <param name="Arg3">Tasa de inter√©s nominal anual de un valor burs√°til.</param>
        <param name="Arg4">Valor nominal que se supone. Si se omite este valor, el m√©todo ACCRINTM utiliza 1.000 $.</param>
        <param name="Arg5">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el inter√©s devengado de un valor burs√°til que paga intereses a su vencimiento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>En la tabla siguiente se describen los valores que se pueden usar para <paramref name="Arg5" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>La siguiente lista contiene informaci√≥n que debe tener en cuenta al trabajar con ACCRINTM:</para>
          <list type="bullet">
            <item>
              <description>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan utilizarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900.</description>
            </item>
            <item>
              <description>Los argumentos de emisi√≥n, vencimiento y base se truncan a enteros.</description>
            </item>
            <item>
              <description>Si la fecha de emisi√≥n o de vencimiento no es una fecha v√°lida, ACCRINTM genera un error.</description>
            </item>
            <item>
              <description>Si la tasa ‚â§ 0 o si el valor que se supone es ‚â§ 0, ACCRINTM genera un error.</description>
            </item>
            <item>
              <description>Si la &lt; base 0 o si la base &gt; 4, ACCRINTM generar√° un error. </description>
            </item>
            <item>
              <description>Si la fecha de emisi√≥n es mayor o igual que la de vencimiento, ACCRINTM genera un error.</description>
            </item>
            <item>
              <description>ACCRINTM se calcula de la siguiente manera: </description>
            </item>
          </list>
          <para>donde:</para>
          <para>A = N√∫mero de d√≠as acumulados contadas seg√∫n una base mensual. Para los elementos de inter√©s al vencimiento, se usa el n√∫mero de d√≠as desde la fecha de emisi√≥n hasta la fecha de vencimiento.</para>
          <para>D = Base anual del a√±o.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coseno del √°ngulo que desea obtener y debe estar comprendido entre -1 y 1.</param>
        <summary>Devuelve el arcocoseno, o coseno inverso, de un n√∫mero. El arcocosino es el √°ngulo cuyo coseno es <paramref name="Arg1" /> . El √°ngulo devuelto se expresa en radianes, comprendido entre el rango que se extiende entre 0 (cero) y pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si desea convertir el resultado de radianes a grados, multipl√≠quelo por 180/PI() o utilice el m√©todo Degrees.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real igual o mayor que 1.</param>
        <summary>Devuelve el coseno hiperb√≥lico inverso de un n√∫mero. El n√∫mero debe ser mayor o igual que 1. El coseno hiperb√≥lico inverso es el valor cuyo coseno hiperb√≥lico es , por lo que <paramref name="Arg1" /> Acosh(Cosh(number)) es <paramref name="Arg1" /> igual a .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cotangent del √°ngulo que desees.</param>
        <summary>Devuelve la arccotangent de un n√∫mero, en radianes del rango 0 a Pi.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La cotangente hiperb√≥lica del √°ngulo que desea.</param>
        <summary>Devuelve la cotangente hiperb√≥lica inversa de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_funci√≥n: un n√∫mero de 1 a 19 que especifica la funci√≥n que se usar√°.</param>
        <param name="Arg2">Opciones: valor num√©rico que determina qu√© valores del rango de evaluaci√≥n de la funci√≥n se omitir√°n.</param>
        <param name="Arg3">Ref1: el primer argumento num√©rico para las funciones que tienen varios argumentos num√©ricos de los que desea obtener el valor agregado.</param>
        <param name="Arg4">Ref2 a Ref30: argumentos num√©ricos 2 a 30 cuyo valor agregado desea obtener.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve un agregado en una lista o base de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Las siguientes restricciones se aplican a los argumentos Ref (Arg3 - Arg 30) en funci√≥n del <b>Function_num</b> valor.</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Tipos v√°lidos:Cualquier referencia de celda Uniones Intersecciones Nombres definidos Referencias estructuradasInvalidos tipos: Matrices de datos reales</description>
              <description>Tipos v√°lidos:Cualquier referencia de celda Uniones Intersecciones Nombres definidos Referencias estructuradasInvalidos tipos: Matrices de datos reales</description>
              <description>Tipos v√°lidos:Cualquier referencia de celda Uniones Intersecciones Nombres definidos Referencias estructuradasInvalidos tipos: Matrices de datos reales</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Tipos v√°lidos:Cualquier referencia de celda Uniones Intersecciones Nombres definidos Referencias estructuradas Referencias a datos reales Matrices de datos</description>
              <description>Tipos v√°lidos:Cualquier referencia de celda Uniones Intersecciones Nombres definidos Referencias estructuradas Referencias a datos reales Matrices de datos</description>
              <description>No se permiten referencias</description>
            </item>
          </list>
          <para>Si un segundo argumento de referencia es obligatorio pero no se incluye, AGREGAR devolver√° el valor de error #¬°VALOR!</para>
          <para>Si algunas de las referencias son referencias 3D, AGREGAR devolver√° el valor de error #¬°VALOR!</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo del activo.</param>
        <param name="Arg2">Fecha de compra del activo.</param>
        <param name="Arg3">Fecha del final del primer per√≠odo.</param>
        <param name="Arg4">Valor remanente al final de la vida del activo.</param>
        <param name="Arg5">Per√≠odo de depreciaci√≥n.</param>
        <param name="Arg6">Tasa de depreciaci√≥n.</param>
        <param name="Arg7">Base anual que se debe utilizar.</param>
        <summary>Devuelve la depreciaci√≥n correspondiente a cada per√≠odo contable. Esta funci√≥n se proporciona para el sistema contable franc√©s.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un activo se adquiere en medio del per√≠odo contable, se toma en cuenta la depreciaci√≥n prorrateada. El m√©todo es similar a , excepto que se aplica un coeficiente de depreciaci√≥n en el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> c√°lculo en funci√≥n de la vida de los activos. En la tabla siguiente se describen los valores usados en <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>360 d√≠as (m√©todo NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Actual</description>
            </item>
            <item>
              <term>3</term>
              <description>A√±o de 365 d√≠as</description>
            </item>
            <item>
              <term>4 </term>
              <description>A√±o de 360 d√≠as (m√©todo europeo)</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Esta funci√≥n devuelve la depreciaci√≥n de los activos hasta el √∫ltimo per√≠odo de la vida de los activos o hasta que el valor acumulado de la depreciaci√≥n es mayor que el costo de los activos menos el valor remanente.</para>
          <para>Los coeficientes de depreciaci√≥n son:</para>
          <list type="table">
            <item>
              <term>Entre 3 y 4 a√±os</term>
              <description>1,5</description>
            </item>
            <item>
              <term>Entre 5 y 6 a√±os</term>
              <description>2</description>
            </item>
            <item>
              <term>M√°s de 6 a√±os</term>
              <description>2,5</description>
            </item>
          </list>
          <para>La tasa de depreciaci√≥n aumentar√° hasta el 50 por ciento para el per√≠odo anterior al √∫ltimo per√≠odo y ascender√° hasta el 100 por ciento durante el √∫ltimo per√≠odo.</para>
          <para>Si la vida de los activos se encuentra entre 0 (cero) y 1, 1 y 2, 2 y 3, o 4 y 5, se devolver√° el valor de error #¬°NUM!</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo del activo.</param>
        <param name="Arg2">Fecha de compra del activo.</param>
        <param name="Arg3">Fecha del final del primer per√≠odo.</param>
        <param name="Arg4">Valor remanente al final de la vida del activo.</param>
        <param name="Arg5">Per√≠odo de depreciaci√≥n.</param>
        <param name="Arg6">Tasa de depreciaci√≥n.</param>
        <param name="Arg7">Base anual que se debe utilizar.</param>
        <summary>Devuelve la depreciaci√≥n correspondiente a cada per√≠odo contable. Esta funci√≥n se proporciona para el sistema contable franc√©s.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un activo se compra en mitad del per√≠odo contable, se tiene en cuenta la depreciaci√≥n prorrateada. En la tabla siguiente se describen los valores usados para <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>360 d√≠as (m√©todo NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Actual</description>
            </item>
            <item>
              <term>3</term>
              <description>A√±o de 365 d√≠as</description>
            </item>
            <item>
              <term>4 </term>
              <description>A√±o de 360 d√≠as (m√©todo europeo)</description>
            </item>
          </list>
          <para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 condiciones que desea probar que pueden ser <b>true</b> o <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve <b>true</b> si todos sus argumentos son <b>true</b>; devuelve <b>false</b> si uno o varios argumentos son <b>false</b>.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben evaluarse en valores l√≥gicos como <b>true</b> o <b>false,</b>o los argumentos deben ser matrices o referencias que contengan valores l√≥gicos. </para>
          <para>Si un argumento de matriz o referencia contiene texto o celdas vac√≠as, esos valores se omiten.</para>
          <para>Si el rango especificado no contiene ning√∫n valor l√≥gico, este m√©todo devuelve un valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se usa sin un calificador de objeto, esta propiedad devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Application" /> objeto que representa la Microsoft Excel aplicaci√≥n. Cuando se usa con un calificador de objeto, esta propiedad devuelve un <see cref="T:Microsoft.Office.Interop.Excel.Application" /> objeto que representa al creador del objeto especificado. Puede usar la propiedad con un objeto de automatizaci√≥n OLE para devolver la aplicaci√≥n de dicho objeto. Solo lectura.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">El numeral romano que desea convertir.</param>
        <summary>Convierte un n√∫mero romano en un n√∫mero √°rabe.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto o referencia a una celda que contiene el texto que desea cambiar. Si el texto no contiene ninguna letra de dos bytes, el texto no se cambia.</param>
        <summary>Para los idiomas de conjunto de caracteres de doble byte (DBCS), cambia los caracteres de ancho completo (doble byte) a caracteres de ancho medio (byte √∫nico).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Seno del √°ngulo que desea obtener y debe estar comprendido entre -1 y 1.</param>
        <summary>Devuelve el arcoseno, o seno inverso, de un n√∫mero. La arcosina es el √°ngulo cuyo seno es <paramref name="Arg1" /> . El √°ngulo devuelto se expresa en radianes, comprendido entre el rango que abarca desde -pi/2 hasta pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para expresar la arcsina en grados, multiplique el resultado por 180/PI( ) o use el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> m√©todo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real.</param>
        <summary>Devuelve el seno hiperb√≥lico inverso de un n√∫mero. El seno hiperb√≥lico inverso es el valor cuyo seno hiperb√≥lico es , por lo que <paramref name="Arg1" /> Asinh(Sinh(number)) es <paramref name="Arg1" /> igual a .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coordenada X del punto.</param>
        <param name="Arg2">Coordenada Y del punto.</param>
        <summary>Devuelve el arco tangente, o la tangente inversa, de las coordenadas x e y especificadas. El arco tangente es el √°ngulo existente entre el eje x respecto a una l√≠nea que contiene el origen de coordenadas (0,0) y un punto que tiene las coordenadas (x_n√∫m, y_n√∫m). El √°ngulo se expresa en radianes y est√° comprendido entre -pi y pi, excluyendo -pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Un resultado positivo representa un √°ngulo ascendente a partir del eje x, mientras que un resultado negativo corresponde a un √°ngulo descendente.</para>
          <para>
            <b>Atan2(a,b)</b> es <b>igual a Atan(b/a)</b>, excepto que a puede ser igual a 0 en <b>Atan2</b>. </para>
          <para>Si ambos <paramref name="Arg1" /> y <paramref name="Arg2" /> son 0, Atan2 devuelve un valor de error. </para>
          <para>Para expresar la arctangent en grados, multiplique el resultado por 180/PI( ) o use el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> m√©todo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real comprendido entre 1 y -1.</param>
        <summary>Devuelve la tangente hiperb√≥lica inversa de un n√∫mero. El n√∫mero debe estar comprendido entre -1 y 1 (excluidos -1 y 1).</summary>
        <returns>To be added.</returns>
        <remarks><para>La tangente hiperb√≥lica inversa es el valor cuya tangente hiperb√≥lica es <b>Arg1</b>, por lo que <b>Atanh(Tanh(number))</b> es <paramref name="Arg1" /> igual a .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos cuyo promedio de desviaciones absolutas desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el promedio de las desviaciones absolutas de la media para los puntos de datos. AveDev es una medida de la variabilidad de un conjunto de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>AveDev</b> se ve influenciado por la unidad de medida en los datos de entrada. </para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>La ecuaci√≥n de la desviaci√≥n media es la siguiente: 

</para>
          <para>Figura 1: Ecuaci√≥n de desviaci√≥n media</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos num√©ricos cuyo promedio desea obtener.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el promedio (media aritm√©tica) de los argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. Si desea incluir valores l√≥gicos y representaciones textuales de n√∫meros en una referencia como parte del c√°lculo, utilice la funci√≥n AVERAGEA. </para>
          <para>El <b>m√©todo Average</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres indicaciones de tendencia central m√°s comunes son las siguientes:</para>
          <list type="bullet">
            <item>
              <description>Promedio que es la media aritm√©tica y se calcula agregando un grupo de n√∫meros y dividiendo por el recuento de esos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es igual a 5. </description>
            </item>
            <item>
              <description>Mediana que es el n√∫mero medio de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores mayores que la mediana y la mitad de los n√∫meros tienen valores inferiores a la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo que es el n√∫mero que se produce con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, la moda de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para>Al calcular el promedio de celdas, tenga en cuenta que las celdas vac√≠as son distintas de las que contienen el valor cero, sobre todo si ha desactivado la casilla Valores cero de la ficha Ver (comando Opciones, men√∫ Herramientas). Las celdas vac√≠as no se tienen en cuenta, pero s√≠ los valores cero.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Una o m√°s celdas cuyo promedio se debe calcular.</param>
        <param name="Arg2">Criterios en forma de n√∫mero, expresi√≥n, referencia de celdas o texto que define de qu√© celdas se calcula el promedio. Por ejemplo, los criterios pueden expresarse como 32, "32", " &gt; 32", "manzanas" o B4.</param>
        <param name="Arg3">Conjunto real de celdas cuyo promedio se debe calcular. Si se omite, se utiliza un rango.</param>
        <summary>Devuelve el promedio (media aritm√©tica) de todas las celdas de un rango que cumplen unos criterios dados.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se omiten las celdas del rango que contienen <b>true</b> o <b>false.</b> </para>
          <para>Si una celda en rango o average_range es una celda vac√≠a, <b>AverageIf</b> la omite. </para>
          <para>Si una celda en criteria est√° vac√≠a, <b>AverageIf</b> la trata como un valor 0. </para>
          <para>Si no hay celdas en el rango que cumplan los criterios, <b>AverageIf</b> genera un valor de error. </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para>Rango_promedio no tiene por qu√© tener el mismo tama√±o y forma que el rango. Las celdas cuyo promedio se calcula en realidad se determinan utilizando la celda superior izquierda de rango_promedio como celda inicial y luego se incluyen las celdas que corresponden con el tama√±o y la forma del rango. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>El <b>m√©todo AverageIf</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres indicaciones de tendencia central m√°s comunes son las siguientes:</para>
          <list type="bullet">
            <item>
              <description>Promedio que es la media aritm√©tica y se calcula agregando un grupo de n√∫meros y dividiendo por el recuento de esos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es igual a 5. </description>
            </item>
            <item>
              <description>Mediana que es el n√∫mero medio de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores mayores que la mediana y la mitad de los n√∫meros tienen valores inferiores a la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo que es el n√∫mero que se produce con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, la moda de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uno o m√°s rangos en los que evaluar los criterios asociados.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Devuelve el promedio (media aritm√©tica) de todas las celdas que cumplen varios criterios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si una celda de average_range es una celda vac√≠a, <b>AverageIfs</b> la omite. </para>
          <para>Si una celda de un rango de criterios est√° vac√≠a, <b>AverageIfs</b> la trata como un valor 0. </para>
          <para>Las celdas del rango que <b>contienen true</b> se eval√∫an como 1; las celdas del rango que <b>contienen false</b> eval√∫an como 0 (cero). </para>
          <para>Las celdas de rango_promedio s√≥lo se utilizan en el c√°lculo del promedio si todos los criterios especificados correspondientes devuelven el valor verdadero en cada una de esas celdas.</para>
          <para>Si las celdas average_range est√°n vac√≠as o contienen valores de texto que no se pueden traducir en n√∫meros, <b>AverageIfs</b> genera un error. </para>
          <para>Si no hay celdas que cumplan todos los criterios, <b>AverageIfs</b> genera un valor de error. </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para>Los rangos de tipo rango_criterios no tienen por qu√© tener el mismo tama√±o y forma que rango_promedio. Las celdas cuyo promedio se calcula en realidad se determinan utilizando la celda superior izquierda de rango_criterios como celda inicial y luego se incluyen las celdas que corresponden con el tama√±o y la forma del rango. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>La <b>funci√≥n AverageIfs</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres indicaciones de tendencia central m√°s comunes son las siguientes:</para>
          <list type="bullet">
            <item>
              <description>Promedio que es la media aritm√©tica y se calcula agregando un grupo de n√∫meros y dividiendo por el recuento de esos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es igual a 5. </description>
            </item>
            <item>
              <description>Mediana que es el n√∫mero medio de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores mayores que la mediana y la mitad de los n√∫meros tienen valores inferiores a la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo que es el n√∫mero que se produce con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, la moda de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que desea convertir en texto, o referencia a una celda que contiene un n√∫mero, o una f√≥rmula que produce un n√∫mero.</param>
        <summary>Convierte un n√∫mero en texto tailand√©s y agrega un sufijo de "Baht".</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que desea convertir.</param>
        <param name="Arg2">Radix base en el que desea convertir el n√∫mero.</param>
        <param name="Arg3">Longitud m√≠nima de la cadena devuelta. Si no se omiten los ceros iniciales no se agregan.</param>
        <summary>Convierte un n√∫mero en una representaci√≥n de texto con el radix especificado (base).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n Bessel. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel modificada, que equivale a la funci√≥n Bessel evaluada para argumentos puramente imaginarios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el valor de x no es num√©rico, BesselI devuelve el valor de error #¬°VALOR! </para>
          <para>Si el valor de n no es num√©rico, BesselI genera un valor de error. </para>
          <para>Si n &lt; 0, BesselI genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel modificada de la variable x es: 

</para>
          <para>Figura 1: Funci√≥n Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n Bessel. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x no es num√©rico, <b>BesselJ</b> genera un valor de error. </para>
          <para>Si n no es num√©rico, <b>BesselJ</b> devuelve el valor genera un error. </para>
          <para>Si n &lt; 0, <b>BesselJ</b> genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel de la variable x es: 

 </para>
          <para>Figura 1: Funci√≥n Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>Figura 2: Funci√≥n Gamma</para>
          <para> </para>
          <para> </para>
          <para>es la funci√≥n Gamma.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel modificada, que equivale a las funciones Bessel evaluadas para argumentos puramente imaginarios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x no es num√©rico, <b>BesselK</b> genera un valor de error. </para>
          <para>Si n no es num√©rico, <b>BesselK</b> genera un valor de error. </para>
          <para>Si n &lt; 0, <b>BesselK</b> genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel modificada de la variable x es: 

 </para>
          <para>Figura 1: Funci√≥n Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para>donde Jn e Yn son las funciones J e Y Bessel, respectivamente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor en el que evaluar la funci√≥n.</param>
        <param name="Arg2">Orden de la funci√≥n. Si n no es un n√∫mero entero, se trunca.</param>
        <summary>Devuelve la funci√≥n Bessel, que tambi√©n se denomina funci√≥n de Weber o funci√≥n Neumann.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x no es num√©rico, <b>BesselY</b> genera un valor de error. </para>
          <para>Si n no es num√©rico, <b>BesselY</b> genera un valor de error. </para>
          <para>Si n &lt; 0, <b>BesselY</b> genera un valor de error. </para>
          <para>El en√©simo orden de la funci√≥n Bessel de la variable x es: 

 </para>
          <para>Figura 1: Funci√≥n Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor, comprendido entre A y B, con el que se debe evaluar la funci√≥n.</param>
        <param name="Arg2">Par√°metro alfa de la distribuci√≥n.</param>
        <param name="Arg3">Par√°metro beta de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true</b>, BETA. DIST devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <param name="Arg5">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg6">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n beta acumulativa.</summary>
        <returns>To be added.</returns>
        <remarks><para>La distribuci√≥n beta se usa generalmente para estudiar las variaciones, a trav√©s de varias muestras, de un porcentaje que representa alg√∫n fen√≥meno, por ejemplo, el tiempo diario que la gente dedica a mirar televisi√≥n.</para>
          <list type="bullet">
            <item>
              <description>Si alg√∫n argumento no esnum√©rico, <b>Beta_Dist</b> devuelve el #VALUE! valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>Beta_Dist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si x &lt; A, x &gt; B o A = B, <b>Beta_Dist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si omite los valores de A y B (l√≠mite inferior y superior), <b>Beta_Dist</b> usa la distribuci√≥n beta acumulativa est√°ndar, de modo que A = 0 y B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n beta.</param>
        <param name="Arg2">Par√°metro alfa de la distribuci√≥n.</param>
        <param name="Arg3">El par√°metro Beta de la distribuci√≥n.</param>
        <param name="Arg4">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg5">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la inversa de la funci√≥n de distribuci√≥n acumulativa para una distribuci√≥n beta determinada. Es decir, si probabilidad = Beta_Dist(x,...), entonces Beta_Inv(probabilidad,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>La distribuci√≥n beta puede emplearse en la planeaci√≥n de proyectos para crear modelos con fechas de finalizaci√≥n probables, de acuerdo con un plazo de finalizaci√≥n y variabilidad esperados.</para>
          <list type="bullet">
            <item>
              <description>Si alg√∫n argumento no es num√©rico, <b>Beta_Inv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>Beta_Inv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si la probabilidad ‚â§ 0 o probabilidad &gt; 1, <b>Beta_Inv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si omite los valores de A y B (l√≠mite inferior y superior), <b>Beta_Inv</b> usa la distribuci√≥n beta acumulativa est√°ndar, de modo que A = 0 y B = 1.</description>
            </item>
          </list>
          <para>Dado un valor de probabilidad, <b>Beta_Inv</b> busca ese valor x de modo que Beta_Dist(x, alfa, beta, TRUE, A, B) = probabilidad. Por lo tanto, la <b>precisi√≥n Beta_Inv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> . <b>Beta_Inv</b> una t√©cnica de b√∫squeda iterativa.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor, comprendido entre A y B, con el que se debe evaluar la funci√≥n.</param>
        <param name="Arg2">Par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Par√°metro de la distribuci√≥n.</param>
        <param name="Arg4">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg5">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n beta acumulativa.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> m√©todo.</para>
          <para>La distribuci√≥n beta se suele utilizar frecuentemente para estudiar la variaci√≥n en el porcentaje entre varias muestras, como el tiempo del d√≠a que la poblaci√≥n dedica a ver la televisi√≥n.</para>
          <list type="bullet">
            <item>
              <description>Si alg√∫n argumento no esnum√©rico, <b>BetaDist</b> devuelve el #VALUE! valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>BetaDist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si x &lt; A, x &gt; B o A = B, <b>BetaDist</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si omite los valores de A y B, <b>BetaDist</b> usa la distribuci√≥n beta acumulativa est√°ndar, de modo que A = 0 y B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n beta.</param>
        <param name="Arg2">Par√°metro alfa de la distribuci√≥n.</param>
        <param name="Arg3">El par√°metro Beta de la distribuci√≥n.</param>
        <param name="Arg4">L√≠mite inferior opcional del intervalo de x.</param>
        <param name="Arg5">L√≠mite superior opcional del intervalo de x.</param>
        <summary>Devuelve la inversa de la funci√≥n de distribuci√≥n acumulativa para una distribuci√≥n beta determinada. Es decir, si probabilidad = BetaDist(x,...), entonces BetaInv(probabilidad,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> m√©todo.</para>
          <para>La distribuci√≥n beta puede utilizarse en el dise√±o de proyectos para obtener un modelo de los tiempos de finalizaci√≥n probables dados unos par√°metros esperados de tiempo de finalizaci√≥n y de variabilidad.</para>
          <list type="bullet">
            <item>
              <description>Si alg√∫n argumento no es num√©rico, <b>BetaInv</b> genera un valor de error.</description>
            </item>
            <item>
              <description>Si alfa ‚â§ 0 o beta ‚â§ 0, <b>BetaInv</b> genera un valor de error. </description>
            </item>
            <item>
              <description>Si la probabilidad ‚â§ 0 o probabilidad &gt; 1, <b>BetaInv</b> genera un valor de error. </description>
            </item>
            <item>
              <description>Si omite los valores de A y B, <b>BetaInv</b> usa la distribuci√≥n beta acumulativa est√°ndar, de modo que A = 0 y B = 1.</description>
            </item>
          </list>
          <para>Dado un valor de probabilidad, <b>BetaInv</b> busca ese valor x de modo que BetaDist(x, alfa, beta, A, B) = probabilidad. Por lo tanto, la precisi√≥n <b>de BetaInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . <b>BetaInv usa</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 100 iteraciones, la funci√≥n devuelve un valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero binario que desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (10 bits). El bit m√°s significativo del n√∫mero es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <summary>Convierte un n√∫mero binario en decimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el n√∫mero no es un n√∫mero binario v√°lido o si contiene m√°s de 10 caracteres (10 bits), Bin2Dec genera un valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero binario que desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (10 bits). El bit m√°s significativo del n√∫mero es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">N√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Bin2Hex</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero binario en hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number no es un n√∫mero binario v√°lido o si number contiene m√°s de 10 caracteres (10 bits), <b>Bin2Hex</b> genera un error. </para>
          <para>Si el n√∫mero es negativo, <b>Bin2Hex</b> omite los lugares y devuelve un n√∫mero hexadecimal de 10 caracteres. </para>
          <para>Si <b>Bin2Hex requiere</b> m√°s de caracteres, genera un error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Bin2Hex</b> genera un error. </para>
          <para>Si places es negativo, <b>Bin2Hex</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero binario que desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (10 bits). El bit m√°s significativo del n√∫mero es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">N√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Bin2Oct</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero binario en octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number no es un n√∫mero binario v√°lido o si number contiene m√°s de 10 caracteres (10 bits), <b>Bin2Oct</b> genera un error. </para>
          <para>Si el n√∫mero es negativo, <b>Bin2Oct</b> omite los lugares y devuelve un n√∫mero octal de 10 caracteres. </para>
          <para>Si <b>Bin2Oct requiere</b> m√°s de caracteres, genera un error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Bin2Oct</b> genera un error. </para>
          <para>Si places es negativo, <b>Bin2Oct</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s: el n√∫mero de √©xitos en las pruebas.</param>
        <param name="Arg2">Pruebas: el n√∫mero de pruebas independientes.</param>
        <param name="Arg3">Probability_s: probabilidad de √©xito en cada prueba.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si cumulative es <b>True</b>, el m√©todo devuelve la funci√≥n de distribuci√≥n acumulativa, que es la probabilidad de que haya como m√°ximo √©xitos number_s; si Es False , devuelve la funci√≥n de masa de probabilidad, que es la probabilidad de que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> number_s <b></b>√©xitos.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria discreta siguiendo una distribuci√≥n binomial.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use el m√©todo <b>Binom_Dist</b> en problemas con un n√∫mero fijo de pruebas o ensayos, cuando los resultados de cualquier ensayo son s√≥lo √©xito o fracaso, cuando los ensayos son independientes y cuando la probabilidad de √©xito es constante durante todo el experimento. Por ejemplo, el <b>Binom_Dist</b> puede calcular la probabilidad de que dos de los tres siguientes reci√©n nacidos sean varones. </para>
          <list type="bullet">
            <item>
              <description>Los argumentos de n√∫mero de √©xitos y de ensayos se truncan a valores enteros.</description>
            </item>
            <item>
              <description>Si number_s, pruebas o probability_s no esnum√©rico, el m√©todo <b>Binom_Dist</b> genera un error. </description>
            </item>
            <item>
              <description>Si number_s &lt; 0 o number_s &gt; pruebas, <b>el Binom_Dist</b> genera un error. </description>
            </item>
            <item>
              <description>Si probability_s &lt; 0 o probability_s &gt; 1, <b>el Binom_Dist</b> genera un error. La funci√≥n de masa de probabilidad binomial es: </description>
            </item>
          </list>
          <para>Donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>es COMBIN(n,x).</para>
          <para>La distribuci√≥n binomial acumulativa es:</para>
          <para>Figura 3: Distribuci√≥n binomial acumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de pruebas independientes.</param>
        <param name="Arg2">Probabilidad de √©xito en cada prueba.</param>
        <param name="Arg3">N√∫mero de √©xitos en las pruebas.</param>
        <param name="Arg4">Si se proporciona, esta funci√≥n devuelve la probabilidad de que el n√∫mero de pruebas correctas sea entre Arg3 y Arg4.</param>
        <summary>Devuelve la probabilidad de un resultado de prueba mediante una distribuci√≥n binomial.</summary>
        <returns>Doble</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Pruebas: el n√∫mero de pruebas de Bernoulli.</param>
        <param name="Arg2">Probability_s: probabilidad de √©xito en cada prueba.</param>
        <param name="Arg3">Alfa: el valor del criterio.</param>
        <summary>Devuelve la funci√≥n inversa de la probabilidad de una variable aleatoria discreta siguiendo una distribuci√≥n binomial.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si Trials, Probability_s o Alpha no sonnum√©ricos, <b>el Binom_Inv</b> genera un error. </para>
          <para>Si Ensayos no es un n√∫mero entero, se trunca.</para>
          <para>Si se prueba &lt; 0, <b>el Binom_Inv</b> genera un error. </para>
          <para>Si Probability_s &lt; 0 o Probability_s &gt; 1, <b>el Binom_Inv</b> genera un error. </para>
          <para>Si Alfa &lt; 0 o Alfa &gt; 1, <b>el Binom_Inv</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de √©xitos en las pruebas.</param>
        <param name="Arg2">N√∫mero de pruebas independientes.</param>
        <param name="Arg3">Probabilidad de √©xito en cada prueba.</param>
        <param name="Arg4">Valor l√≥gico que determina la forma de la funci√≥n. Si el valor acumulado es <b>true</b>, <b>BinomDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa, que es la probabilidad de que haya como number_s correctos; si <b>es false</b>, devuelve la funci√≥n de masa de probabilidad, que es la probabilidad de que haya number_s correctos.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria discreta siguiendo una distribuci√≥n binomial.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>BinomDist</b> en problemas con un n√∫mero fijo de pruebas o pruebas, cuando los resultados de cualquier prueba solo son correctos o fallados, cuando las pruebas son independientes y cuando la probabilidad de √©xito es constante en todo el experimento. Por ejemplo, <b>BinomDist</b> puede calcular la probabilidad de que dos de los tres siguientes reci√©n nacidos sean varones. </para>
          <para>Los argumentos de n√∫mero de √©xitos y de ensayos se truncan a valores enteros.</para>
          <para>Si number_s, pruebas o probability_s no <b>esnum√©rico, BinomDist</b> genera un error. </para>
          <para>Si number_s &lt; 0 o number_s &gt; pruebas, <b>BinomDist</b> genera un error. </para>
          <para>Si probability_s &lt; 0 o probability_s &gt; 1, <b>BinomDist</b> genera un error. </para>
          <para>La funci√≥n de masa de probabilidad binomial es: </para>
          <para>Figura 1: Funci√≥n de masa de probabilidad binomial</para>
          <para> </para>
          <para> </para>
          <para>Donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>es COMBIN(n,x).</para>
          <para>La distribuci√≥n binomial acumulativa es:</para>
          <para>Figura 3: Distribuci√≥n binomial acumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <summary>Devuelve un 'Bitwise And' de dos n√∫meros.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">El n√∫mero de bits por los que desea desplazar Arg1 hacia la izquierda.</param>
        <summary>Devuelve un n√∫mero de valor desplazado a la izquierda por shift_amount bits.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <summary>Devuelve un or bit a bit de 2 n√∫meros.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">N√∫mero de bits por los que desea desplazar Arg1 hacia la derecha.</param>
        <summary>Devuelve un n√∫mero de valor desplazado a la derecha por shift_amount bits.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <param name="Arg2">Representaci√≥n decimal del n√∫mero binario que desea evaluar.</param>
        <summary>Devuelve un bit a bit "Exclusive Or" de dos n√∫meros.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Redondea un n√∫mero hasta el pr√≥ximo m√∫ltiplo significativo.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> m√©todo.</para>
          <para>Por ejemplo, si desea evitar usar c√©ntimos en los precios y el precio del producto es de 4,42 $, use la f√≥rmula MULTIPLO.SUPERIOR(4,42;0,05) para redondear los precios hacia arriba hasta el m√∫ltiplo de cinco c√©ntimos m√°s cercano.</para>
          <para>Si alguno de los argumentos no es num√©rico, <b>Ceiling</b> genera un error.</para>
          <para>Independientemente del signo del n√∫mero, los valores se redondean hacia arriba cuando se ajustan a partir de cero. Si el n√∫mero es un m√∫ltiplo significativo exacto, no se realiza ning√∫n redondeo.</para>
          <para>Si el n√∫mero y la cifra significativa tienen distinto signo, <b>Ceiling</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor que desea redondear.</param>
        <param name="Arg2">El m√∫ltiplo al que desea redondear.</param>
        <param name="Arg3">Cuando se da y es distinto de cero, esta funci√≥n se redondea desde cero.</param>
        <summary>Redondear un n√∫mero hacia arriba, al entero m√°s cercano o al m√∫ltiplo m√°s cercano de importancia.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Devuelve el n√∫mero especificado redondeado al m√∫ltiplo significativo m√°s cercano.</summary>
        <returns>To be added.</returns>
        <remarks><para>Por ejemplo, si desea evitar usar c√©ntimos en los precios y el precio del producto es de 4,42 $, use la f√≥rmula MULTIPLO.SUPERIOR(4,42;0,05) para redondear los precios hacia arriba hasta el m√∫ltiplo de cinco c√©ntimos m√°s cercano.</para>
          <para>Seg√∫n el signo del n√∫mero y los argumentos de cifra significativa, el m√©todo <b>Ceiling_Precise</b> redondea acerc√°ndose al cero o alej√°ndose de √©ste.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
          </list>
          <para>Si alguno de los argumentos no es num√©rico, <b>Ceiling_Precise</b> genera un error.</para>
          <para>Si el n√∫mero es un m√∫ltiplo significativo exacto, no se realiza ning√∫n redondeo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor al que desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria continua siguiendo una distribuci√≥n chi cuadrado de una sola cola.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> m√©todos y.</para>
          <para>La distribuci√≥n s2 est√° asociada a una prueba 2. Use la prueba de ci√≥n2 para comparar los valores observados y esperados.</para>
          <para>Por ejemplo, un experimento gen√©tico podr√≠a estar basado en la hip√≥tesis de que la pr√≥xima generaci√≥n de plantas presentar√° un conjunto determinado de colores. Al comparar los resultados observados con los resultados esperados, puede decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>ChiDist</b> genera un error. </para>
          <para>Si x es negativo, <b>ChiDist</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si degrees_freedom &lt; 1 o degrees_freedom &gt; 10^10, <b>ChiDist</b> genera un error. </para>
          <para>
            <b>ChiDist</b> se calcula como ChiDist = P(X x), donde &gt; X es una variable aleatoria 2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n chi cuadrado.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve para una probabilidad dada, de una sola cola, el valor de la variable aleatoria siguiendo una distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> m√©todos y.</para>
          <para>Si probabilidad = ChiDist(x,...), entonces ChiInv(probabilidad,...) = x. Utilice esta funci√≥n para comparar los resultados observados con los resultados esperados, a fin de decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>ChiInv</b> genera un error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>ChiInv</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si degrees_freedom &lt; 1 o degrees_freedom ‚â• 10^10, <b>ChiInv</b> genera un error.</para>
          <para>Dado un valor de probabilidad, <b>ChiInv</b> busca ese valor x de forma que ChiDist(x, degrees_freedom) = probabilidad. Por lo tanto, la precisi√≥n <b>de ChiInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> . <b>ChiInv usa</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 64 iteraciones, la funci√≥n genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">Deg_freedom: el n√∫mero de grados de libertad.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b>CHISQ_DIST devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si cualquiera de los argumentos no es num√©rico, CHISQ_DIST devuelve el valor de error #¬°VALOR! </para>
          <para>Si x es negativo, CHISQ_DIST devuelve el valor de error #¬°NUM! </para>
          <para>Si el argumento grados_de_libertad no es un entero, se trunca. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor al que desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve la probabilidad de cola derecha de la distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks><para>La distribuci√≥n s2 est√° asociada a una prueba 2. Use la prueba de ci√≥n2 para comparar los valores observados y esperados.</para>
          <para>Por ejemplo, un experimento gen√©tico podr√≠a estar basado en la hip√≥tesis de que la pr√≥xima generaci√≥n de plantas presentar√° un conjunto determinado de colores. Al comparar los resultados observados con los resultados esperados, puede decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no <b>esnum√©rico, ChiSq_Dist_RT</b> genera un error. </para>
          <para>Si x es negativo, <b>ChiSq_Dist_RT</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si degrees_freedom &lt; 1 o degrees_freedom &gt; 10^10, <b>ChiSq_Dist_RT</b> genera un error. <b>ChiSq_Dist_RT</b> se calcula como ChiSq_Dist_RT = P(X x), donde &gt; X es una variable aleatoria 2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada a la distribuci√≥n con chi cuadrado.</param>
        <param name="Arg2">Deg_freedom: el n√∫mero de grados de libertad.</param>
        <summary>Devuelve el inverso de la probabilidad de cola izquierda de la distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>ChiSq_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>ChiSq_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento grados_de_libertad no es un entero, se trunca.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad asociada con la distribuci√≥n chi cuadrado.</param>
        <param name="Arg2">N√∫mero de grados de libertad.</param>
        <summary>Devuelve el inverso de una probabilidad dada, de una cola derecha, en una distribuci√≥n chi cuadrado.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si probabilidad = ChiSq_Dist_RT(x,...), entonces ChiSq_Inv_RT(probabilidad,...) = x. Utilice esta funci√≥n para comparar los resultados observados con los resultados esperados, a fin de decidir si la hip√≥tesis original es v√°lida.</para>
          <para>Si cualquiera de los argumentos no <b>esnum√©rico, ChiSq_Inv_RT</b> genera un error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>ChiSq_Inv_RT</b> genera un error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si degrees_freedom &lt; 1 o degrees_freedom ‚â• 10^10, <b>ChiSq_Inv_RT</b> genera un error.</para>
          <para>Dado un valor de probabilidad, <b>ChiSq_Inv_RT</b> busca ese valor x de forma que ChiSq_Dist_RT(x, degrees_freedom) = probabilidad. Por lo tanto, la <b>precisi√≥n ChiSq_Inv_RT</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> . <b>ChiSq_Inv_RT</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 64 iteraciones, la funci√≥n genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de datos que contiene las observaciones que probar frente a los valores esperados.</param>
        <param name="Arg2">Rango de datos que contiene la relaci√≥n entre el producto de los totales de filas y columnas y el total general.</param>
        <summary>Devuelve la prueba de independencia.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> devuelve el valor de la distribuci√≥n de chi cuadrados (s2) para la estad√≠stica y los grados de libertad adecuados. Puede usar pruebas 2 para determinar si un experimento comprueba los resultados hipot√©ticos.</para>
          <para>Si actual_range y expected_range tienen un n√∫mero diferente de puntos de datos, <b>ChiSq_Test</b> devuelve el valor de error #N/A. </para>
          <para>En primer lugar, la prueba œá2 calcula una estad√≠stica 2 mediante la f√≥rmula: </para>
          <para>Figura 1: F√≥rmula para x prueba al cuadrado</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <list type="bullet">
            <item>
              <description>Aij = frecuencia real en la i-th fila, columna j-th</description>
            </item>
            <item>
              <description>Eij = frecuencia esperada en la fila i-th, columna j-th</description>
            </item>
            <item>
              <description>r = n√∫mero o filas</description>
            </item>
            <item>
              <description>c = n√∫mero de columnas</description>
            </item>
          </list>
          <para>Un valor bajo de ci√≥n2 es un indicador de independencia. Como se puede ver en la f√≥rmula, s2 siempre es positivo o 0, y es 0 solo si Aij = Eij para cada i,j.</para>
          <para>
            <b>ChiSq_Test</b> devuelve la probabilidad de que un valor de la estad√≠stica œá2 al menos tan alto como el valor calculado por la f√≥rmula anterior podr√≠a haber ocurrido por azar bajo la suposici√≥n de independencia. En la inform√°tica de esta probabilidad, <b>ChiSq_Test</b> la distribuci√≥n 2 con un n√∫mero adecuado de grados de libertad, df. Si r &gt; 1 y c &gt; 1, df = (r - 1)(c - 1). Si r = 1 y c &gt; 1, df = c - 1 o si r &gt; 1 y c = 1, df = r - 1. No est√° permitido que r = c= 1, que genera un error.</para>
          <para>El uso <b>ChiSq_Test</b> es m√°s adecuado cuando los Eij no son demasiado peque√±os. Algunos estad√≠sticos sugieren que cada Eij debe ser mayor o igual que 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de datos que contiene las observaciones que probar frente a los valores esperados.</param>
        <param name="Arg2">ImportanteEsta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> m√©todo. Rango de datos que contiene la relaci√≥n entre el producto de los totales de filas y columnas y el total general.</param>
        <summary>Devuelve la prueba de independencia.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiTest</b> devuelve el valor de la distribuci√≥n de chi cuadrado (s2) para la estad√≠stica y los grados de libertad adecuados. Puede usar pruebas 2 para determinar si un experimento comprueba los resultados hipot√©ticos.</para>
          <para>Si actual_range y expected_range tienen un n√∫mero diferente de puntos de datos, <b>ChiTest</b> devuelve el valor de error #N/A. </para>
          <para>En primer lugar, la prueba œá2 calcula una estad√≠stica 2 mediante la f√≥rmula: </para>
          <para>Figura 1: F√≥rmula para x prueba al cuadrado</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <list type="bullet">
            <item>
              <description>Aij = frecuencia real en la i-th fila, columna j-th</description>
            </item>
            <item>
              <description>Eij = frecuencia esperada en la fila i-th, columna j-th</description>
            </item>
            <item>
              <description>r = n√∫mero o filas</description>
            </item>
            <item>
              <description>c = n√∫mero de columnas</description>
            </item>
          </list>
          <para> </para>
          <para>Un valor bajo de ci√≥n2 es un indicador de independencia. Como se puede ver en la f√≥rmula, s2 siempre es positivo o 0, y es 0 solo si Aij = Eij para cada i,j.</para>
          <para>
            <b>ChiTest</b> devuelve la probabilidad de que un valor de la estad√≠stica s2 al menos tan alto como el valor calculado por la f√≥rmula anterior podr√≠a haber ocurrido por azar bajo la suposici√≥n de independencia. En el c√°lculo de esta probabilidad, <b>ChiTest</b> usa la distribuci√≥n 2 con un n√∫mero adecuado de grados de libertad, df. Si r &gt; 1 y c &gt; 1, df = (r - 1)(c - 1). Si r = 1 y c &gt; 1, df = c - 1 o si r &gt; 1 y c = 1, df = r - 1. No est√° permitido que r = c= 1, que genera un error.</para>
          <para>El uso <b>de ChiTest</b> es m√°s apropiado cuando los Eij no son demasiado peque√±os. Algunos estad√≠sticos sugieren que cada Eij debe ser mayor o igual que 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Especifica el argumento de valor que se selecciona. Arg1 debe ser un n√∫mero comprendido entre 1 y 29, o una f√≥rmula o referencia a una celda que contiene un n√∫mero comprendido entre 1 y 29.</param>
        <param name="Arg2">Entre 1 y 29 argumentos de valor entre los que Choose selecciona un valor o una acci√≥n que realizar bas√°ndose en el valor de Arg1. Los argumentos pueden ser n√∫meros, referencias de celda, nombres definidos, f√≥rmulas, funciones o texto.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Se <paramref name="Arg1" /> usa como √≠ndice para devolver un valor de la lista de argumentos de valor.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si <paramref name="Arg1" /> es 1, <b>Choose</b> devuelve value1; si es 2, <b>Choose</b> devuelve value2, y as√≠ sucesivamente. </para>
          <para>Si es menor que 1 o mayor que el n√∫mero del √∫ltimo valor de la <paramref name="Arg1" /> lista, <b>Choose</b> genera un error. </para>
          <para>Si <paramref name="Arg1" /> es una fracci√≥n, se trunca al n√∫mero entero m√°s bajo antes de usarse. </para>
          <para>Si <paramref name="Arg1" /> es una matriz, cada valor se eval√∫a cuando se eval√∫a <b>Choose.</b> </para>
          <para>Los argumentos de valor de <b>Choose</b> pueden ser referencias de intervalo, as√≠ como valores √∫nicos. Por ejemplo, la f√≥rmula:</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>eval√∫a como:</para>
          <para>=SUM(B1:B10)</para>
          <para>que, a continuaci√≥n, devuelve un valor basado en los valores del intervalo B1:B10.</para>
          <para>La <b>funci√≥n Choose</b> se eval√∫a primero y devuelve la referencia B1:B10. A continuaci√≥n, la funci√≥n SUM se eval√∫a mediante B1:B10, el resultado de la <b>funci√≥n Choose,</b> como argumento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier informaci√≥n de una hoja de c√°lculo de la que se desea eliminar los caracteres no imprimibles.</param>
        <summary>Quita del texto todos los caracteres no imprimibles.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>Limpiar en</b> el texto importado desde otras aplicaciones que contenga caracteres que pueden no imprimirse con el sistema operativo. Por ejemplo, puede usar <b>Clean</b> para quitar c√≥digo de equipo de bajo nivel que suele estar al principio y al final de los archivos de datos y que no se puede imprimir.</para>
          <para>
            <b>Importante:</b>La <b>funci√≥n Clean</b> se dise√±√≥ para quitar los primeros 32 caracteres no imprimibles del c√≥digo ASCII de 7 bits (valores de 0 a 31) del texto. En el juego de caracteres Unicode hay caracteres no imprimibles adicionales (valores 127, 129, 141, 143, 144 y 157). Por s√≠ misma, <b>la funci√≥n Clean</b> no quita estos caracteres no imprimibles adicionales.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero de elementos.</param>
        <param name="Arg2">N√∫mero de elementos existentes en cada combinaci√≥n.</param>
        <summary>Devuelve el n√∫mero de combinaciones para un n√∫mero determinado de elementos. Use <b>Combin</b> para determinar el n√∫mero total posible de grupos para un n√∫mero determinado de elementos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos num√©ricos se truncan y se convierten en n√∫meros enteros.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>Combin</b> genera un error. </para>
          <para>Si el &lt; n√∫mero 0, number_chosen &lt; 0 o n√∫mero &lt; number_chosen, <b>Combin</b> genera un error. </para>
          <para>Una combinaci√≥n es cualquier conjunto o subconjunto de elementos, independientemente de su orden interno. Las combinaciones son distintas de las permutaciones, en las que el orden interno es importante.</para>
          <para>El n√∫mero de combinaciones es el siguiente, donde number = n y number_chosen = k: </para>
          <para>Figura 1: N√∫mero de combinaciones</para>
          <para> </para>
          <para> </para>
          <para>Donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">El n√∫mero total de elementos.</param>
        <param name="Arg2">N√∫mero de elementos existentes en cada combinaci√≥n.</param>
        <summary>Devuelve el n√∫mero de combinaciones con repeticiones de un n√∫mero determinado de elementos.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coeficiente real del n√∫mero complejo.</param>
        <param name="Arg2">Coeficiente imaginario del n√∫mero complejo.</param>
        <param name="Arg3">Sufijo del componente imaginario del n√∫mero complejo. Si se omite, se supone que sufijo tiene el valor "i".</param>
        <summary>Convierte coeficientes reales e imaginarios en n√∫meros complejos de la forma x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Todas las funciones de n√∫meros complejos aceptan "i" y "j" como sufijo, pero no "I" ni "J". El uso de may√∫sculas genera un error. Todas las funciones que acepten dos o m√°s n√∫meros complejos requieren que todos los sufijos se correspondan.</para>
          <para>Si <paramref name="Arg1" /> no esnum√©rico, <b>Complex</b> genera un error. </para>
          <para>Si <paramref name="Arg2" /> no esnum√©rico, <b>Complex</b> genera un error. </para>
          <para>Si <paramref name="Arg3" /> no es "i" ni "j", <b>Complex</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nivel de significaci√≥n utilizado para calcular el nivel de confianza. El nivel de confianza es igual a 100*(1 - alfa)%, es decir, un alfa de 0,05 indica un nivel de confianza de 95%.</param>
        <param name="Arg2">Desviaci√≥n est√°ndar de la poblaci√≥n para el rango de datos, que se presupone que es conocida.</param>
        <param name="Arg3">Tama√±o de la muestra.</param>
        <summary>Devuelve un valor que se puede utilizar para construir un intervalo de confianza para la media de una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> m√©todos y.</para>
          <para>El intervalo de confianza es un intervalo de valores. La media de muestra, x, est√° en el centro de este rango y el rango es x ¬± <b>Confianza</b>. Por ejemplo, si x es la media de muestra de los tiempos de entrega de los productos ordenados a trav√©s del correo, x ¬± <b>Confidence</b> es un rango de medios de poblaci√≥n. Para cualquier media de poblaci√≥n, Œº0, en este rango, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que x es mayor que alfa; para cualquier media de poblaci√≥n, Œº0, no en este rango, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que x es menor que alfa. En otras palabras, supongamos que usamos x, standard_dev y size para construir una prueba de dos colas en el nivel de significaci√≥n alfa de la hip√≥tesis de que la media de poblaci√≥n es Œº0. Entonces no rechazaremos esa hip√≥tesis si Œº0 est√° en el intervalo de confianza y rechazaremos esa hip√≥tesis si Œº0 no est√° en el intervalo de confianza. El intervalo de confianza no nos permite inferir que haya una probabilidad 1 ‚Äì alfa de que el tiempo de entrega del pr√≥ximo paquete que encarguemos est√© dentro del intervalo de confianza. </para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>Confidence</b> genera un error. </para>
          <para>Si alfa ‚â§ 0 o alfa ‚â• 1, <b>confianza</b> genera un error. </para>
          <para>Si standard_dev ‚â§ 0, <b>Confidence</b> genera un error. </para>
          <para>Si el argumento de tama√±o no es un entero, se trunca.</para>
          <para>Si el &lt; tama√±o es 1, <b>Confidence</b> genera un error. </para>
          <para>Si suponemos que el argumento alfa es igual a 0,05, ser√° necesario calcular el √°rea situada debajo de la curva normal est√°ndar que es igual a (1 - alfa) o 95%. Este valor es ¬± 1,96. Por lo tanto, el intervalo de confianza es: 

</para>
          <para>Figura 1: Intervalo de confianza</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nivel de significaci√≥n utilizado para calcular el nivel de confianza. El nivel de confianza es igual a 100*(1 - alfa)%, es decir, un alfa de 0,05 indica un nivel de confianza de 95%.</param>
        <param name="Arg2">Desviaci√≥n est√°ndar de la poblaci√≥n para el rango de datos, que se presupone que es conocida.</param>
        <param name="Arg3">Tama√±o de la muestra.</param>
        <summary>Devuelve un valor que se puede utilizar para construir un intervalo de confianza para la media de una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>El intervalo de confianza es un intervalo de valores. La media de ejemplo, x, est√° en el centro de este rango y el intervalo es x ¬± <b>Confidence_Norm</b>. Por ejemplo, si x es la media de muestra de los tiempos de entrega de los productos ordenados a trav√©s del correo, x ¬± <b>Confidence_Norm</b> es un rango de medios de poblaci√≥n. Para cualquier media de poblaci√≥n, Œº0, en este rango, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que x es mayor que alfa; para cualquier media de poblaci√≥n, Œº0, no en este rango, la probabilidad de obtener una media de muestra m√°s lejos de Œº0 que x es menor que alfa. En otras palabras, supongamos que x, standard_dev y size se usan para construir una prueba de dos colas en el nivel de significaci√≥n alfa de la hip√≥tesis de que la media de poblaci√≥n es Œº0. Entonces no rechazaremos esa hip√≥tesis si Œº0 est√° en el intervalo de confianza y rechazaremos esa hip√≥tesis si Œº0 no est√° en el intervalo de confianza. El intervalo de confianza no permite deducir que hay probabilidad 1‚Äì alfa de que el siguiente paquete tomar√° un tiempo de entrega que se encuentra en el intervalo de confianza.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si alfa ‚â§ 0 o alfa ‚â• 1, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si standard_dev ‚â§ 0, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si el argumento de tama√±o no es un entero, se trunca.</para>
          <para>Si el &lt; tama√±o 1, <b>Confidence_Norm</b> genera un error. </para>
          <para>Si se supone que el argumento alfa es igual a 0,05, ser√° necesario calcular el √°rea situada debajo de la curva normal est√°ndar que es igual a (1 - alfa) o 95%. Este valor es ¬± 1,96. Por lo tanto, el intervalo de confianza es: 

</para>
          <para>Figura 1: Intervalo de confianza</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alfa: el nivel de significaci√≥n usado para calcular el nivel de confianza. El nivel de confianza es igual a 100*(1 - alfa)%, es decir, un alfa de 0,05 indica un nivel de confianza de 95%.</param>
        <param name="Arg2">Standard_dev: desviaci√≥n est√°ndar de poblaci√≥n para el intervalo de datos y se supone que se conoce.</param>
        <param name="Arg3">Size: tama√±o de muestra.</param>
        <summary>Devuelve el intervalo de confianza para la media de una poblaci√≥n con distribuci√≥n t de Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>Confidence_T</b> devuelve el #VALUE! valor de error. </para>
          <para>Si alfa ‚â§ 0 o alfa ‚â• 1, <b>Confidence_T</b> devuelve el #NUM! valor de error. </para>
          <para>Si standard_dev ‚â§ 0, <b>Confidence_T</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de tama√±o no es un entero, se trunca.</para>
          <para>Si el tama√±o es igual a 1, <b>Confidence_T</b> devuelve #DIV/0. valor de error. </para>
          <para>Si el tama√±o es igual a 1, <b>Confidence_T</b> devuelve #DIV/0. valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor de las unidades que se desea convertir.</param>
        <param name="Arg2">Unidades del argumento de n√∫mero.</param>
        <param name="Arg3">Unidades del resultado. <b>Convert</b> acepta los siguientes valores de texto (entre comillas) para from_unit y to_unit que se enumeran en la secci√≥n Comentarios a continuaci√≥n.</param>
        <summary>Convierte un n√∫mero de un sistema de medidas en otro. Por ejemplo, <b>Convert</b> puede traducir una tabla de distancias en millas a una tabla de distancias en kil√≥metros.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Gram</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Slug</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Libra masa (avoirdupois)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (unidad de masa at√≥mica)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>Onza (sistema avdp)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Meter</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Milla</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Milla n√°utica</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Pulgada</term>
              <description>"in"</description>
            </item>
            <item>
              <term>Pie</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>Yard</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Angstrom</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Pica (1/72 pda)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Year</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>Day</term>
              <description>"day"</description>
            </item>
            <item>
              <term>Hora</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Minuto</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Segundo</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa" (o "p")</description>
            </item>
            <item>
              <term>Atm√≥sfera</term>
              <description>"atm" (o "at")</description>
            </item>
            <item>
              <term>mm de mercurio</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Newton</term>
              <description>"N"</description>
            </item>
            <item>
              <term>Dyne</term>
              <description>"dyn" (or "dy")</description>
            </item>
            <item>
              <term>Libra fuerza</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Calor√≠a termodin√°mica</term>
              <description>"c"</description>
            </item>
            <item>
              <term>Calor√≠a (4,186795 J)</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>Electronvoltio</term>
              <description>"eV" (o "ev")</description>
            </item>
            <item>
              <term>Hp-hora</term>
              <description>"HPh" (o "hh")</description>
            </item>
            <item>
              <term>Vatios-hora</term>
              <description>"Wh" (o "wh")</description>
            </item>
            <item>
              <term>Libra de pie</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" (o "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Potencia de caballo</term>
              <description>"HP" (o "h")</description>
            </item>
            <item>
              <term>Vatios</term>
              <description>"W" (o "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Tesla</term>
              <description>"T"</description>
            </item>
            <item>
              <term>Gauss</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Grado Celsius</term>
              <description>"C" (o "cel")</description>
            </item>
            <item>
              <term>Grado Fahrenheit</term>
              <description>"F" (o "fah")</description>
            </item>
            <item>
              <term>Kelvin</term>
              <description>"K" (o "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Cucharilla</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Tablespoon</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Onza l√≠quida</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>Copa</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>Pinta de EE.UU.</term>
              <description>"pt" (o "us_pt")</description>
            </item>
            <item>
              <term>Pinta del Reino Unido</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Quart</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>Gal√≥n</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>L/l</term>
              <description>"l" (o "lt")</description>
            </item>
          </list>
          <para>Los siguientes prefijos de unidad abreviada se pueden agregar a cualquier argumento de unidad de origen o unidad de destino.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Si los tipos de datos de entrada son incorrectos, <b>Convert</b> genera un error. </para>
          <para>Si la unidad no existe, <b>Convert</b> genera un error. </para>
          <para>Si la unidad no admite un prefijo de unidad abreviado, <b>Convert</b> genera un error. </para>
          <para>Si las unidades est√°n en grupos diferentes, <b>Convert</b> genera un error. </para>
          <para>Se distingue entre may√∫sculas y min√∫sculas en los nombres de unidades y prefijos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de celdas de valores.</param>
        <param name="Arg2">Segundo rango de celdas de valores.</param>
        <summary>Devuelve el coeficiente de correlaci√≥n de los <paramref name="Arg1" /> <paramref name="Arg2" /> intervalos de celdas y.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use el coeficiente de correlaci√≥n para determinar la relaci√≥n entre dos propiedades. Por ejemplo, para examinar la relaci√≥n entre el promedio de la temperatura de una localidad y el uso de aire acondicionado.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si <paramref name="Arg1" /> y tiene un n√∫mero diferente de puntos de <paramref name="Arg2" /> datos, <b>Correl</b> genera un error. </para>
          <para>Si uno o est√° vac√≠o, o si s (la desviaci√≥n est√°ndar) de sus valores es igual a <paramref name="Arg1" /> <paramref name="Arg2" /> cero, <b>Correl</b> genera un error. </para>
          <para>La ecuaci√≥n del coeficiente de correlaci√≥n es:</para>
          <para>Figura 1: Ecuaci√≥n para el coeficiente de correlaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son el ejemplo significa Average(Arg1) y Average(Arg2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cualquier n√∫mero real cuyo coseno hiperb√≥lico desea obtener.</param>
        <summary>Devuelve el coseno hiperb√≥lico de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks><para>La f√≥rmula del coseno hiperb√≥lico es: </para>
          <para>Figura 1: F√≥rmula del coseno hiperb√≥lico</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo de radianes para el que quieres la cotangente.</param>
        <summary>Devuelve la cotangente de un √°ngulo.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo de radianes para el que quieres la cotangente hiperb√≥lica.</param>
        <summary>Devuelve la cotangente hiperb√≥lica de un n√∫mero.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos que pueden contener o hacer referencia a distintos tipos de datos, pero s√≥lo se cuentan los n√∫meros.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cuenta el n√∫mero de celdas que contienen n√∫meros y los n√∫meros incluidos en la lista de argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>Count</b> para obtener el n√∫mero de entradas en un campo de n√∫mero que se encuentra en un rango o matriz de n√∫meros. </para>
          <para>Se cuentan los argumentos que son n√∫meros, fechas o la representaci√≥n textual de n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Se omiten los argumentos que sean valores de error o texto que no se puedan traducir a n√∫meros.</para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Si desea contar valores l√≥gicos, texto o valores de error, use la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> funci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 30 argumentos que representan los valores que desea contar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cuenta el n√∫mero de celdas que no est√°n vac√≠as y los valores que hay en la lista de argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>CountA</b> para contar el n√∫mero de celdas que contienen datos en un rango o matriz.</para>
          <para>Un valor es cualquier tipo de informaci√≥n, incluidos valores de error y texto vac√≠o (""). Un valor no incluye las celdas vac√≠as.</para>
          <para>Si el argumento es una matriz o referencia, s√≥lo se utilizar√°n los valores de la matriz o de la referencia. Se pasar√°n por alto las celdas vac√≠as y los valores de texto de la matriz o de la referencia.</para>
          <para>Si no necesita contar valores l√≥gicos, texto o valores de error, use la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> funci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango cuyas celdas en blanco desea contar.</param>
        <summary>Cuenta el n√∫mero de celdas en blanco dentro de un rango.</summary>
        <returns>To be added.</returns>
        <remarks><para>Tambi√©n se cuentan las celdas que incluyen f√≥rmulas que devuelven "" (texto vac√≠o). Las celdas que contienen valores cero no se cuentan.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de celdas en el que desea contar las celdas.</param>
        <param name="Arg2">Criterios en forma de n√∫mero, expresi√≥n, referencia de celdas o texto que definen qu√© celdas se cuentan. Por ejemplo, los criterios pueden expresarse como 32, "32", " &gt; 32", "manzanas" o B4.</param>
        <summary>Cuenta las celdas contenidas en un rango que no est√°n en blanco y que cumplen los criterios especificados.</summary>
        <returns>Devuelve <see cref="T:System.Double" /> .</returns>
        <remarks><para>Para los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Uno o m√°s rangos en los que evaluar los criterios asociados.</param>
        <param name="Arg2">Uno o varios criterios en forma de n√∫mero, expresi√≥n, referencia de celdas o texto que define qu√© celdas se cuentan. Por ejemplo, los criterios pueden expresarse como 32, "32", " &gt; 32", "manzanas" o B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cuenta las celdas contenidas en un rango que no est√°n en blanco y que cumplen varios criterios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cada celda de un rango se cuenta s√≥lo si todos los criterios correspondientes especificados se cumplen para dicha celda.</para>
          <para>Si una celda de cualquier argumento es una celda vac√≠a, <b>CountIfs</b> la trata como un valor 0. </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as desde el principio del per√≠odo de un cup√≥n hasta la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>La tabla siguiente contiene la lista de valores de <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>CoupDayBs</b> genera un error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>CoupDayBs</b> genera un error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>CoupDayBs</b> genera un error. </para>
          <para>Si la ‚â• vencimiento, <b>CoupDayBs</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as del per√≠odo (entre dos cupones) donde se encuentra la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>La tabla siguiente contiene los valores usados en <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>CoupDays</b> genera un error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>CoupDays</b> genera un error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>CoupDays</b> genera un error. </para>
          <para>Si la ‚â• vencimiento, <b>CoupDays</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as desde la fecha de liquidaci√≥n hasta la fecha del pr√≥ximo cup√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>La tabla siguiente contiene los valores usados en <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>CoupDaysNc</b> genera un error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>CoupDaysNc</b> genera un error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>CoupDaysNc</b> genera un error. </para>
          <para>Si la ‚â• vencimiento, <b>CoupDaysNc</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve un n√∫mero que representa la fecha del pr√≥ximo cup√≥n desde la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>La tabla siguiente contiene los valores usados en <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o vencimiento no es una fecha v√°lida, <b>CoupNcd</b> genera un error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>CoupNcd</b> genera un error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>CoupNcd</b> genera un error. </para>
          <para>Si la ‚â• vencimiento, <b>CoupNcd</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve el n√∫mero de cupones pagaderos entre la fecha de liquidaci√≥n y la fecha de vencimiento, redondeado al siguiente cup√≥n entero.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>La tabla siguiente contiene los valores usados en <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>CoupNum</b> genera un error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>CoupNum</b> genera un error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>CoupNum</b> genera un error. </para>
          <para>Si la ‚â• vencimiento, <b>CoupNum</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">N√∫mero de pagos anuales por el cup√≥n. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg4">Tipo de base usado para contar los d√≠as.</param>
        <summary>Devuelve la fecha de cup√≥n anterior antes de la fecha de liquidaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>La tabla siguiente contiene los valores usados en <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>CoupPcd</b> genera un error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>CoupPcd</b> genera un error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>CoupPcd</b> genera un error. </para>
          <para>Si la ‚â• vencimiento, <b>CoupPcd</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primer rango de celdas de n√∫meros enteros.</param>
        <param name="Arg2">Segundo rango de celdas de n√∫meros enteros.</param>
        <summary>Devuelve la covarianza o promedio de los productos de las desviaciones para cada pareja de puntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> m√©todo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> and.</para>
          <para>La covarianza se utiliza para determinar las relaciones entre dos conjuntos de datos. Por ejemplo, puede investigar si unos ingresos m√°s elevados se corresponden con niveles de estudios m√°s altos.</para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si <paramref name="Arg1" /> y tiene diferentes n√∫meros de puntos de <paramref name="Arg2" /> datos, <b>Covar</b> genera un error. </para>
          <para>Si est√° <paramref name="Arg1" /> vac√≠o <paramref name="Arg2" /> o est√° vac√≠o, <b>Covar</b> genera un error. </para>
          <para>La covarianza es: </para>
          <para>Figura 1: Ecuaci√≥n para covarianza</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son el ejemplo significa AVERAGE(array1) y AVERAGE(array2), y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primer rango de celdas de n√∫meros enteros.</param>
        <param name="Arg2">Segundo rango de celdas de n√∫meros enteros.</param>
        <summary>Devuelve la covarianza de la poblaci√≥n o promedio de los productos de las desviaciones para cada pareja de puntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use <b>Covariance_P</b> para determinar la relaci√≥n entre dos conjuntos de datos. Por ejemplo, puede investigar si unos ingresos m√°s elevados se corresponden con niveles de estudios m√°s altos.</para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si y tiene diferentes n√∫meros de puntos de <paramref name="Arg1" /> <paramref name="Arg2" /> <b>datos, Covariance_P</b> genera un error. </para>
          <para>Si est√° <paramref name="Arg1" /> vac√≠o <paramref name="Arg2" /> o est√° <b>vac√≠o, Covariance_P</b> genera un error. </para>
          <para>La covarianza es: </para>
          <para>Figura 1: Ecuaci√≥n para covarianza</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son el ejemplo significa AVERAGE(array1) y AVERAGE(array2), y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1: el primer intervalo de celdas de enteros.</param>
        <param name="Arg2">Array2: el segundo intervalo de celdas de enteros.</param>
        <summary>Devuelve la covarianza de la muestra, o promedio de los productos de las desviaciones para cada pareja de puntos de datos en dos conjuntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contengan n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si matriz1 y matriz2 tienen diferentes n√∫meros de puntos de datos, <b>Covariance_S</b> devuelve el valor de error #N/A. </para>
          <para>Si array1 o array2 est√° vac√≠o o contiene solo 1 punto de datos cada <b>uno,</b> Covariance_S devuelve el #DIV/0. valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve un entero de 32 bits que indica la aplicaci√≥n con la que se cre√≥ el objeto. Integer de <b>solo</b> lectura (int en C#).</summary>
        <value>To be added.</value>
        <remarks><para>Si el objeto se cre√≥ en Microsoft Excel, la propiedad devuelve la cadena XCEL, que es el equivalente del n√∫mero hexadecimal 5843454C. La propiedad <b>Creator</b> est√° dise√±ada para su uso en Microsoft Excel para Macintosh, donde cada aplicaci√≥n tiene un c√≥digo de creador de cuatro caracteres. Por ejemplo, Microsoft Excel tiene el c√≥digo de creador XCEL.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de ensayos de Bernoulli.</param>
        <param name="Arg2">Probabilidad de √©xito en cada ensayo.</param>
        <param name="Arg3">Valor de criterio.</param>
        <summary>Devuelve el menor valor cuya distribuci√≥n binomial acumulada es menor o igual que un valor de criterio.</summary>
        <returns>To be added.</returns>
        <remarks><para>Esta funci√≥n se utiliza para aplicaciones de control de calidad. Por ejemplo, use <b>CritBinom</b> para determinar el mayor n√∫mero de partes defectuosas que pueden salir de una l√≠nea de ensamblado sin rechazar todo el lote.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>CritBinom</b> genera un error. </para>
          <para>Si el argumento de ensayos no es un entero, se trunca.</para>
          <para>Si se prueba &lt; 0, <b>CritBinom</b> genera un error. </para>
          <para>Si probability_s es &lt; 0 o probability_s &gt; 1, <b>CritBinom</b> genera un error. </para>
          <para>Si alfa &lt; 0 o alfa &gt; 1, <b>CritBinom</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo de radianes para el que desea el cosecant.</param>
        <summary>Devuelve el cosecant de un √°ngulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo en radianes para el que desea el cosecant hiperb√≥lico.</param>
        <summary>Devuelve el cosecant hiperb√≥lico de un √°ngulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa de inter√©s.</param>
        <param name="Arg2">N√∫mero total de per√≠odos de pago.</param>
        <param name="Arg3">Valor actual.</param>
        <param name="Arg4">Primer per√≠odo del c√°lculo. Los per√≠odos de pago se numeran comenzando por el n√∫mero 1.</param>
        <param name="Arg5">√öltimo per√≠odo del c√°lculo.</param>
        <param name="Arg6">Momento del pago.</param>
        <summary>Devuelve la cantidad de inter√©s pagado de un pr√©stamo entre los argumentos de inicio del per√≠odo y de final del per√≠odo.</summary>
        <returns>To be added.</returns>
        <remarks><para>En las tablas siguientes se enumeran los valores usados en <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (cero)</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al principio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales en un pr√©stamo de cuatro a√±os a una tasa de inter√©s anual del 12 por ciento, use 12%/12 para tasa y 4*12 para <paramref name="Arg2" /> . Si realiza pagos anuales en el mismo pr√©stamo, use el 12% para la tasa y 4 para <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> , y el tipo se <paramref name="Arg5" /> truncan en enteros. </para>
          <para>Si la ‚â§ 0, ‚â§ 0 o <paramref name="Arg2" /> ‚â§ <paramref name="Arg3" /> 0, <b>CumIPmt</b> genera un error. </para>
          <para>Si <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 o <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumIPmt</b> genera un error. </para>
          <para>Si <paramref name="Arg6" /> es un n√∫mero distinto de 0 o 1, <b>CumIPmt</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa de inter√©s.</param>
        <param name="Arg2">N√∫mero total de per√≠odos de pago.</param>
        <param name="Arg3">Valor actual.</param>
        <param name="Arg4">Primer per√≠odo del c√°lculo. Los per√≠odos de pago se numeran comenzando por el n√∫mero 1.</param>
        <param name="Arg5">√öltimo per√≠odo del c√°lculo.</param>
        <param name="Arg6">√öltimo per√≠odo del c√°lculo.</param>
        <summary>Devuelve la cantidad acumulada de capital pagado de un pr√©stamo entre el inicio y el final del per√≠odo.</summary>
        <returns>To be added.</returns>
        <remarks><para>En las tablas siguientes se enumeran los valores usados en <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (cero)</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al principio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales en un pr√©stamo de cuatro a√±os a una tasa de inter√©s anual del 12 por ciento, use 12%/12 para tasa y 4*12 para <paramref name="Arg2" /> . Si realiza pagos anuales en el mismo pr√©stamo, use el 12% para la tasa y 4 para <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> , y el tipo se <paramref name="Arg5" /> truncan en enteros. </para>
          <para>Si la ‚â§ 0, <paramref name="Arg2" /> ‚â§ 0 o <paramref name="Arg3" /> ‚â§ 0, <b>CumPrinc</b> genera un error. </para>
          <para>Si <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 o <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumPrinc</b> genera un error. </para>
          <para>Si <paramref name="Arg6" /> es un n√∫mero distinto de 0 o 1, <b>CumPrinc</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Devuelve el promedio de los valores de una columna de una lista o base de datos que cumplen las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde entry es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) y end_date (Arg1) son las dos fechas entre las que desea saber el n√∫mero de d√≠as.</param>
        <param name="Arg2">start_date(Arg2) y end_date (Arg1) son las dos fechas entre las que desea saber el n√∫mero de d√≠as.</param>
        <summary>Devuelve el n√∫mero de d√≠as entre las dos fechas.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Las dos fechas entre las que se desea calcular el n√∫mero de d√≠as. Si la fecha inicial (Arg1) es posterior a la fecha final (Arg2), Days360 devuelve un n√∫mero negativo. Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones.</param>
        <param name="Arg2">Las dos fechas entre las que se desea calcular el n√∫mero de d√≠as. Si la fecha inicial (Arg1) es posterior a la fecha final (Arg2), Days360 devuelve un n√∫mero negativo. Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones.</param>
        <param name="Arg3">Valor booleano que especifica si se va a usar el m√©todo estadounidense o europeo en el c√°lculo.</param>
        <summary>Calcula el n√∫mero de d√≠as entre dos fechas bas√°ndose en un a√±o de 360 d√≠as (doce meses de 30 d√≠as) que se utiliza en algunos c√°lculos contables.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use esta funci√≥n para ayudar a calcular pagos si el sistema de contabilidad se basa en doce meses de 30 d√≠as. Las tablas siguientes contienen los valores de <paramref name="Arg3" /> .</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> u omitido</term>
              <description>M√©todo US (NASD). Si la fecha inicial es el 31 del mes, se convierte en el 30 del mismo mes. Si la fecha final es el 31 del mes y la fecha inicial es anterior al 30, la fecha final se convierte en el 1 del mes siguiente; de lo contrario la fecha final se convierte en el 30 del mismo mes.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>M√©todo europeo. Las fechas iniciales o finales que corresponden al 31 del mes se convierten en el 30 del mismo mes.</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo).</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo: per√≠odo para el que se desea calcular la depreciaci√≥n. Debe usar las mismas unidades que el argumento de vida del activo.</param>
        <param name="Arg5">Meses: n√∫mero de meses del primer a√±o. Si se omite el argumento de meses, se presupone que es 12.</param>
        <summary>Devuelve la depreciaci√≥n de un activo durante un per√≠odo espec√≠fico usando el m√©todo de depreciaci√≥n de saldo fijo.</summary>
        <returns>To be added.</returns>
        <remarks><para>El m√©todo de depreciaci√≥n de saldo fijo calcula la depreciaci√≥n a tasa fija. DB usa las f√≥rmulas siguientes para calcular la depreciaci√≥n durante un per√≠odo:</para>
          <para>(costo: depreciaci√≥n total de per√≠odos anteriores) * tasa</para>
          <para>donde:</para>
          <para>rate = 1 - ((salvage / cost) ^ (1 /life)), redondeado a tres posiciones decimales</para>
          <para>La depreciaci√≥n del primer y √∫ltimo per√≠odos son casos especiales. Para el primer per√≠odo, DB usa esta f√≥rmula:</para>
          <para>costo * tasa * mes / 12</para>
          <para>Durante el √∫ltimo per√≠odo, DB usa esta f√≥rmula:</para>
          <para>((costo- depreciaci√≥n total de per√≠odos anteriores) * tasa * (12 - mes)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto o referencia a una celda que contiene el texto que desea cambiar.</param>
        <summary>Convierte las letras de un byte contenidas en una cadena de caracteres en caracteres de dos bytes. El nombre de la funci√≥n (y los caracteres que se convierten) depende de la configuraci√≥n de idioma.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Cuenta las celdas que contienen n√∫meros en una columna de una lista o base de datos y que cumplen las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Cuenta las celdas que no est√°n en blanco de una columna de una lista o base de datos y que cumplen las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo). Este valor puede ser 0.</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo: per√≠odo para el que se desea calcular la depreciaci√≥n. Debe usar las mismas unidades que el argumento de vida del activo.</param>
        <param name="Arg5">Factor: tasa a la que disminuye el saldo. Si el argumento de factor se omite, se calcular√° como 2 (el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo).</param>
        <summary>Devuelve la depreciaci√≥n de un activo en un per√≠odo espec√≠fico con el m√©todo de depreciaci√≥n por doble disminuci√≥n de saldo u otro m√©todo que se especifique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Los cinco argumentos deben ser n√∫meros positivos.</para>
          <para>El m√©todo de depreciaci√≥n por doble disminuci√≥n de balance calcula la depreciaci√≥n a un ritmo acelerado. La depreciaci√≥n es mayor en el primer per√≠odo y se reduce en per√≠odos sucesivos. <b>Ddb</b> usa la siguiente f√≥rmula para calcular la depreciaci√≥n durante un per√≠odo:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Si no desea usar el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo, cambie el argumento de factor.</para>
          <para>Use la funci√≥n si desea cambiar al m√©todo de depreciaci√≥n en l√≠nea recta cuando la depreciaci√≥n sea mayor que el c√°lculo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> de saldo en disminuci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero entero decimal que se desea convertir. Si n√∫mero es negativo, se omiten los valores de posici√≥n v√°lidos y <b>Dec2Bin</b> devuelve un n√∫mero binario de 10 caracteres (10 bits) en el que el bit m√°s significativo es el bit de signo. Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Dec2Bin</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero decimal en binario.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el &lt; n√∫mero -512 o si el &gt; n√∫mero 511, <b>Dec2Bin</b> devuelve el #NUM! valor de error. </para>
          <para>Si number no esnum√©rico, <b>Dec2Bin</b> devuelve el #VALUE! valor de error. </para>
          <para>Si <b>Dec2Bin requiere</b> m√°s de caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Dec2Bin</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es cero o negativo, <b>Dec2Bin</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero entero decimal que se desea convertir. Si n√∫mero es negativo, se omiten los lugares y <b>Dec2Hex</b> devuelve un n√∫mero hexadecimal de 10 caracteres (40 bits) en el que el bit m√°s significativo es el bit de signo. Los 39 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omite places, <b>Dec2Hex</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero decimal en hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el &lt; n√∫mero -549.755.813.888 o si el n√∫mero &gt; 549.755.813.887, <b>Dec2Hex</b> devuelve el #NUM! valor de error. </para>
          <para>Si number no esnum√©rico, <b>Dec2Hex</b> devuelve el #VALUE! valor de error. </para>
          <para>Si <b>Dec2Hex requiere</b> m√°s de caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Dec2Hex</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es negativo, <b>Dec2Hex</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero entero decimal que se desea convertir. Si n√∫mero es negativo, se omiten los lugares y <b>Dec2Oct</b> devuelve un n√∫mero octal de 10 caracteres (30 bits) en el que el bit m√°s significativo es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Dec2Oct</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero decimal en octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el &lt; n√∫mero -536.870.912 o si el n√∫mero &gt; 536.870.911, <b>Dec2Oct</b> devuelve la #NUM! valor de error. </para>
          <para>Si el n√∫mero no esnum√©rico, <b>Dec2Oct</b> devuelve el #VALUE! valor de error. </para>
          <para>Si <b>Dec2Oct requiere</b> m√°s de caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Dec2Oct</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es negativo, <b>Dec2Oct</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que desea convertir.</param>
        <param name="Arg2">Radix base del n√∫mero que est√° convirtiendo.</param>
        <summary>Convierte una representaci√≥n de texto de un n√∫mero de una base determinada en un n√∫mero decimal.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo: √°ngulo en radianes que se desea convertir.</param>
        <summary>Convierte radianes en grados.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, el primer n√∫mero.</param>
        <param name="Arg2">N√∫mero2, el segundo n√∫mero. Si se omite, el valor predeterminado del argumento n√∫mero2 es 0.</param>
        <summary>Comprueba si dos valores son iguales. Devuelve 1 si n√∫mero1 es igual a n√∫mero2; de lo contrario devuelve 0.</summary>
        <returns>To be added.</returns>
        <remarks><para>Use esta funci√≥n para filtrar un conjunto de valores. Por ejemplo, al sumar varias funciones <b>Delta,</b> se calcula el recuento de pares iguales. Esta funci√≥n tambi√©n se conoce como la funci√≥n Kronecker Delta.</para>
          <para>Si number1 no esnum√©rico, <b>Delta</b> devuelve el #VALUE! valor de error. </para>
          <para>Si number2 no esnum√©rico, <b>Delta</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, n√∫mero2... son de 1 a 30 argumentos cuya suma de las desviaciones cuadradas se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la suma de los cuadrados de las desviaciones de los puntos de datos a partir de la media de la muestra.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros. </para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos. </para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. </para>
          <para>La ecuaci√≥n para la suma de las desviaciones cuadradas es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la suma de desviaciones al cuadrado</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Extrae un √∫nico valor de una columna de una lista o una base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Precio: precio del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg4">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la tasa de descuento de un valor burs√°til.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto. </para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es un n√∫mero de fecha de serie v√°lido, <b>Disc</b> devuelve el #VALUE! valor de error. </para>
          <para>Si pr ‚â§ 0 o si el ‚â§ 0, <b>Disc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>Disc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, <b>Disc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>El</b> disco se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para calcular el m√©todo Disc</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en un a√±o, seg√∫n el a√±o.</para>
          <para>DSM = n√∫mero de d√≠as entre la liquidaci√≥n y el vencimiento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Devuelve el valor m√°ximo de una columna de una lista o una base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Devuelve el valor m√≠nimo de una columna de una lista o una base de datos que coincida con las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: un n√∫mero, una referencia a una celda que contiene un n√∫mero o una f√≥rmula que se eval√∫a en un n√∫mero.</param>
        <param name="Arg2">Decimales es el n√∫mero de d√≠gitos a la derecha del separador decimal. Si decimales es negativo, el argumento n√∫mero se redondea hacia la izquierda del separador decimal. Si omite el argumento de decimales, se calcular√° como 2.</param>
        <summary>La funci√≥n descrita en este tema de Ayuda convierte un n√∫mero en formato de texto y le aplica un s√≠mbolo de moneda. El nombre de la funci√≥n (y el s√≠mbolo que aplica) depende de la configuraci√≥n de idioma.</summary>
        <returns>To be added.</returns>
        <remarks><para>La principal diferencia entre dar formato a una celda que contiene un n√∫mero con el comando Celdas (men√∫ Formato) y dar formato a un n√∫mero directamente con la funci√≥n <b>Dollar</b> es que <b>Dollar</b> convierte su resultado en texto. Un n√∫mero al que se le da formato con el comando Celdas sigue siendo un n√∫mero. Puede seguir usando n√∫meros con <b></b> formato Dollar en f√≥rmulas, ya que Microsoft Excel convierte los n√∫meros escritos como valores de texto en n√∫meros cuando calcula.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Moneda fraccionaria: n√∫mero expresado como fracci√≥n.</param>
        <param name="Arg2">Fracci√≥n: n√∫mero entero que se utiliza como denominador de la fracci√≥n.</param>
        <summary>Convierte una cotizaci√≥n de un valor burs√°til, expresada en forma fraccionaria, en decimal. Use DollarDe para convertir n√∫meros fraccionarios de moneda, como precios de valores burs√°tiles, a n√∫meros decimales.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el argumento de fracci√≥n no es un entero, se trunca.</para>
          <para>Si la fracci√≥n es menor que 0, <b>DollarDe</b> devuelve la #NUM! valor de error. </para>
          <para>Si la fracci√≥n es 0, <b>DollarDe</b> devuelve el #DIV/0. valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Moneda decimal: un n√∫mero decimal.</param>
        <param name="Arg2">Fracci√≥n: n√∫mero entero que se utiliza como denominador de la fracci√≥n.</param>
        <summary>Convierte una cotizaci√≥n de un valor burs√°til, expresada en forma decimal, en fraccionaria. Use DollarFR para convertir n√∫meros decimales de moneda en n√∫meros expresados como fracci√≥n, como precios de valores burs√°tiles.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el argumento de fracci√≥n no es un entero, se trunca.</para>
          <para>Si la fracci√≥n es menor que 0, <b>DollarFr</b> devuelve el #NUM! valor de error. </para>
          <para>Si la fracci√≥n es 0, <b>DollarFr</b> devuelve el #DIV/0. valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El argumento de base de datos es el rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">El argumento de nombre de campo indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">El argumento de criterios es el rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Multiplica los valores de una columna de una lista o base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de una poblaci√≥n bas√°ndose en una muestra y utilizando los n√∫meros de una columna de una lista o base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de una poblaci√≥n bas√°ndose en toda la poblaci√≥n y utilizando los n√∫meros de una columna de una lista o una base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Suma los n√∫meros de una columna de una lista o base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Reservado para uso interno. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Cup√≥n: tasa de inter√©s nominal anual (inter√©s en los cupones) de un valor burs√°til.</param>
        <param name="Arg4">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg5">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la duraci√≥n de Macauley de un valor de valor nominal supuesto de 100 $. La duraci√≥n se define como el promedio ponderado del valor actual de los recursos generados y se usa como una medida de la respuesta del precio de un bono a los cambios en el rendimiento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, frecuencia y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>Duration</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el &lt; cup√≥n 0 o si yld &lt; 0, <b>Duration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>Duration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>Duration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la liquidaci√≥n ‚â• vencimiento, <b>Duration</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la varianza de una poblaci√≥n bas√°ndose en una muestra y utilizando los n√∫meros de una columna de una lista o base de datos que cumpla las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de datos: rango de celdas que compone la lista o base de datos. Una base de datos es una lista de datos relacionados en la que las filas de informaci√≥n son registros y las columnas de datos, campos. La primera fila de la lista contiene los r√≥tulos de cada columna.</param>
        <param name="Arg2">Campo: indica qu√© columna se utiliza en la funci√≥n. Escriba el r√≥tulo de la columna entre comillas, como por ejemplo "Edad" o "Rendimiento", o un n√∫mero (sin las comillas) que represente la posici√≥n de la columna en la lista: 1 para la primera columna, 2 para la segunda y as√≠ sucesivamente.</param>
        <param name="Arg3">Criterios: rango de celdas que contiene las condiciones especificadas. Puede utilizar cualquier rango en el argumento de criterios mientras √©ste incluya por lo menos un r√≥tulo de columna y al menos una celda debajo del r√≥tulo de columna en la que se pueda especificar una condici√≥n de columna.</param>
        <summary>Calcula la varianza de una poblaci√≥n bas√°ndose en toda la poblaci√≥n y utilizando los n√∫meros de una columna de una lista o una base de datos que cumplan las condiciones especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dado que el signo igual se utiliza para indicar una f√≥rmula cuando se escribe texto o un valor en una celda, Microsoft Excel eval√∫a lo escrito; no obstante, esto puede provocar resultados de filtro inesperados. Para indicar un operador de comparaci√≥n de igualdad para texto o un valor, escriba los criterios como una expresi√≥n de cadena en la celda adecuada en el intervalo de criterios: </para>
          <para>=''=entry''</para>
          <para>Donde la entrada es el texto o el valor que desea buscar. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Al filtrar datos de texto, Excel distingue entre caracteres en may√∫sculas y min√∫sculas. Sin embargo, puede utilizar una f√≥rmula que haga una b√∫squeda que distinga entre may√∫sculas y min√∫sculas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Meses: n√∫mero de meses anteriores o posteriores al argumento de fecha inicial. Cuando el argumento de meses tiene un valor positivo el resultado es una fecha futura; cuando es un valor negativo, el resultado es una fecha pasada.</param>
        <summary>Devuelve el n√∫mero de serie que representa la fecha que indica el n√∫mero de meses anteriores o posteriores a la fecha especificada (argumento de fecha inicial). Use EDate para calcular las fechas de vencimiento que caen en el mismo d√≠a del mes que el d√≠a de emisi√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si start_date no es una fecha v√°lida, <b>EDate</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el argumento de meses no es un n√∫mero entero, se trunca.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inter√©s nominal: tasa de inter√©s nominal.</param>
        <param name="Arg2">N√∫m_per_a√±o: n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</param>
        <summary>Devuelve la tasa efectiva del inter√©s anual, si se conocen la tasa de inter√©s anual nominal y el n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</summary>
        <returns>To be added.</returns>
        <remarks><para>El argumento de n√∫m_per_a√±o se trunca a un valor entero.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>Effect</b> devuelve el #VALUE! valor de error. </para>
          <para>Si nominal_rate ‚â§ 0 o si npery &lt; 1, <b>Effect</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>El</b> efecto se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para calcular el m√©todo Effect</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto que se codificar√°.</param>
        <summary>La direcci√≥n URL codifica el argumento.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Meses: n√∫mero de meses anteriores o posteriores al argumento de fecha inicial. Cuando el argumento de meses tiene un valor positivo el resultado es una fecha futura; cuando es un valor negativo, el resultado es una fecha pasada.</param>
        <summary>Devuelve el n√∫mero de serie del √∫ltimo d√≠a del mes, anterior o posterior a la fecha inicial del n√∫mero de mes indicado. Use el EOMONTH para calcular las fechas de vencimiento que caen en el √∫ltimo d√≠a del mes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si start_date no es una fecha v√°lida, <b>EoMonth</b> devuelve el #NUM! valor de error. </para>
          <para>Si start_date m√°s meses produce una fecha no v√°lida, <b>EoMonth</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit: el l√≠mite inferior para integrar <b>Erf</b>.</param>
        <param name="Arg2">Upper_limit: el l√≠mite superior para integrar <b>Erf</b>. Si se omite, Erf se integra entre cero y lower_limit.</param>
        <summary>Devuelve el resultado de la funci√≥n de error entre el argumento de l√≠mite inferior y el argumento de l√≠mite superior.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> m√©todo.</para>
          <para>Si lower_limit no esnum√©rico, <b>Erf</b> devuelve el #VALUE! valor de error. </para>
          <para>Si lower_limit negativo, <b>Erf</b> devuelve el #NUM! valor de error. </para>
          <para>Si upper_limit no esnum√©rico, <b>Erf</b> devuelve el #VALUE! valor de error. </para>
          <para>Si upper_limit negativo, <b>Erf</b> devuelve el #NUM! valor de error. </para>
          <para>Figura 1: Ecuaci√≥n para calcular el m√©todo Erf</para>
          <para> </para>
          <para> </para>
          <para>Figura 2: Ecuaci√≥n para calcular el m√©todo Erf</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">L√≠mite inferior: l√≠mite inferior para la integraci√≥n de ERF.</param>
        <summary>Devuelve la funci√≥n de error integrada entre cero y l√≠mite_inf.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el argumento de l√≠mite inferior no es num√©rico, <b>Erf_Precise</b> genera un error. Si el argumento de l√≠mite inferior es negativo, <b>Erf_Precise</b> genera un error.</para>
          <para>Figura 1: Ecuaci√≥n para calcular Erf_Precise m√©todo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Primer argumento.</param>
        <summary>Devuelve la funci√≥n ERF complementaria integrada entre el par√°metro especificado y el infinito.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> m√©todo.</para>
          <para>Si esta funci√≥n no est√° disponible y devuelve el error #¬øNOMBRE?, es necesario instalar y cargar el complemento Herramientas para an√°lisis.</para>
          <para>Si el par√°metro no esnum√©rico, <b>ErfC</b> devuelve el #VALUE! valor de error.</para>
          <para>Si el par√°metro es negativo, <b>ErfC</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor con el que se va a realizar el c√°lculo.</param>
        <summary>Devuelve la funci√≥n de error complementaria integrada entre el valor especificado y el infinito.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el valor especificado no es num√©rico, <b>ErfC_Precise</b> genera un error.</para>
          <para>Si el valor especificado es negativo, <b>ErfC_Precise</b> genera un error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <summary>Devuelve un n√∫mero redondeado hasta el n√∫mero entero par m√°s pr√≥ximo. Esta funci√≥n puede usarse para procesar art√≠culos que vienen en pares. Por ejemplo, un caj√≥n de embalaje que contiene filas de uno o dos art√≠culos est√° lleno cuando el n√∫mero de art√≠culos, redondeado hasta el par m√°s pr√≥ximo, coincide con la capacidad del caj√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number no esnum√©rico, <b>Even</b> devuelve el #VALUE! valor de error. </para>
          <para>Independientemente del signo del n√∫mero, los valores se redondean hacia arriba. Si el argumento de n√∫mero es un entero par, no se redondea.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor de la funci√≥n.</param>
        <param name="Arg2">Lambda: valor del par√°metro.</param>
        <param name="Arg3">Acumulada: valor l√≥gico que indica qu√© forma de la funci√≥n exponencial debe proporcionarse. Si el valor <b>acumulado es true,</b> <b>Expon_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n exponencial. Use EXPON_DIST para establecer el tiempo entre dos eventos, tal como el tiempo que tarda un cajero autom√°tico en entregar efectivo. Por ejemplo, la funci√≥n EXPON_DIST puede usarse para determinar la probabilidad de que el proceso tarde un minuto como m√°ximo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x o lambda no sonnum√©ricos, <b>Expon_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Expon_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si lambda ‚â§ 0, <b>Expon_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de la probabilidad es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la funci√≥n de densidad de probabilidad</para>
          <para> </para>
          <para> </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa es: 

</para>
          <para>Figura 2: Ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor de la funci√≥n.</param>
        <param name="Arg2">Lambda: valor del par√°metro.</param>
        <param name="Arg3">Acumulada: valor l√≥gico que indica qu√© forma de la funci√≥n exponencial debe proporcionarse. Si el valor <b>acumulado es true,</b> <b>ExponDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n exponencial. Use <b>ExponDist para</b> modelar el tiempo entre eventos, como el tiempo que tarda un cajero autom√°tico en entregar efectivo. Por ejemplo, puede usar <b>ExponDist</b> para determinar la probabilidad de que el proceso tarda como m√°ximo 1 minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si x o lambda no sonnum√©ricos, <b>ExponDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>ExponDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si lambda ‚â§ 0, <b>ExponDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de la probabilidad es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la funci√≥n de densidad de probabilidad</para>
          <para> </para>
          <para> </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa es: 

</para>
          <para>Figura 2: Ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Deg_freedom1: los grados de libertad del numerador.</param>
        <param name="Arg3">Deg_freedom2: los grados denominadores de libertad.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>F_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n de probabilidad F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>F_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x es negativo, <b>F_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad1 o grados_de_libertad2 no son n√∫meros enteros, se truncan.</para>
          <para>Si deg_freedom1 &lt; 1, <b>F_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si deg_freedom &lt; 1, <b>F_Dist</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve la distribuci√≥n de probabilidad F de cola derecha. Esta funci√≥n puede usarse para determinar si dos conjuntos de datos tienen diferentes grados de diversidad. Por ejemplo, podr√≠a examinar los resultados de los ex√°menes presentados por hombres y mujeres para entrar a la escuela secundaria, y determinar si la variabilidad entre las mujeres es diferente de la variabilidad entre los hombres.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>F_Dist_RT</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x es negativo, <b>F_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si degrees_freedom1 &lt; 1 o degrees_freedom1 ‚â• 10^10, <b>F_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si degrees_freedom2 &lt; 1 o degrees_freedom2 ‚â• 10^10, <b>F_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>F_Dist_RT</b> se calcula como F_DIST_RT=P( F x ), donde F es una variable aleatoria que tiene una distribuci√≥n F con degrees_freedom1 y degrees_freedom2 grados &gt; de libertad.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada a la distribuci√≥n acumulativa F.</param>
        <param name="Arg2">Deg_freedom1: los grados de libertad del numerador.</param>
        <param name="Arg3">Deg_freedom2: los grados denominadores de libertad.</param>
        <summary>Devuelve el inverso de la distribuci√≥n de probabilidad F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>F_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>F_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si grados_de_libertad1 o grados_de_libertad2 no son n√∫meros enteros, se truncan.</para>
          <para>Si deg_freedom1 &lt; 1 o deg_freedom2 &lt; 1, <b>F_Inv</b> devuelve el #NUM! valor de error. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: una probabilidad asociada con la distribuci√≥n acumulativa F.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve el inverso de la distribuci√≥n de probabilidad F de cola derecha. Si p = F_DIST_RT(x,...), entonces F_INV_RT(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>La distribuci√≥n F puede usarse en una prueba F que compare el grado de variabilidad en dos conjuntos de datos. Por ejemplo, podr√≠a analizar las distribuciones de ingresos en Venezuela y Colombia para determinar si ambos pa√≠ses tienen un grado de diversidad similar.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>F_Inv_RT</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>F_Inv_RT</b> devuelve la #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si degrees_freedom1 &lt; 1 o degrees_freedom1 ‚â• 10^10, <b>F_Inv_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si degrees_freedom2 &lt; 1 o degrees_freedom2 ‚â• 10^10, <b>F_Inv_RT</b> devuelve el #NUM! valor de error.</para>
          <para>
            <b>F_Inv_RT</b> puede usarse para devolver valores cr√≠ticos de la distribuci√≥n F. Por ejemplo, el resultado de un c√°lculo de ANOVA a menudo incluye datos para la estad√≠stica F, la probabilidad F y el valor cr√≠tico F en el nivel de significaci√≥n 0,05. Para devolver el valor cr√≠tico de F, use el nivel de significaci√≥n como argumento de probabilidad para <b>F_Inv_RT</b>.</para>
          <para>Dado un valor de probabilidad, <b>F_Inv_RT</b> busca ese valor x de forma que F_DIST_RT(x, degrees_freedom1, degrees_freedom2) = probabilidad. Por lo tanto, la <b>precisi√≥n F_Inv_RT</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> . <b>F_Inv_RT</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 64 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primera matriz o rango de datos.</param>
        <param name="Arg2">Matriz 2: segunda matriz o rango de datos.</param>
        <summary>Devuelve el resultado de una prueba F. Una prueba F devuelve la probabilidad de dos colas de que las varianzas de los argumentos de matriz 1 y matriz 2 no presenten diferencias significativas. Utilice esta funci√≥n para determinar si las varianzas de dos muestras son diferentes. Por ejemplo, dados los resultados de los ex√°menes de escuelas p√∫blicas y privadas, puede comprobar si estas escuelas tienen m√°rgenes de resultados diferentes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si el n√∫mero de puntos de datos en matriz1 o matriz2 es menor que 2, o si la varianza de matriz1 o matriz2 es cero, <b>F_Test</b> devuelve el #DIV/0. valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero no negativo cuyo factorial se desea obtener. Si el argumento de n√∫mero no es un entero, se trunca.</param>
        <summary>Devuelve el factorial de un n√∫mero. El factorial de un n√∫mero es igual a 1 *2* 3 *...* n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor del que se devuelve el factorial doble. Si el argumento de n√∫mero no es un entero, se trunca.</param>
        <summary>Devuelve el factorial doble de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number no esnum√©rico, <b>FactDouble</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el n√∫mero es negativo, <b>FactDouble</b> devuelve el #NUM! valor de error. </para>
          <para>Si el n√∫mero es par: 

 </para>
          <para>Figura 1: Ecuaci√≥n para even</para>
          <para> </para>
          <para> </para>
          <para>Si el n√∫mero es impar: 

</para>
          <para>Figura 2: Ecuaci√≥n para impar</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve la distribuci√≥n de probabilidad F. Esta funci√≥n puede usarse para determinar si dos conjuntos de datos tienen diferentes grados de diversidad. Por ejemplo, podr√≠a examinar los resultados que obtienen las mujeres y los varones en los ex√°menes de acceso a la educaci√≥n secundaria, y determinar si la variabilidad entre las mujeres es diferente de la variabilidad entre los varones.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todos y.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>FDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x es negativo, <b>FDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si degrees_freedom1 &lt; 1 o degrees_freedom1 ‚â• 10^10, <b>FDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si degrees_freedom2 &lt; 1 o degrees_freedom2 ‚â• 10^10, <b>FDist</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>FDist</b> se calcula como FDIST=P( F x ), donde F es una variable aleatoria que tiene una distribuci√≥n F con degrees_freedom1 y degrees_freedom2 grados &gt; de libertad.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cadena xml v√°lida.</param>
        <param name="Arg2">Cadena de consulta XPath.</param>
        <summary>Obtenga datos espec√≠ficos del XML devuelto, normalmente desde una llamada a <b>la funci√≥n WebService.</b></summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>El par√°metro XPath est√° limitado a 1024 caracteres.</para>
          <para>La <b>funci√≥n FILTERXML</b> devuelve resultados que se analizan a trav√©s de la configuraci√≥n regional de datos especificada por el usuario.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">El nombre de la hoja de c√°lculo.</param>
        <param name="Arg2">El nombre del intervalo.</param>
        <param name="Arg3">El nombre de un argumento para refinar la b√∫squeda.</param>
        <summary>Busca informaci√≥n espec√≠fica en una hoja de c√°lculo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto buscado: texto que se desea encontrar.</param>
        <param name="Arg2">Dentro del texto: texto que contiene el texto que se desea encontrar.</param>
        <param name="Arg3">N√∫mero inicial: especifica el car√°cter a partir del cual comenzar√° la b√∫squeda. El primer car√°cter de dentro del texto es el car√°cter n√∫mero 1. Si se omite el argumento de n√∫mero inicial, se supone que es 1.</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <b>FindB busque</b> una cadena de texto dentro de una segunda cadena de texto y devuelva el n√∫mero de la posici√≥n inicial de la primera cadena de texto desde el primer car√°cter de la segunda cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>est√° pensado para su uso con idiomas que usan el juego de caracteres de un solo byte (SBCS), mientras que FindB est√° pensado para su uso con idiomas que usan el juego de caracteres de doble <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> byte <b></b> (DBCS). La configuraci√≥n predeterminada de idioma del equipo influye en el valor devuelto de la siguiente manera:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> siempre cuenta cada car√°cter, ya sea de un byte o de doble byte, como 1, independientemente de cu√°l sea la configuraci√≥n de idioma predeterminada.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> cuenta cada car√°cter de doble byte como 2 cuando se ha habilitado la edici√≥n de un idioma compatible con DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo contrario, <b>FindB</b> cuenta cada car√°cter como 1.</description>
            </item>
          </list>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <b>FindB distinguen</b> may√∫sculas de min√∫sculas y no permiten caracteres comod√≠n. Si no desea realizar una b√∫squeda entre may√∫sculas y min√∫sculas o usar caracteres comod√≠n, puede usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> . </para>
          <para>Si find_text es "" (texto vac√≠o), coincide con el primer car√°cter de la cadena de b√∫squeda (es decir, el car√°cter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> numerado start_num o 1). </para>
          <para>El argumento de texto buscado no puede contener ning√∫n car√°cter comod√≠n.</para>
          <para>Si find_text aparece en el within_text y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> devuelve el #VALUE! valor de error. </para>
          <para>Si start_num no es mayor que cero, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>y FindB</b> devuelve el #VALUE! valor de error. </para>
          <para>Si start_num es mayor que la longitud de within_text y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> devuelve el #VALUE! valor de error. </para>
          <para>Utilice el argumento de n√∫mero inicial para omitir un n√∫mero espec√≠fico de caracteres. Use <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> como ejemplo, supongamos que est√° trabajando con la cadena de texto "AYF0093. YoungMensApparel". Para encontrar el n√∫mero de la primera "A" en la parte descriptiva de la cadena de texto, establezca el argumento de n√∫mero inicial en 8, de manera que la funci√≥n no busque en la parte correspondiente al n√∫mero de serie. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> comienza con el car√°cter 8, busca find_text en el siguiente car√°cter y devuelve el n√∫mero 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> siempre devuelve el n√∫mero de caracteres desde el inicio de within_text, contando los caracteres que omite si start_num es mayor que 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: una probabilidad asociada con la distribuci√≥n acumulativa F.</param>
        <param name="Arg2">Grados de libertad 1: n√∫mero de grados de libertad del numerador.</param>
        <param name="Arg3">Grados de libertad 2: n√∫mero de grados de libertad del denominador.</param>
        <summary>Devuelve el inverso de la distribuci√≥n de probabilidad F. Si el argumento p = FDist(x,...), entonces FInv(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> m√©todos y.</para>
          <para>La distribuci√≥n F puede usarse en una prueba F que compare el grado de variabilidad en dos conjuntos de datos. Por ejemplo, podr√≠a analizar las distribuciones de ingresos en Venezuela y Colombia para determinar si ambos pa√≠ses tienen un grado de diversidad similar.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>FInv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>FInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de grados de libertad 1 o de grados de libertad 2 no es un entero, se trunca.</para>
          <para>Si degrees_freedom1 &lt; 1 o degrees_freedom1 ‚â• 10^10, <b>FInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si degrees_freedom2 &lt; 1 o degrees_freedom2 ‚â• 10^10, <b>FInv</b> devuelve el #NUM! valor de error.</para>
          <para>
            <b>FInv</b> se puede usar para devolver valores cr√≠ticos de la distribuci√≥n F. Por ejemplo, el resultado de un c√°lculo de ANOVA a menudo incluye datos para la estad√≠stica F, la probabilidad F y el valor cr√≠tico F en el nivel de significaci√≥n 0,05. Para devolver el valor cr√≠tico de F, use el nivel de significaci√≥n como argumento de probabilidad en <b>FInv</b>.</para>
          <para>Dado un valor de probabilidad, <b>FInv</b> busca ese valor x de modo que FDIST(x, degrees_freedom1, degrees_freedom2) = probabilidad. Por lo tanto, la precisi√≥n <b>de FInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> . <b>FInv usa</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 64 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x: un valor num√©rico para el cual se desea calcular la transformaci√≥n.</param>
        <summary>Devuelve la transformaci√≥n Fisher en x. Esta transformaci√≥n produce una funci√≥n que se distribuye normalmente en lugar de ser asim√©trica. Use esta funci√≥n para realizar pruebas hipot√©ticas sobre el coeficiente de correlaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x no esnum√©rico, <b>Fisher</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x ‚â§ -1 o si x ‚â• 1, <b>Fisher</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la transformaci√≥n FISHER es:</para>
          <para>Figura 1: Ecuaci√≥n para la transformaci√≥n de Fisher</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y: valor para el que se realizar√° la inversa de la transformaci√≥n.</param>
        <summary>Devuelve la inversa de la transformaci√≥n Fisher. Use esta transformaci√≥n para analizar correlaciones entre rangos de matrices de datos. Si el argumento y = FISHER(x), entonces FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si y no esnum√©rico, <b>FisherInv</b> devuelve el #VALUE! valor de error. </para>
          <para>La ecuaci√≥n para la inversa de la transformaci√≥n Fisher es:</para>
          <para>Figura 1: Ecuaci√≥n para la transformaci√≥n inversa de Fisher</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero que se desea redondear y convertir en texto.</param>
        <param name="Arg2">Decimales es el n√∫mero de d√≠gitos a la derecha del separador decimal.</param>
        <param name="Arg3">No_commas: un valor l√≥gico que, si es <b>true,</b>impide <b>que Fixed</b> incluya comas en el texto devuelto.</param>
        <summary>Redondea un n√∫mero con el n√∫mero de decimales especificado, le aplica formato decimal usando comas y puntos, y devuelve el resultado como texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>En Microsoft Excel, los n√∫meros nunca pueden tener m√°s de 15 d√≠gitos significativos, pero el argumento decimales puede tener hasta 127 d√≠gitos.</para>
          <para>Si el argumento de decimales es negativo, el n√∫mero se redondea hacia la izquierda del separador decimal.</para>
          <para>Si omite el argumento de decimales, se calcular√° como 2.</para>
          <para>Si no_commas es <b>false</b> u omitido, el texto devuelto incluye comas como de costumbre. </para>
          <para>La principal diferencia entre dar formato a una celda que contiene un n√∫mero con el comando Celdas (men√∫ Formato) y dar formato a un n√∫mero directamente con la funci√≥n FIXED es que <b>Fixed</b> convierte su resultado en texto. Un n√∫mero al que se le da formato con el comando Celdas sigue siendo un n√∫mero.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor num√©rico que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Redondea un n√∫mero al pr√≥ximo m√∫ltiplo del argumento de cifra significativa, hacia abajo (hacia el cero).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> m√©todo.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>Floor</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el n√∫mero y la significaci√≥n tienen signos diferentes, <b>Floor</b> devuelve el #NUM! valor de error. </para>
          <para>Independientemente del signo del argumento de n√∫mero, un valor siempre se redondea hacia abajo, alej√°ndolo de cero. Si el argumento n√∫mero es un m√∫ltiplo exacto del argumento de cifra significativa, no se redondea.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor que desea redondear.</param>
        <param name="Arg2">El m√∫ltiplo al que desea redondear.</param>
        <param name="Arg3">Cuando se le da un n√∫mero distinto de cero, esta funci√≥n se redondea hacia cero.</param>
        <summary>Redondear un n√∫mero hacia abajo, al entero m√°s cercano o al m√∫ltiplo m√°s cercano de importancia.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor num√©rico que se desea redondear.</param>
        <param name="Arg2">Cifra significativa: m√∫ltiplo al que se desea redondear.</param>
        <summary>Redondea el n√∫mero especificado al m√∫ltiplo significativo m√°s pr√≥ximo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Seg√∫n el signo del n√∫mero y los argumentos de cifra significativa, el m√©todo <b>Floor_Precise</b> redondea acerc√°ndose al cero o alej√°ndose de √©ste.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Redondea alej√°ndose del cero.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Redondea acerc√°ndose al cero.</description>
            </item>
          </list>
          <para>Si cualquiera de los argumentos no <b>esnum√©rico, Floor_Precise</b> m√©todo genera un error. </para>
          <para>Si el n√∫mero es un m√∫ltiplo significativo exacto, no se realiza ning√∫n redondeo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: punto de datos para el que se desea predecir un valor.</param>
        <param name="Arg2">Valores conocidos de y: matriz o rango de datos dependientes.</param>
        <param name="Arg3">Valores conocidos de x: matriz o rango de datos independientes.</param>
        <summary>Calcula o pronostica un valor futuro a partir de los valores existentes. La predicci√≥n del valor es un valor de y obtenido a partir de un valor de x. Los valores conocidos son valores de x y valores de y existentes, y el nuevo valor se pronostica utilizando regresi√≥n lineal. Esta funci√≥n se puede utilizar para realizar previsiones de ventas, establecer requisitos de inventario o tendencias de los consumidores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x no esnum√©rico, <b>Forecast</b> devuelve el #VALUE! valor de error. </para>
          <para>Si known_y y known_x est√°n vac√≠os o contienen un n√∫mero diferente de puntos de datos, <b>Forecast</b> devuelve el valor de error #N/A. </para>
          <para>Si la variaci√≥n de known_x es igual a cero, <b>Forecast</b> devuelve el #DIV/0. valor de error. </para>
          <para>La ecuaci√≥n <b>de Forecast</b> es a+bx, donde: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo Forecast</para>
          <para> </para>
          <para> </para>
          <para>Y:</para>
          <para>Figura 2: Ecuaci√≥n para el m√©todo Forecast</para>
          <para> </para>
          <para> </para>
          <para>y donde x e y son el ejemplo significa AVERAGE(known_x's) y AVERAGE(known y's).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de datos: referencia a un conjunto o matriz de valores cuyas frecuencias se desea contar. Si data_array no contiene valores, <b>Frequency</b> devuelve una matriz de ceros.</param>
        <param name="Arg2">Matriz de grupos: matriz de intervalos o referencia a ellos en la que se desea agrupar los valores contenidos en la matriz de datos. Si bins_array no contiene valores, <b>Frequency</b> devuelve el n√∫mero de elementos de data_array.</param>
        <summary>Calcula la frecuencia con que se repiten los valores en un rango y devuelve un matriz vertical de n√∫meros. Por ejemplo, use <b>Frecuencia</b> para contar el n√∫mero de puntuaciones de prueba que se encuentran dentro de los intervalos de puntuaciones. Dado <b>que Frequency</b> devuelve una matriz, debe especificarse como una f√≥rmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>La</b> frecuencia se introduce como f√≥rmula de matriz despu√©s de seleccionar un rango de celdas adyacentes en el que desea que aparezca la distribuci√≥n devuelta. </para>
          <para>El n√∫mero de elementos de la matriz devuelta supera en una unidad el n√∫mero de elementos contenidos en la matriz de grupos. El elemento adicional de la matriz devuelta devuelve el n√∫mero de todos los valores superiores al intervalo mayor. Por ejemplo, al contar tres intervalos de valores (intervalos) que se escriben en tres celdas, aseg√∫rese de escribir <b>Frecuencia</b> en cuatro celdas para los resultados. La celda adicional devuelve el n√∫mero de valores existentes en la matriz de grupos que sean superiores al valor del tercer intervalo. </para>
          <para>
            <b>La</b> frecuencia omite las celdas en blanco y el texto. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primera matriz o rango de datos.</param>
        <param name="Arg2">Matriz 2: segunda matriz o rango de datos.</param>
        <summary>Devuelve el resultado de una prueba F. Una prueba F devuelve la probabilidad de dos colas de que las varianzas de los argumentos de matriz 1 y matriz 2 no presenten diferencias significativas. Utilice esta funci√≥n para determinar si las varianzas de dos muestras son diferentes. Por ejemplo, dados los resultados de los ex√°menes de escuelas p√∫blicas y privadas, puede comprobar si estas escuelas tienen m√°rgenes de resultados diferentes.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> m√©todo.</para>
          <para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si el n√∫mero de puntos de datos en matriz1 o matriz2 es menor que 2, o si la varianza de matriz1 o matriz2 es cero, <b>FTest</b> devuelve el #DIV/0. valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">N√∫mero de per√≠odos: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg3">Pago: pago efectuado cada per√≠odo y que no se puede cambiar durante la vigencia de la anualidad. Generalmente, el argumento de pago incluye el capital y el inter√©s pero ning√∫n otro arancel o impuesto. Si se omite el argumento de pago, se debe incluir el argumento de valor actual.</param>
        <param name="Arg4">Valor actual (Va): valor actual o importe total de una serie de pagos futuros. Si se omite el argumento de valor actual, se considerar√° 0 (cero) y se deber√° incluir el argumento de pago.</param>
        <param name="Arg5">Tipo: n√∫mero 0 √≥ 1 que indica el vencimiento de los pagos. Si tipo se omite, se calcular√° como 0.</param>
        <summary>Devuelve el valor futuro de una inversi√≥n bas√°ndose en pagos peri√≥dicos constantes y en una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obtener una descripci√≥n m√°s completa de los argumentos de <b>Fv</b> y para obtener m√°s informaci√≥n sobre las funciones de anualidad, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para>En todos los argumentos, el efectivo que se paga, por ejemplo dep√≥sitos en cuentas de ahorros, se representa con n√∫meros negativos; el efectivo que se recibe, por ejemplo cheques de dividendos, se representa con n√∫meros positivos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Principal: el valor actual.</param>
        <param name="Arg2">Plan de serie de tasas: matriz con las tasas de inter√©s que se van a aplicar.</param>
        <summary>Devuelve el valor futuro de un capital inicial despu√©s de aplicar una serie de tasas de inter√©s compuesto. Utilice FVSCHEDULE para calcular el valor futuro de una inversi√≥n con una tasa variable o ajustable.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los valores del argumento de plan de serie de tasas pueden ser n√∫meros o celdas en blanco; cualquier otro valor producir√° el valor de error #¬°VALOR! valor de error <b>de FVSchedule</b>. Las celdas en blanco se interpretan como ceros (sin inter√©s).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor para el que desea calcular Gamma.</param>
        <summary>Devuelve el valor de la funci√≥n Gamma.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>Gamma_Dist</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>Gamma_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria siguiendo una distribuci√≥n gamma. Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica. La distribuci√≥n gamma es de uso corriente en an√°lisis de tiempos de espera.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x, alfa o beta no sonnum√©ricos, <b>Gamma_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Gamma_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Gamma_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la funci√≥n de densidad de probabilidad gamma es: </para>
          <para>Figura 1: Funci√≥n de densidad de probabilidad gamma</para>
          <para> </para>
          <para> </para>
          <para>La funci√≥n de densidad de probabilidad gamma est√°ndar es:</para>
          <para>Figura 2: Funci√≥n de densidad de probabilidad gamma est√°ndar</para>
          <para> </para>
          <para> </para>
          <para>Cuando alfa = 1, <b>Gamma_Dist</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Para un entero positivo n, cuando alpha = n/2, beta = 2 y cumulative = <b>true</b>, <b>Gamma_Dist</b> devuelve (1 - CHIDIST(x)) con n grados de libertad. </para>
          <para>Cuando alfa es un entero <b>positivo, Gamma_Dist</b> tambi√©n se conoce como la distribuci√≥n de Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n gamma.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>Gamma_Inv</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <summary>Devuelve, la inversa de la distribuci√≥n gamma acumulativa. Si p = GAMMA_DIST(x,...), entonces GAMMA_INV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica.</para>
          <para>Si alg√∫n argumento es texto, <b>Gamma_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>Gamma_Inv</b> devuelve la #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Gamma_Inv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>Gamma_Inv</b> busca ese valor x de modo que GAMMA_DIST(x, alfa, beta, TRUE) = probabilidad. Por lo tanto, la <b>precisi√≥n Gamma_Inv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>Gamma_Inv</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la distribuci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>GammaDist</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si cumulative es <b>true</b>, <b>GammaDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la probabilidad de una variable aleatoria siguiendo una distribuci√≥n gamma. Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica. La distribuci√≥n gamma es de uso corriente en an√°lisis de tiempos de espera.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si x, alfa o beta no sonnum√©ricos, <b>GammaDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>GammaDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>GammaDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la funci√≥n de densidad de probabilidad gamma es: </para>
          <para>Figura 1: Funci√≥n de densidad de probabilidad gamma</para>
          <para> </para>
          <para> </para>
          <para>La funci√≥n de densidad de probabilidad gamma est√°ndar es:</para>
          <para>Figura 2: Funci√≥n de densidad de probabilidad gamma est√°ndar</para>
          <para> </para>
          <para> </para>
          <para>Cuando alfa = 1, <b>GammaDist</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Para un entero positivo n, cuando alpha = n/2, beta = 2, y cumulative = <b>true</b>, <b>GammaDist</b> devuelve (1 - CHIDIST(x)) con n grados de libertad. </para>
          <para>Cuando alfa es un entero positivo, <b>GammaDist</b> tambi√©n se conoce como distribuci√≥n de Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n gamma.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n. Si beta = 1, <b>GammaInv</b> devuelve la distribuci√≥n gamma est√°ndar.</param>
        <summary>Devuelve, para una probabilidad dada, el valor de la variable aleatoria siguiendo una distribuci√≥n gamma acumulativa. Si p es igual a GAMMADIST(x,...), entonces GAMMAINV(p,...) es igual a x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> m√©todo.</para>
          <para>Utilice esta funci√≥n para estudiar variables cuya distribuci√≥n podr√≠a ser asim√©trica.</para>
          <para>Si alg√∫n argumento es texto, <b>GammaInv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o probabilidad &gt; 1, <b>GammaInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>GammaInv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>GammaInv</b> busca ese valor x de modo que GAMMADIST(x, alfa, beta, TRUE) = probabilidad. Por lo tanto, la precisi√≥n <b>de GammaInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>GammaInv usa</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 64 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular GAMMALN.</param>
        <summary>Devuelve el logaritmo natural de la funci√≥n gamma, G(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> m√©todo.</para>
          <para>Si x no esnum√©rico, <b>GammaLn</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x ‚â§ 0, <b>GammaLn</b> devuelve el #NUM! valor de error. </para>
          <para>El n√∫mero e elevado a la potencia GAMMALN(i), donde i es un entero, devuelve el mismo resultado que (i - 1)!.</para>
          <para>
            <b>GammaLn</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo GammaLn</para>
          <para> </para>
          <para> </para>
          <para>Donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular GAMMALN.</param>
        <summary>Devuelve el logaritmo natural de la funci√≥n gamma, G(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x no es num√©rico, el m√©todo <b>GammaLn_Precise</b> genera un error.</para>
          <para>Si x ‚â§ 0, el m√©todo <b>GammaLn_Precise</b> genera un error.</para>
          <para>El n√∫mero e elevado a la potencia GAMMALN(i), donde i es un entero, devuelve el mismo resultado que (i - 1)!.</para>
          <para>GAMMALN se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el GammaLn_Precise m√©todo</para>
          <para> </para>
          <para> </para>
          <para>Donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor para el que desea la distribuci√≥n.</param>
        <summary>Devuelve 0,5 menos que la distribuci√≥n acumulativa normal est√°ndar.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 29 valores. Si uno de los valores no es un n√∫mero entero, se trunca.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el m√°ximo com√∫n divisor de dos o m√°s n√∫meros enteros. El m√°ximo com√∫n divisor es el mayor n√∫mero entero por el que son divisibles los argumentos de n√∫mero 1 y n√∫mero 2 sin dejar resto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>Gcd</b> devuelve el #VALUE! valor de error. </para>
          <para>Si cualquier argumento es menor que cero, <b>Gcd</b> devuelve el #NUM! valor de error. </para>
          <para>1 divide cualquier valor exactamente.</para>
          <para>Los √∫nicos divisores de un n√∫mero primo son el mismo n√∫mero y 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya media se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la media geom√©trica de una matriz o de un rango de datos positivos. Por ejemplo, se puede utilizar GEOMEAN para calcular la tasa de crecimiento promedio, dado un inter√©s compuesto con tasas variables.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si alg√∫n punto de ‚â§ 0, <b>GeoMean</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la media geom√©trica es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la media geom√©trica</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se compara con el argumento del valor de referencia.</param>
        <param name="Arg2">Valor de referencia: valor de umbral. Si omite un valor para step, <b>GeStep</b> usa cero.</param>
        <summary>Devuelve 1 si el valor del argumento n√∫mero es mayor o igual que el valor de referencia; en caso contrario, devuelve 0 (cero). Use esta funci√≥n para filtrar un conjunto de valores. Por ejemplo, al sumar varias funciones <b>GeStep,</b> se calcula el recuento de valores que superan un umbral.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>GeStep</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de valores de x opcionales que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg3">New_x: nuevos valores x para los que desea que <b>Growth</b> devuelva los valores Y correspondientes.</param>
        <param name="Arg4">Constante: valor l√≥gico que especifica si se ha de hacer que la constante b sea igual a 1.</param>
        <summary>Calcula el pron√≥stico de crecimiento exponencial a partir de los datos existentes. <b>Growth</b> devuelve los valores y de una serie de nuevos valores x que especifique mediante valores x e y existentes. Tambi√©n puede usar la funci√≥n de hoja <b>de c√°lculo Crecimiento</b> para ajustar una curva exponencial a los valores x e y existentes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y est√° en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si alguno de los n√∫meros de known_y es 0 o negativo, <b>Growth</b> devuelve el #NUM! valor de error. </para>
          <para>La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un vector (es decir, un rango compuesto por una fila o por una columna).</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>El argumento de nuevos valores de x debe incluir una columna (o una fila) para cada variable independiente, como ocurre con el argumento de valores conocidos de x. Por consiguiente, si el argumento de valores conocidos de y ocupa una sola columna, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de columnas. Si el argumento de valores de y conocidos ocupa una sola fila, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de filas.</para>
          <para>Si se omite el argumento de nuevos valores de x, se supone que √©ste es el mismo que el de los valores conocidos de x.</para>
          <para>Si se omiten los argumentos de valores conocidos de x y de nuevos valores de x, se supone que estos son la matriz {1,2,3,...} que tiene el mismo tama√±o que el especificado por el argumento de valores conocidos de y.</para>
          <para>Si const es <b>true</b> u omitido, b se calcula normalmente. </para>
          <para>Si const es <b>false</b>, b se establece igual a 1 y los valores m se ajustan para que y = m^x. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz despu√©s de haber seleccionado el n√∫mero de celdas correcto.</para>
          <para>Cuando especifique una constante matricial para un argumento, como valores conocidos de x, utilice punto y coma para separar los valores de una misma fila y barra inversa para separar las filas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya media se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la media arm√≥nica de un conjunto de datos. La media arm√≥nica es la inversa de la media aritm√©tica de los valores rec√≠procos.</summary>
        <returns>To be added.</returns>
        <remarks><para>La media arm√≥nica es siempre inferior a la media geom√©trica, que a su vez es siempre inferior a la media aritm√©tica.</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si alg√∫n punto de ‚â§ 0, <b>HarMean</b> devuelve el #NUM! valor de error. La ecuaci√≥n para la media arm√≥nica es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la media arm√≥nica</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero hexadecimal que se desea convertir. El n√∫mero no puede contener m√°s de 10 d√≠gitos. El bit m√°s significativo del argumento de n√∫mero es el bit del signo (40 bits contados desde la derecha). Los 9 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omite places, <b>Hex2Bin</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero hexadecimal en binario.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el n√∫mero es negativo, <b>Hex2Bin</b> omite los lugares y devuelve un n√∫mero binario de 10 caracteres. </para>
          <para>Si el argumento de n√∫mero es negativo, no puede ser menor que FFFFFFFE00 y, si es positivo, no puede ser mayor que 1FF.</para>
          <para>Si number no es un n√∫mero hexadecimal v√°lido, <b>Hex2Bin</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Hex2Bin requiere</b> m√°s de caracteres, devuelve el #NUM! valor de error. Si el argumento de caracteres no es un n√∫mero entero, se trunca. </para>
          <para>Si places no esnum√©rico, <b>Hex2Bin</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es negativo, <b>Hex2Bin</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero hexadecimal que se desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres (40 bits). El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 39 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <summary>Convierte un n√∫mero hexadecimal en decimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number no es un n√∫mero hexadecimal v√°lido, <b>Hex2Dec</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero hexadecimal que se desea convertir. El n√∫mero no puede contener m√°s de 10 d√≠gitos. El bit m√°s significativo del argumento n√∫mero es el bit de signo. Los 39 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Hex2Oct</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero hexadecimal en octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el n√∫mero es negativo, <b>Hex2Oct</b> omite los lugares y devuelve un n√∫mero octal de 10 caracteres. </para>
          <para>Si el argumento de n√∫mero es negativo, no puede ser menor que FFE0000000 y, si es positivo, no puede ser mayor que 1FFFFFFF.</para>
          <para>Si number no es un n√∫mero hexadecimal v√°lido, <b>Hex2Oct</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Hex2Oct</b> requiere m√°s de caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Hex2Oct</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es negativo, <b>Hex2Oct</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor buscado: valor que se debe buscar en la primera fila de la tabla. El argumento de valor buscado puede ser un valor, una referencia o una cadena de texto.</param>
        <param name="Arg2">Matriz de b√∫squeda: tabla de informaci√≥n en la que se buscan los datos. Utilice una referencia a un rango o el nombre de un rango.</param>
        <param name="Arg3">Row_index_num: el n√∫mero de fila de table_array desde el que se devolver√° el valor correspondiente. Un row_index_num de 1 devuelve el primer valor de fila en table_array, un row_index_num de 2 devuelve el segundo valor de fila en table_array, y as√≠ sucesivamente. Si row_index_num es menor que 1, <b>HLookup</b> devuelve el #VALUE! valor de error; si row_index_num es mayor que el n√∫mero de filas en table_array, <b>HLookup</b> devuelve el #REF! valor de error.</param>
        <param name="Arg4">Range_lookup: un valor l√≥gico que especifica si desea que <b>HLookup</b> encuentre una coincidencia exacta o una coincidencia aproximada. Si <b>es true</b> o se omite, se devuelve una coincidencia aproximada. Es decir, si no encuentra ninguna coincidencia exacta, devolver√° el siguiente mayor valor que sea inferior al del argumento de valor buscado. Si <b>es false,</b> <b>HLookup</b> encontrar√° una coincidencia exacta. Si no encuentra ninguna, devolver√° el valor de error #N/A.</param>
        <summary>Busca un valor en la fila superior de una tabla o una matriz de valores y devuelve un valor en la misma columna de una fila especificada en la tabla o matriz. Use HLookup cuando los valores de comparaci√≥n se encuentran en una fila en la parte superior de una tabla de datos y desea buscar un n√∫mero especificado de filas. Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> usa cuando los valores de comparaci√≥n se encuentran en una columna a la izquierda de los datos que desea encontrar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si <b>HLookup</b> no encuentra lookup_value y range_lookup <b>es true,</b>usa el valor m√°s grande que es menor que lookup_value. </para>
          <para>Si lookup_value es menor que el valor m√°s peque√±o de la primera fila de table_array, <b>HLookup</b> devuelve el valor de error #N/A. </para>
          <para>Si el argumento de rango de b√∫squeda es FALSE y el de valor buscado es texto, se pueden los usar caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*) en el argumento de valor buscado. El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">√âxitos de muestra: n√∫mero de √©xitos en la muestra.</param>
        <param name="Arg2">N√∫mero de muestras: tama√±o de la muestra.</param>
        <param name="Arg3">√âxitos de la poblaci√≥n: n√∫mero de √©xitos en la poblaci√≥n.</param>
        <param name="Arg4">N√∫mero de poblaci√≥n: tama√±o de la poblaci√≥n.</param>
        <param name="Arg5">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>HypGeom_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false</b>, devuelve la funci√≥n de masa de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n hipergeom√©trica. <b>HypGeom_Dist</b> devuelve la probabilidad de un n√∫mero determinado de √©xitos de muestra, dado el tama√±o de la muestra, los √©xitos de la poblaci√≥n y el tama√±o de la poblaci√≥n. Use <b>HypGeom_Dist</b> para problemas con una poblaci√≥n finita, donde cada observaci√≥n es un √©xito o un error, y donde cada subconjunto de un tama√±o determinado se elige con la misma probabilidad.</summary>
        <returns>To be added.</returns>
        <remarks><para>Todos los argumentos se truncan a enteros.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>HypGeom_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si sample_s 0 o sample_s es mayor que el menor de number_sample o &lt; population_s, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si sample_s es menor que el mayor de 0 o (number_sample - number_population + population_s), <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si number_sample ‚â§ 0 o number_sample &gt; number_population, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si population_s ‚â§ 0 o population_s &gt; number_population, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si number_population ‚â§ 0, <b>HypGeom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la distribuci√≥n hipergeom√©trica es: </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n hipergeom√©trica</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> se usa en muestreo sin reemplazo de una poblaci√≥n finita.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√âxitos de muestra: n√∫mero de √©xitos en la muestra.</param>
        <param name="Arg2">N√∫mero de muestras: tama√±o de la muestra.</param>
        <param name="Arg3">√âxitos de la poblaci√≥n: n√∫mero de √©xitos en la poblaci√≥n.</param>
        <param name="Arg4">N√∫mero de poblaci√≥n: tama√±o de la poblaci√≥n.</param>
        <summary>Devuelve la distribuci√≥n hipergeom√©trica. <b>HypGeomDist</b> devuelve la probabilidad de un n√∫mero determinado de √©xitos de muestra, dado el tama√±o de la muestra, los √©xitos de la poblaci√≥n y el tama√±o de la poblaci√≥n. Use <b>HypGeomDist</b> para problemas con una poblaci√≥n finita, donde cada observaci√≥n es un √©xito o un error, y donde cada subconjunto de un tama√±o determinado se elige con la misma probabilidad.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>HypGeomDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si sample_s 0 o sample_s es mayor que el menor de number_sample o &lt; population_s, <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si sample_s es menor que el mayor de 0 o (number_sample - number_population + population_s), <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si number_sample ‚â§ 0 o number_sample &gt; number_population, HYPGEOMDIST devuelve el #NUM! valor de error. </para>
          <para>Si population_s ‚â§ 0 o population_s &gt; number_population, <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si number_population ‚â§ 0, <b>HypGeomDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la distribuci√≥n hipergeom√©trica es: </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n hipergeom√©trica</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist</b> se usa en el muestreo sin reemplazo de una poblaci√≥n finita.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: argumento en el que se busca un error.</param>
        <param name="Arg2">Valor en caso de error: valor que devolver si la f√≥rmula se eval√∫a como un error. Se eval√∫an los siguientes tipos de error: #N/A, #¬°VALOR!, #¬°REF!, #¬°DIV/0!, #¬°NUM!, #¬øNOMBRE? o #¬°NULO!</param>
        <summary>Devuelve un valor que se especifica si una f√≥rmula se eval√∫a como un error; de lo contrario, devuelve el resultado de la f√≥rmula. Use la <b>funci√≥n IfError</b> para capturar y controlar errores en una f√≥rmula.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si value o value_if_error es una celda vac√≠a, <b>IfError</b> lo trata como un valor de cadena vac√≠o (""). </para>
          <para>Si value es una f√≥rmula de matriz, <b>IfError</b> devuelve una matriz de resultados para cada celda del rango especificado en value. Vea el segundo ejemplo siguiente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">value: Cualquier valor, expresi√≥n o referencia.</param>
        <param name="Arg2">value_if_na: cualquier valor, expresi√≥n o referencia.</param>
        <summary>Devuelve el valor especificado si la expresi√≥n se resuelve en #N/A, de lo contrario devuelve el resultado de la expresi√≥n.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo valor absoluto se desea calcular.</param>
        <summary>Devuelve el valor absoluto (m√≥dulo) de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El valor absoluto de un n√∫mero complejo es: </para>
          <para>Figura 1: Ecuaci√≥n para el valor absoluto de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo coeficiente imaginario se desea calcular.</param>
        <summary>Devuelve el coeficiente de la parte imaginaria de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber es un n√∫mero complejo para el que desea que el argumento theta.</param>
        <summary>Devuelve el argumento (theta), un √°ngulo expresado en radianes, de modo que:</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>
            <b>ImArgument</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo ImArgument</para>
          <para> </para>
          <para> </para>
          <para>Donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>y</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo conjugado se desea calcular.</param>
        <summary>Devuelve la conjugada compleja de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>La conjugada de un n√∫mero complejo es: </para>
          <para>Figura 1: Ecuaci√≥n para conjugar un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo coseno se desea obtener.</param>
        <summary>Devuelve el coseno de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>Si inumber es un valor l√≥gico, <b>ImCos</b> devuelve el #VALUE! valor de error. </para>
          <para>El coseno de un n√∫mero complejo es: 

 </para>
          <para>Figura 1: Coseno de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea el coseno hiperb√≥lico.</param>
        <summary>Devuelve el coseno hiperb√≥lico de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea la cotangente.</param>
        <summary>Devuelve la cotangente de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea el cosecant.</param>
        <summary>Devuelve el cosecant de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea el cosecant hiperb√≥lico.</param>
        <summary>Devuelve el cosecant hiperb√≥lico de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1: n√∫mero complejo que se utilizar√° como numerador o dividendo en la operaci√≥n.</param>
        <param name="Arg2">N√∫mero complejo 2: n√∫mero complejo que se usar√° como denominador o divisor en la operaci√≥n.</param>
        <summary>Devuelve el cociente entre dos n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El cociente de dos n√∫meros complejos es: 

 </para>
          <para>Figura 1: Cociente de dos n√∫meros complejos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuya funci√≥n exponencial se desea calcular.</param>
        <summary>Devuelve en forma algebraica el resultado de la funci√≥n exponencial de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>La funci√≥n exponencial de un n√∫mero complejo es: 

 </para>
          <para>Figura 1: Exponencial de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo logaritmo natural (neperiano) se desea obtener.</param>
        <summary>Devuelve el logaritmo natural (neperiano) de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El logaritmo natural de un n√∫mero complejo es: </para>
          <para>Figura 1: Logaritmo natural de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo logaritmo com√∫n (en base 10) se desea obtener.</param>
        <summary>Devuelve el logaritmo com√∫n (en base 10) de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El logaritmo com√∫n de un n√∫mero complejo se puede calcular a partir del logaritmo natural (neperiano) como se indica a continuaci√≥n: 

 </para>
          <para>Figura 1: Ecuaci√≥n para logaritmo com√∫n de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: un n√∫mero complejo cuyo logaritmo en base 2 se desea obtener.</param>
        <summary>Devuelve el logaritmo en base 2 de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El logaritmo en base 2 de un n√∫mero complejo se puede calcular a partir del logaritmo natural (neperiano) como se indica a continuaci√≥n: 

 </para>
          <para>Figura 1: Ecuaci√≥n para logaritmo base-2 de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo que se desea elevar a una potencia.</param>
        <param name="Arg2">N√∫mero: potencia a la cual se desea elevar el n√∫mero complejo.</param>
        <summary>Devuelve el resultado de un n√∫mero complejo elevado a una potencia entera con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>Si number no esnum√©rico, <b>ImPower</b> devuelve el #VALUE! valor de error. </para>
          <para>El argumento de n√∫mero puede ser un n√∫mero entero, fraccionario o negativo.</para>
          <para>Un n√∫mero complejo elevado a una potencia se calcula de la siguiente manera: </para>
          <para>Figura 1: N√∫mero complejo de ecuaciones elevado a una potencia</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Y en:</para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Y en:</para>
          <para>Figura 4: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1; n√∫mero complejo2;... son de 1 a 29 n√∫meros complejos que se deben multiplicar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el producto de 2 a 29 n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El producto de dos n√∫meros complejos es:</para>
          <para>Figura 1: Producto de dos n√∫meros complejos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo coeficiente real se desea calcular.</param>
        <summary>Devuelve el coeficiente de la parte real de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea el cosecant hiperb√≥lico.</param>
        <summary>Devuelve el cosecant hiperb√≥lico de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea el secant hiperb√≥lico.</param>
        <summary>Devuelve el secant de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuyo seno se desea obtener.</param>
        <summary>Devuelve el seno de un n√∫mero complejo con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>El seno de un n√∫mero complejo es: 

 </para>
          <para>Figura 1: Seno de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea el seno hiperb√≥lico.</param>
        <summary>Devuelve el seno hiperb√≥lico de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo: n√∫mero complejo cuya ra√≠z cuadrada se desea obtener.</param>
        <summary>Devuelve la ra√≠z cuadrada de un n√∫mero complejo x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. La ra√≠z cuadrada de un n√∫mero complejo es: </para>
          <para>Figura 1: Ra√≠z cuadrada de un n√∫mero complejo</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Y en:</para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Y en:</para>
          <para>Figura 4: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1: n√∫mero complejo del que se resta el argumento del n√∫mero complejo 2.</param>
        <param name="Arg2">N√∫mero complejo 2: n√∫mero complejo que se resta del n√∫mero complejo 1.</param>
        <summary>Devuelve la diferencia de dos n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo.</para>
          <para>La diferencia de dos n√∫meros complejos es: 

</para>
          <para>Figura 1: Diferencia de dos n√∫meros complejos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo 1, n√∫mero complejo 2,...: de 1 a 29 n√∫meros complejos que se deben sumar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la suma de dos o m√°s n√∫meros complejos con el formato de texto x + yi o x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> usa para convertir coeficientes reales e imaginarios en un n√∫mero complejo. </para>
          <para>La suma de dos n√∫meros complejos es: 

</para>
          <para>Figura 1: Suma de dos n√∫meros complejos</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero complejo para el que desea la tangente.</param>
        <summary>Devuelve la tangente de un n√∫mero complejo.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz o referencia: rango de celdas o constante matricial. En el caso de referencias, es la referencia a uno o m√°s rangos de celdas.</param>
        <param name="Arg2">N√∫mero de fila: selecciona la fila de una matriz desde la que devolver un valor. Si se omite el argumento de n√∫mero de fila, se requiere un argumento de n√∫mero de columna. En el caso de referencias, es el n√∫mero de la fila desde la que devolver una referencia.</param>
        <param name="Arg3">N√∫mero de columna: selecciona la columna de una matriz desde la que devolver un valor. Si se omite el argumento de n√∫mero de columna, se debe utilizar el argumento de n√∫mero de fila. En el caso de referencias, es el n√∫mero de la columna desde la que devolver una referencia.</param>
        <param name="Arg4">Area_num: se utiliza solo al devolver referencias. Selecciona un rango de referencia desde el que se devolver√° la intersecci√≥n de n√∫m_fila y n√∫m_columna. La primera √°rea seleccionada o especificada es la n√∫mero 1, la segunda es 2 y as√≠ sucesivamente. Si area_num se omite, <b>Index</b> usa el √°rea 1.</param>
        <summary>Devuelve un valor o la referencia a un valor de una tabla o rango. Hay dos formas de la funci√≥n <b>Index:</b> el formulario de matriz y el formulario de referencia.</summary>
        <returns>To be added.</returns>
        <remarks><para>Formulario matricial</para>
          <para>Devuelve el valor de un elemento de una tabla o matriz seleccionado por los √≠ndices de n√∫mero de fila y de columna.</para>
          <para>Use el formulario de matriz si el primer argumento de <b>Index</b> es una constante de matriz.</para>
          <para>Si se usan los argumentos row_num y column_num, <b>Index</b> devuelve el valor de la celda en la intersecci√≥n de row_num y column_num. </para>
          <para>Si establece row_num o column_num en 0 (cero), <b>Index</b> devuelve la matriz de valores para toda la columna o fila, respectivamente. Para usar los valores devueltos como una matriz, escriba la funci√≥n <b>Index</b> como f√≥rmula de matriz en un intervalo horizontal de celdas de una fila y en un rango vertical de celdas para una columna. Para escribir una f√≥rmula de matriz, presione CTRL + MAY√öS + ENTRAR. </para>
          <para>Row_num y column_num deben apuntar a una celda dentro de la matriz; de lo <b>contrario, Index</b> devuelve el #REF! valor de error. </para>
          <para>Formulario de referencia</para>
          <para>Devuelve la referencia de la celda ubicada en la intersecci√≥n de una fila y de una columna determinadas. Si el argumento de la referencia es una selecci√≥n m√∫ltiple, se podr√° elegir la selecci√≥n en la que se buscar√° la referencia. Si cada √°rea del argumento de referencia contiene una sola fila o columna, el argumento de n√∫mero de fila o n√∫mero de columna, respectivamente, es opcional. Por ejemplo, para un argumento de referencia con una sola fila, utilice INDEX(reference,,column_num).</para>
          <para>Despu√©s de que los argumentos de referencia y de n√∫m_√°rea hayan seleccionado un rango determinado, n√∫m_fila y n√∫m_columna seleccionan una celda espec√≠fica: n√∫m_row 1 es la primera fila del rango, n√∫m_columna 1 es la primera columna, y as√≠ sucesivamente. La referencia devuelta por <b>Index</b> es la intersecci√≥n de row_num y column_num. </para>
          <para>Si establece row_num o column_num en 0 (cero), <b>Index</b> devuelve la referencia de toda la columna o fila, respectivamente.</para>
          <para>Row_num, column_num y area_num deben apuntar a una celda dentro de la referencia; de lo <b>contrario, Index</b> devuelve el #REF! valor de error. Si row_num y column_num se omiten, <b>Index</b> devuelve el √°rea en referencia especificada por area_num. </para>
          <para>El resultado de la <b>funci√≥n Index</b> es una referencia y se interpreta como tal mediante otras f√≥rmulas. Dependiendo de la f√≥rmula, puede usar el valor devuelto por INDEX como referencia o como un valor. Por ejemplo, la f√≥rmula CELL("width",INDEX(A1:B2,1,2)) equivale a CELL("width",B1). La funci√≥n CELL usa el valor devuelto por INDEX como una referencia de celda. Por otro lado, una f√≥rmula como 2*INDEX(A1:B2,1,2) convierte el valor devuelto de <b>Index</b> en el n√∫mero de la celda B1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de observaciones o datos dependientes.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de observaciones o datos independientes.</param>
        <summary>Calcula el punto en el que una l√≠nea intersecar√° el eje y utilizando los valores de x e y existentes. El punto de intersecci√≥n se basa en el mejor ajuste de la l√≠nea de regresi√≥n trazada con los valores de x e y conocidos. Use la <b>funci√≥n Intercept</b> cuando desee determinar el valor de la variable dependiente cuando la variable independiente sea 0 (cero). Por ejemplo, puede usar la funci√≥n <b>Intercept</b> para predecir la resistencia el√©ctrica de un metal a 0¬∞C cuando los puntos de datos se tomaron a temperatura ambiente y superior.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si known_y y known_x contienen un n√∫mero diferente de puntos de datos o no contienen puntos de datos, <b>Intercept</b> devuelve el valor de error #N/A. </para>
          <para>La ecuaci√≥n para la interceptaci√≥n de la l√≠nea de regresi√≥n, a, es:</para>
          <para>Figura 1: Ecuaci√≥n para la interceptaci√≥n de la l√≠nea de regresi√≥n</para>
          <para> </para>
          <para> </para>
          <para>donde la pendiente, b, se calcula como:</para>
          <para>Figura 2: Ecuaci√≥n para la pendiente</para>
          <para> </para>
          <para> </para>
          <para>y donde x e y son el ejemplo significa AVERAGE(known_x's) y AVERAGE(known_y's).</para>
          <para>El algoritmo subyacente usado en <b>intercept</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> funciones es diferente del algoritmo subyacente usado en la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> funci√≥n. La diferencia entre estos algoritmos puede producir resultados distintos cuando los datos son indeterminados y colineales. Por ejemplo, si los puntos de datos del argumento de valores conocidos de y son 0 y los puntos de datos del argumento de valores conocidos de x son 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Interceptar</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> y devolver un #DIV/0! error. Intercept <b></b> and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> algorithm is designed to look for one and only one answer, and in this case there can be more than one answer. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> devuelve un valor de 0. El algoritmo est√° dise√±ado para devolver resultados razonables para los datos de colisi√≥n y, en este caso, se puede encontrar al menos <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> una respuesta.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Inversi√≥n: cantidad de dinero que se ha invertido en el valor burs√°til.</param>
        <param name="Arg4">Valor de amortizaci√≥n: cantidad que se recibir√° en la fecha de vencimiento.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la tasa de inter√©s para la inversi√≥n total en un valor burs√°til.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>IntRate</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la inversi√≥n ‚â§ 0 o si el ‚â§ 0, <b>IntRate</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>IntRate</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, <b>IntRate</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>IntRate</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo IntRate</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en un a√±o, seg√∫n el a√±o.</para>
          <para>DIM = n√∫mero de d√≠as desde la liquidaci√≥n hasta el vencimiento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Per√≠odo: per√≠odo para el que se desea calcular el inter√©s y que debe estar entre 1 y el valor del argumento de n√∫mero de per√≠odos.</param>
        <param name="Arg3">N√∫mero de per√≠odos: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg4">Va: valor actual o importe total de una serie de pagos futuros.</param>
        <param name="Arg5">Vf: valor futuro o un saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento de vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0).</param>
        <param name="Arg6">Tipo: n√∫mero 0 √≥ 1 que indica el vencimiento de los pagos. Si tipo se omite, se calcular√° como 0.</param>
        <summary>Devuelve el inter√©s pagado en un per√≠odo espec√≠fico por una inversi√≥n bas√°ndose en pagos peri√≥dicos constantes y en una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos. </para>
          <para>En todos los argumentos, el efectivo que se paga, por ejemplo dep√≥sitos en cuentas de ahorros, se representa con n√∫meros negativos; el efectivo que se recibe, por ejemplo cheques de dividendos, se representa con n√∫meros positivos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores: matriz o referencia a celdas que contienen los n√∫meros para los cuales se desea calcular la tasa interna de retorno.</param>
        <param name="Arg2">Estimaci√≥n: n√∫mero que el usuario estima que se aproximar√° al resultado de IRR.</param>
        <summary>Devuelve la tasa interna de retorno de los flujos de caja representados por los n√∫meros del argumento de valores. Estos flujos de caja no tienen por qu√© ser constantes, como es el caso en una anualidad. Sin embargo, los flujos de caja deben producirse a intervalos regulares, como meses o a√±os. La tasa interna de retorno equivale a la tasa de inter√©s producida por un proyecto de inversi√≥n con pagos (valores negativos) e ingresos (valores positivos) que tienen lugar en per√≠odos regulares.</summary>
        <returns>To be added.</returns>
        <remarks><para>El argumento de valores debe contener al menos un valor positivo y uno negativo para calcular la tasa interna de retorno.</para>
          <para>IRR interpreta el orden de los flujos de caja siguiendo el orden del argumento de valores. Aseg√∫rese de escribir los valores de los pagos e ingresos en el orden correcto.</para>
          <para>Si un argumento matricial o de referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto.</para>
          <para>Microsoft Excel usa una t√©cnica iterativa para calcular <b>Irr</b>. A partir de la conjetura, <b>Irr</b> pasa por el c√°lculo hasta que el resultado es preciso dentro del 0,00001 por ciento. Si <b>Irr</b> no encuentra un resultado que funcione despu√©s de 20 intentos, #NUM! se devuelve el valor de error. </para>
          <para>En la mayor√≠a de los casos, no es necesario proporcionar informaci√≥n sobre el c√°lculo <b>de Irr.</b> Si se omite el argumento de estimaci√≥n, se supondr√° que es 0,1 (10%). </para>
          <para>Si <b>Irr</b> da el #NUM! o si el resultado no se aproxima a su estimaci√≥n, realice un nuevo intento con un valor distinto para el argumento de estimaci√≥n.</para>
          <para>
            <b>Irr</b> est√° estrechamente relacionado con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> , la funci√≥n de valor presente neto. La tasa de retorno calculada por <b>Irr</b> es la tasa de inter√©s correspondiente a un valor presente neto de 0 (cero). La siguiente f√≥rmula muestra c√≥mo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> e <b>Irr est√°n</b> relacionados:</para>
          <para>NPV(IRR(B1:B6),B1:B6) es igual a 3,60E-08 [Dentro de la precisi√≥n del c√°lculo <b>irr,</b> el valor 3,60E-08 es efectivamente 0 (cero).]</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia a cualquier valor de error excepto #N/A.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia a cualquier valor de error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, o #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor es par.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referencia a la celda que desea probar. La referencia puede ser una referencia de celda, una f√≥rmula o un nombre que haga referencia a una celda.</param>
        <summary>Comprueba si una referencia es a una celda que contiene una f√≥rmula y devuelve <b>TRUE</b> o <b>FALSE</b>.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia a un valor l√≥gico.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia al valor de error #N/A (valor no disponible).</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia a cualquier elemento que no sea texto. (Tenga en cuenta que esta funci√≥n devuelve <b>true</b> si el valor hace referencia a una celda en blanco).</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia a un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number: el valor que se va a redondear.</param>
        <param name="Arg2">Importancia: el m√∫ltiplo opcional al que se va a redondear el n√∫mero. Si se omite la significaci√≥n, su valor predeterminado es 1.</param>
        <summary>Devuelve un n√∫mero redondeado al entero mayor m√°s cercano o al m√∫ltiplo m√°s cercano de la cifra significativa.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor es impar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">C√≥digo de fecha y hora usado por Excel para el c√°lculo de fecha y hora.</param>
        <param name="Arg2">Este argumento no est√° disponible en la funci√≥n.</param>
        <summary>Devuelve el n√∫mero de semana ISO del a√±o para una fecha determinada.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>Devuelve el n√∫mero ordinal de la semana de calendario [ISO8601] del a√±o para la fecha especificada. ISO 8601 define la semana del calendario como un intervalo de tiempo de siete d√≠as calendario a partir de un lunes y la primera semana de calendario de un a√±o como la que incluye el primer jueves de ese a√±o.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s de la inversi√≥n.</param>
        <param name="Arg2">Per√≠odo: per√≠odo para el que se desea calcular el inter√©s y que debe estar comprendido entre 1 y el valor del argumento de n√∫mero de per√≠odos.</param>
        <param name="Arg3">N√∫mero de per√≠odos: n√∫mero total de per√≠odos de pago de la inversi√≥n.</param>
        <param name="Arg4">Valor actual: valor actual de la inversi√≥n. En el caso de un pr√©stamo, el argumento de valor actual es la cantidad del pr√©stamo.</param>
        <summary>Calcula el inter√©s pagado durante un per√≠odo espec√≠fico de una inversi√≥n. Esta funci√≥n se incluye para proporcionar compatibilidad con Lotus 1-2-3.</summary>
        <returns>To be added.</returns>
        <remarks><para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con una tasa de inter√©s anual del 12 por ciento, use 12%/12 para el argumento de tasa y 4*12 para el argumento de n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para>Para todos los argumentos, el dinero que desembolse, como dep√≥sitos en una cuenta de ahorros u otros reintegrados, se representa con n√∫meros negativos, mientras que el dinero recibido, como cheques de dividendos y otros dep√≥sitos, se representa con n√∫meros positivos.</para>
          <para>Para obtener informaci√≥n adicional acerca de las funciones financieras, vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> funci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor: valor que se desea probar. Puede ser el valor de una celda vac√≠a (en blanco), de error, l√≥gico, de texto, num√©rico, de referencia o un nombre que haga referencia a alguno de los anteriores.</param>
        <summary>Comprueba el tipo de valor y devuelve <b>true</b> o <b>false</b> en funci√≥n de si el valor hace referencia al texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor de las funciones IS no se convierten. Por ejemplo, en la mayor√≠a de las funciones en las que se requiere un n√∫mero, el valor de texto "19" se convierte en el n√∫mero 19. Sin embargo, en la f√≥rmula ISNUMBER("19"), "19" no se convierte desde un valor de texto y la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> devuelve <b>false</b>. </para>
          <para>Las funciones IS son √∫tiles en las f√≥rmulas cuando se desea comprobar el resultado de un c√°lculo. Cuando se combina con la funci√≥n IF, proporcionan un m√©todo para localizar errores en f√≥rmulas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2,...: de 1 a 30 argumentos cuya curtosis desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la curtosis de un conjunto de datos. La curtosis caracteriza la elevaci√≥n o achatamiento relativos de una distribuci√≥n en comparaci√≥n con la distribuci√≥n normal. Una curtosis positiva indica una distribuci√≥n relativamente elevada. Una curtosis negativa indica una distribuci√≥n relativamente achatada.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si hay menos de cuatro puntos de datos, o si la desviaci√≥n est√°ndar de la muestra es igual a cero, <b>Kurt</b> devuelve el #DIV/0. valor de error. </para>
          <para>Kurtosis se define como: </para>
          <para>Figura 1: Ecuaci√≥n de Kurtosis</para>
          <para> </para>
          <para> </para>
          <para>donde s es la desviaci√≥n est√°ndar de muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos cuyo k-√©simo mayor valor se desea determinar.</param>
        <param name="Arg2">K: posici√≥n, dentro de la matriz o del rango de celdas, de los datos que se van a devolver, determinada a partir del mayor de los valores.</param>
        <summary>Devuelve el k-√©simo mayor valor de un conjunto de datos. Puede utilizar esta funci√≥n para seleccionar un valor en funci√≥n de su posici√≥n relativa. Por ejemplo, puede usar <b>Large</b> para devolver la puntuaci√≥n m√°s alta, subcampeona o tercera posici√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° vac√≠a, <b>Large</b> devuelve el #NUM! valor de error. </para>
          <para>Si k ‚â§ 0 o si k es mayor que el n√∫mero de puntos de datos, <b>Large</b> devuelve el #NUM! valor de error.</para>
          <para>Si n es el n√∫mero de puntos de datos en el rango, LARGE(matriz,1) devuelve el valor mayor y LARGE(matriz,n) devuelve el valor menor.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, n√∫mero2,...: de 1 a 29 valores para los que desea calcular el m√≠nimo com√∫n m√∫ltiplo. Si el valor no es un entero, se trunca.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el m√≠nimo com√∫n m√∫ltiplo de n√∫meros enteros. El m√≠nimo com√∫n m√∫ltiplo es el entero positivo menor que es m√∫ltiplo de todos los argumentos enteros n√∫mero1, n√∫mero2, etc. Utilice LCM para agregar fracciones con diferentes denominadores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>Lcm</b> devuelve el #VALUE! valor de error. </para>
          <para>Si cualquier argumento es menor que cero, <b>Lcm</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores conocidos de y en la relaci√≥n y = mx + b.</param>
        <param name="Arg2">Valores conocidos de x: conjunto opcional de valores de x que se conocen en la relaci√≥n y = mx+b.</param>
        <param name="Arg3">Constante: un valor l√≥gico que especifica si se fuerza la constante b para que sea igual a 0.</param>
        <param name="Arg4">Estad√≠stica: valor l√≥gico que especifica si se van a devolver estad√≠sticas de regresi√≥n adicionales.</param>
        <summary>Calcula el valor estad√≠stico de una l√≠nea mediante el m√©todo de los "m√≠nimos cuadrados" con el fin de calcular la l√≠nea recta que mejor se adapta a los datos, y devuelve una matriz que describe la l√≠nea. Como esta funci√≥n devuelve una matriz de valores, debe especificarse como una f√≥rmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>La ecuaci√≥n de la l√≠nea es la siguiente:</para>
          <para>y = mx + b o</para>
          <para>y = m1x1 + m2x2 + ... + b (si hay varios rangos de valores x)</para>
          <para>donde el valor de y dependiente es una funci√≥n de los valores de x independientes. Los valores de m son coeficientes que corresponden a cada valor de x y b es un valor constante. Tenga en cuenta que y, x y m pueden ser vectores. La matriz que <b>devuelve LinEst</b> es {mn,mn-1,...,m1,b}. <b>LinEst tambi√©n</b> puede devolver estad√≠sticas de regresi√≥n adicionales.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un vector (es decir, un rango compuesto por una fila o por una columna).</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>Si const es <b>true</b> u omitido, b se calcula normalmente. </para>
          <para>Si const es <b>false</b>, b se establece en 0 y los valores m se ajustan para ajustarse a y = mx. </para>
          <para>Si stats es <b>truuue,</b> <b>LinEst</b> devuelve las estad√≠sticas de regresi√≥n adicionales, por lo que la matriz devuelta es {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey; F,df;ssreg,ssresid}. </para>
          <para>Si las estad√≠sticas <b>son false</b> u omitidas, <b>LinEst</b> devuelve solo los coeficientes m y la constante b. </para>
          <para>Las estad√≠sticas de regresi√≥n adicionales son las siguientes:</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Valores de error t√≠picos para los coeficientes m1,m2,...,mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>El valor de error est√°ndar de la constante b (seb = #N/A cuando const es <b>false</b>).</description>
            </item>
            <item>
              <term>r2</term>
              <description>Coeficiente de determinaci√≥n. Compara los valores de y previstos y reales y asigna un valor de 0 a 1. Si es 1, hay una correlaci√≥n perfecta en la muestra: no hay diferencia entre el valor de y previsto y el valor de y real. En el otro extremo, si el coeficiente de determinaci√≥n es 0, la ecuaci√≥n de regresi√≥n no sirve para predecir el valor de y. </description>
            </item>
            <item>
              <term>sey</term>
              <description>Error t√≠pico para el valor previsto de y.</description>
            </item>
            <item>
              <term>F</term>
              <description>Valor estad√≠stico de F o valor observado de F. Utilice el valor estad√≠stico de F para determinar si la relaci√≥n observada entre las variables dependientes e independientes se produce al azar.</description>
            </item>
            <item>
              <term>df</term>
              <description>Grados de libertad. Utilice los grados de libertad para hallar valores cr√≠ticos de F en una tabla estad√≠stica. Compare los valores que encuentre en la tabla con la estad√≠stica F devuelta por <b>LinEst</b> para determinar un nivel de confianza para el modelo. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>Suma de regresi√≥n de cuadrados.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>Suma residual de cuadrados.</description>
            </item>
          </list>
          <para>En la siguiente ilustraci√≥n se muestra el orden en que se devuelven las estad√≠sticas de regresi√≥n adicionales.</para>
          <para>Figura 1: Hoja de c√°lculo</para>
          <para> </para>
          <para> </para>
          <para>Puede describir cualquier l√≠nea recta con la pendiente y la intercepci√≥n Y: </para>
          <para>Pendiente (m):</para>
          <para>
Para buscar la pendiente de una l√≠nea, a menudo escrita como m, tome dos puntos en la l√≠nea, (x1,y1) y (x2,y2); la pendiente es igual a (y2 - y1)/(x2 - x1).</para>
          <para>Interceptaci√≥n Y (b):</para>
          <para>
La intercepci√≥n y de una l√≠nea, a menudo escrita como b, es el valor de y en el punto donde la l√≠nea cruza el eje Y.</para>
          <para>La ecuaci√≥n de una l√≠nea recta es y = mx + b. Cuando se conocen los valores de m y b, se puede calcular cualquier punto de la l√≠nea rellenando el valor de y o de x en la ecuaci√≥n. Tambi√©n puede usar la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> funci√≥n.</para>
          <para>Cuando solo tiene una variable x independiente, puede obtener los valores de pendiente e interceptaci√≥n Y directamente mediante las f√≥rmulas siguientes: </para>
          <para>Pendiente:</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),1)</para>
          <para>Interceptaci√≥n Y:</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),2)</para>
          <para>La precisi√≥n de la l√≠nea calculada por <b>LineEst</b> depende del grado de dispersi√≥n de los datos. Entre m√°s lineales son los datos, m√°s preciso es <b>el modelo LineEst.</b> <b>LineEst</b> usa el m√©todo de m√≠nimos cuadrados para determinar el ajuste m√°s adecuado para los datos. Cuando solo tiene una variable x independiente, los c√°lculos de m y b se basan en las f√≥rmulas siguientes: </para>
          <para>Figura 2: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son medios de ejemplo, es decir, x = PROMEDIO(x conocidos) e y = PROMEDIO(known_y).</para>
          <para>Las funciones de ajuste de l√≠nea y curva <b>LineEst</b> y pueden calcular la mejor l√≠nea recta o curva exponencial <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> que se adapte a los datos. Sin embargo, tendr√° que decidir cu√°l de los dos resultados se adapta mejor a los datos. Puede calcular TREND(valores conocidos de y, valores conocidos de x) para una l√≠nea recta, o GROWTH(valores conocidos de y, valores conocidos de x) para una curva exponencial. Estas funciones, sin el argumento de valores nuevos de x, devuelven una matriz de valores y previstos a lo largo de la l√≠nea o curva en los puntos de datos reales. A continuaci√≥n, puede comparar los valores previstos con los valores reales. Puede ser conveniente dibujarlos en un gr√°fico para poder compararlos visualmente. </para>
          <para>En el an√°lisis de regresi√≥n, Microsoft Excel calcula para cada punto la diferencia al cuadrado entre el valor previsto de y para ese punto y su valor real de y. La suma de estas diferencias al cuadrado se denomina suma residual de los cuadrados, ssresid. Microsoft Excel calcula, a continuaci√≥n, la suma total de los cuadrados, sstotal. Cuando const = <b>true</b>o omitido, la suma total de cuadrados es la suma de las diferencias cuadradas entre los valores y reales y y el promedio de los valores Y. Cuando const = <b>false</b>, la suma total de cuadrados es la suma de los cuadrados de los valores y reales (sin restar el valor y promedio de cada valor y individual). Por tanto, la suma de regresi√≥n de los cuadrados, ssreg, se puede hallar a partir de: ssreg = sstotal - ssresid. Cuanto menor sea la suma residual de los cuadrados, comparada con la suma total de los cuadrados, mayor ser√° el valor del coeficiente de determinaci√≥n, r2, que es un indicador de c√≥mo la ecuaci√≥n resultante del an√°lisis de regresi√≥n explica la relaci√≥n entre las variables. r2 es igual a ssreg/sstotal. </para>
          <para>En algunos casos, una o varias de las columnas X (supongamos que Y y X est√°n en columnas) pueden no tener ning√∫n valor predictivo adicional en presencia de las otras columnas X. En otras palabras, la eliminaci√≥n de una o m√°s columnas X puede provocar valores Y predichos que sean igualmente precisos. En ese caso, estas columnas X redundantes deben omitirse del modelo de regresi√≥n. Este fen√≥meno se denomina "colinealidad" porque cualquier columna X redundante se puede expresar como una suma de m√∫ltiplo de las columnas X no redundantes. <b>LinEst</b> comprueba la colinealidad y quita las columnas X redundantes del modelo de regresi√≥n cuando las identifica. Las columnas X eliminadas se pueden reconocer en <b>la salida de LinEst</b> como que tienen 0 coeficientes, as√≠ como 0 se. Si una o varias columnas se quitan como redundantes, df se ve afectado porque df depende del n√∫mero de columnas X que se usan realmente para fines predictivos. Si df se cambia porque se quitan las columnas X redundantes, los valores de sey y F tambi√©n se ven afectados. La colinealidad debe ser relativamente rara en la pr√°ctica. Sin embargo, un caso en el que es m√°s probable que surja es cuando algunas columnas X contienen solo 0 y 1 como indicadores de si un sujeto de un experimento es o no miembro de un grupo determinado. Si const = <b>true</b> u omitido, <b>LinEst</b> inserta eficazmente una columna X adicional de todas las 1 para modelar la interceptaci√≥n. Si tiene una columna con un 1 para cada asunto si es var√≥n, o 0 si no, y tambi√©n tiene una columna con un 1 para cada asunto si es mujer, o 0 si no, esta √∫ltima columna es redundante porque las entradas en ella se pueden obtener al restar la entrada en la columna "indicador masculino" de la entrada de la columna adicional de todas las 1 agregadas por <b>LineEst</b>. </para>
          <para>df se calcula de la siguiente manera cuando no se quita ninguna columna X del modelo debido a la colinealidad: si hay columnas k de known_x y const = <b>true</b> u omitidas, df = n ‚Äì k ‚Äì 1. Si const = <b>false</b>, df = n - k. En ambos casos, cada columna X se quita debido a que la colinealidad aumenta en 1 el valor de df. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz. Cuando especifique como argumento una constante matricial, como valores conocidos de x, utilice comas para separar los valores de una misma fila y signos de punto y coma para separar las filas. Los caracteres separadores pueden ser diferentes seg√∫n la configuraci√≥n local definida en Configuraci√≥n regional y de idioma en el Panel de control. </para>
          <para>Tenga en cuenta que los valores de y previstos por la ecuaci√≥n de regresi√≥n puede que no sean v√°lidos si quedan fuera del rango de los valores de y utilizados para determinar la ecuaci√≥n. El algoritmo subyacente usado en la <b>funci√≥n LinEst</b> es diferente del algoritmo subyacente usado en las <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> funciones <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> and. La diferencia entre estos algoritmos puede producir resultados distintos cuando los datos son indeterminados y colineales. Por ejemplo, si los puntos de datos del argumento de valores conocidos de y son 0 y los puntos de datos del argumento de valores conocidos de x son 1: </para>
          <para>
            <b>LineEst</b> devuelve un valor de 0. El <b>algoritmo LinEst</b> est√° dise√±ado para devolver resultados razonables para los datos de colisi√≥n y, en este caso, se puede encontrar al menos una respuesta. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> devolver un #DIV/0! error. El algoritmo and est√° dise√±ado para buscar una sola respuesta y, en este caso, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> puede haber m√°s de una <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> respuesta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero real positivo cuyo logaritmo natural (neperiano) se desea obtener.</param>
        <summary>Devuelve el logaritmo natural (neperiano) de un n√∫mero. Los logaritmos naturales se basan en la constante e (2,71828182845904).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b> es la inversa de la funci√≥n EXP.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero real positivo cuyo logaritmo se desea obtener.</param>
        <param name="Arg2">Base: base del logaritmo. Si se omite la base, se presupone que es 10.</param>
        <summary>Devuelve el logaritmo de un n√∫mero en la base especificada.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero real positivo cuyo logaritmo en base 10 se desea obtener.</param>
        <summary>Devuelve el logaritmo en base 10 de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de valores de x opcionales que ya se conocen en la ecuaci√≥n y = b*m^x.</param>
        <param name="Arg3">Constante: valor l√≥gico que especifica si se ha de hacer que la constante b sea igual a 1.</param>
        <param name="Arg4">Estad√≠stica: valor l√≥gico que especifica si se van a devolver estad√≠sticas de regresi√≥n adicionales.</param>
        <summary>En el an√°lisis de regresi√≥n, calcula una curva exponencial que se adapta a los datos y devuelve una matriz de valores que describe la curva. Como esta funci√≥n devuelve una matriz de valores, debe especificarse como una f√≥rmula de matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>La ecuaci√≥n de la curva es la siguiente:</para>
          <para>y = b*m^x o</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (si hay varios valores x)</para>
          <para>donde el valor de y dependiente es una funci√≥n de los valores de x independientes. Los valores de m son bases que corresponden a cada valor de x exponencial y b es un valor constante. Tenga en cuenta que y, x y m pueden ser vectores. La matriz que <b>Devuelve LogEst</b> es {mn,mn-1,...,m1,b}.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y est√° en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>
				La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un rango de celdas compuesto por una fila o por una columna (lo que se conoce tambi√©n como vector).
</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>Si const es <b>true</b> u omitido, b se calcula normalmente.</para>
          <para>Si const es <b>false</b>, b se establece en 1 y los valores m se establecen en y = m^x.</para>
          <para>Si stats es <b>true,</b> <b>LogEst</b> devuelve las estad√≠sticas de regresi√≥n adicionales, por lo que la matriz devuelta es {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey; F,df;ssreg,ssresid}. </para>
          <para>Si las estad√≠sticas <b>son false</b> u omitidas, <b>LogEst</b> devuelve solo los coeficientes m y la constante b. </para>
          <para>Para obtener m√°s informaci√≥n acerca de las estad√≠sticas de regresi√≥n adicionales, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> .</para>
          <para>Cuanto m√°s se parezca el trazado de los datos a una curva exponencial, mejor se adaptar√° la l√≠nea calculada a los datos. Like <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> , <b>LogEst</b> devuelve una matriz de valores que describe una relaci√≥n entre los valores, pero que se ajusta <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> una l√≠nea recta a los datos; <b>LogEst se</b> ajusta a una curva exponencial. Para m√°s informaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Cuando solo tiene una variable x independiente, puede obtener valores de interceptaci√≥n y (b) directamente mediante la f√≥rmula siguiente: </para>
          <para>Interceptaci√≥n Y (b):</para>
          <para>
INDEX(LOGEST(known_y's,known_x's),2)</para>
          <para>Puede usar la ecuaci√≥n y = b*m^x para predecir los valores futuros de y, pero Microsoft Excel proporciona la funci√≥n para hacerlo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> por usted. Para m√°s informaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para>Cuando especifique como argumento una constante matricial, como valores conocidos de x, utilice comas para separar los valores de una misma fila y signos de punto y coma para separar las filas. Los caracteres separadores pueden ser diferentes seg√∫n la configuraci√≥n local definida en Configuraci√≥n regional y de idioma en el Panel de control.</para>
          <para>Tenga en cuenta que los valores de y previstos por la ecuaci√≥n de regresi√≥n puede que no sean v√°lidos si quedan fuera del rango de los valores de y utilizados para determinar la ecuaci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n logar√≠tmico-normal.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <summary>Utilice la distribuci√≥n logar√≠tmico- normal para analizar datos transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> m√©todo.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>LogInv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; = 0 o probabilidad &gt; = 1, <b>LogInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si standard_dev &lt; = 0, <b>LogInv</b> devuelve el #NUM! valor de error. </para>
          <para>La funci√≥n inversa de la distribuci√≥n logar√≠tmico-normal es:
				 </para>
          <para>Figura 1: Inversa de la funci√≥n de distribuci√≥n lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>LogNorm_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n logar√≠tmico-normal de x, donde ln(x) se distribuye normalmente con los par√°metros Media y Desv_est√°ndar. Use esta funci√≥n para analizar datos que han sido transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>LogNorm_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x ‚â§ 0 o si standard_dev ‚â§ 0, <b>LogNorm_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n logar√≠tmico-normal acumulativa es:  </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n logar√≠tmico-normal.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <summary>Devuelve la inversa de la funci√≥n de distribuci√≥n acumulativa logar√≠tmico-normal. Use la distribuci√≥n logar√≠tmico-normal para analizar datos transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>LogNorm_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probability &lt; = 0 o probability &gt; = 1, <b>LogNorm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si standard_dev &lt; = 0, <b>LogNorm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>La funci√≥n inversa de la distribuci√≥n logar√≠tmico-normal es:
				 </para>
          <para>Figura 1: Inversa de la funci√≥n de distribuci√≥n lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Media: la media de ln(x).</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de In(x).</param>
        <summary>Devuelve la distribuci√≥n logar√≠tmico-normal acumulativa de x, donde ln(x) se distribuye normalmente con la media y la desviaci√≥n est√°ndar. Utilice esta funci√≥n para analizar los datos transformados logar√≠tmicamente.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>LogNormDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x ‚â§ 0 o si standard_dev ‚â§ 0, <b>LogNormDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n logar√≠tmico-normal acumulativa es:  </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa lognormal</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value: valor que <b>busca Lookup</b> en el primer vector. El valor de b√∫squeda puede ser un n√∫mero, texto, un valor l√≥gico o un nombre o referencia a un valor.</param>
        <param name="Arg2">Vector_de_comparaci√≥n o matriz: en la forma factorial, rango que contiene solamente una fila o una columna. Los valores del vector_de_comparaci√≥n pueden ser texto, n√∫meros o valores l√≥gicos. En la forma matricial, rango de celdas que contiene texto, n√∫meros o valores l√≥gicos que desea comparar con el valor_buscado.</param>
        <param name="Arg3">Vector_resultante: s√≥lo se utiliza con la forma vectorial. Rango que contiene solamente una fila o columna. Debe tener el mismo tama√±o que el argumento de vector_de_comparaci√≥n.</param>
        <summary>Devuelve un valor de un rango de una fila o una columna o de una matriz. La funci√≥n LOOKUP tiene dos formas sint√°cticas: la forma vectorial y la forma matricial.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Buscar en un rango de una fila o una columna (llamado tambi√©n vector) un valor y devolver un valor desde la misma posici√≥n en un segundo rango de una fila o una columna</term>
              <description>Forma vectorial</description>
              <description>Utilice la forma vectorial cuando tenga una lista grande de valores en los que desea buscar o cuando los valores puedan cambiar con el tiempo.</description>
            </item>
            <item>
              <term>Buscar en la primera fila o columna de una matriz el valor especificado y devolver un valor desde la misma posici√≥n en la √∫ltima fila o columna de la matriz</term>
              <description>Forma matricial</description>
              <description>Utilice la forma matricial cuando tenga una lista peque√±a de valores y los valores permanezcan constantes a lo largo del tiempo.</description>
            </item>
          </list>
          <para>
            <b>Nota:</b>Tambi√©n puede usar la funci√≥n <b>Lookup</b> como alternativa a la funci√≥n IF para pruebas o pruebas elaboradas para m√°s de siete condiciones. Vea los ejemplos de la forma matricial.</para>
          <para>Forma vectorial</para>
          <para>Un vector es un rango formado √∫nicamente por una fila o una columna. La forma vectorial de <b>B√∫squeda</b> busca un valor en un intervalo de una fila o una columna (conocido como vector) y devuelve un valor de la misma posici√≥n en un segundo intervalo de una fila o una columna. Use este formulario de la <b>funci√≥n Lookup</b> cuando desee especificar el intervalo que contiene los valores que desea que coincidan. La otra forma de <b>b√∫squeda</b> busca autom√°ticamente en la primera columna o fila.</para>
          <para>
            <b>Importante</b>: Los valores de lookup_vector deben colocarse en orden ascendente: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; de lo <b>contrario, es</b> posible que B√∫squeda no d√© el valor correcto. Las may√∫sculas y min√∫sculas del texto son equivalentes.</para>
          <para>Si LOOKUP no puede encontrar el valor_buscado, busca una coincidencia con el valor mayor en el vector_de_comparaci√≥n que sea menor o igual al valor_buscado.</para>
          <para>Si lookup_value es menor que el valor m√°s peque√±o de lookup_vector, <b>Lookup</b> proporciona el valor de error #N/A.</para>
          <para>Formulario matricial</para>
          <para>La forma de matriz <b>de B√∫squeda</b> busca en la primera fila o columna de una matriz el valor especificado y devuelve un valor de la misma posici√≥n en la √∫ltima fila o columna de la matriz. Use esta forma de <b>b√∫squeda</b> cuando los valores que desee hacer coincidir se encuentran en la primera fila o columna de la matriz. Use la otra forma de <b>b√∫squeda</b> cuando desee especificar la ubicaci√≥n de la columna o fila.</para>
          <para>
            <b>Sugerencia:</b>En general, es mejor usar la funci√≥n or en lugar de la forma <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> de matriz de <b>B√∫squeda</b>. Esta forma de <b>b√∫squeda se</b> proporciona para la compatibilidad con otros programas de hoja de c√°lculo.</para>
          <para>Si <b>Lookup</b> no puede encontrar el lookup_value, usa el valor m√°s grande de la matriz que es menor o igual que lookup_value.</para>
          <para>Si lookup_value menor que el valor m√°s peque√±o de la primera fila o columna (seg√∫n las dimensiones de la matriz), <b>Lookup</b> devuelve el valor de error #N/A.</para>
          <para>La forma de matriz <b>de B√∫squeda</b> es muy similar a las <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> funciones <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> y. La diferencia es que las b√∫squedas lookup_value la primera fila, las b√∫squedas en la primera columna y las b√∫squedas de b√∫squeda seg√∫n las <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> dimensiones de la matriz. <b></b></para>
          <para>Si la matriz cubre un √°rea que es m√°s ancha que alta (m√°s columnas que filas), <b>B√∫squeda</b> busca lookup_value en la primera fila.</para>
          <para>Si la matriz es cuadrada o es m√°s alta que ancha (m√°s filas que columnas), <b>B√∫squeda</b> busca en la primera columna.</para>
          <para>Con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> y , puede <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> indizar hacia abajo o a trav√©s, pero <b>Lookup</b> siempre selecciona el √∫ltimo valor de la fila o columna.</para>
          <para>
            <b>Importante</b>: Los valores de la matriz deben colocarse en orden ascendente: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; de lo <b>contrario, es</b> posible que B√∫squeda no d√© el valor correcto. Texto en may√∫scula y min√∫scula son equivalentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor_buscado: el valor que se utiliza para buscar un valor en una tabla.</param>
        <param name="Arg2">Matriz_buscada: rango continuo de celdas que contienen posibles valores de b√∫squeda. El argumento de matriz_buscada debe ser una matriz o una referencia a una matriz.</param>
        <param name="Arg3">Tipo_de_coincidencia: el n√∫mero -1, 0 o 1. El tipo de coincidencia especifica c√≥mo Microsoft Excel compara el argumento de valor_b√∫squeda con los valores de la matriz_buscada.</param>
        <summary>Devuelve la posici√≥n relativa de un elemento en una matriz que coincida con un valor especificado en el orden indicado. Usa <b>Match</b> en lugar de una de las funciones cuando necesites la posici√≥n de un elemento en un intervalo en <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> lugar del propio elemento.</summary>
        <returns>To be added.</returns>
        <remarks><para>El argumento de valor_buscado es el valor para el que se desea encontrar una coincidencia en la matriz_buscada. Por ejemplo, al buscar el n√∫mero de una persona en un list√≠n telef√≥nico se utiliza el nombre de la persona como valor de b√∫squeda, pero el n√∫mero de tel√©fono es el valor que se desea obtener.</para>
          <para>El argumento de valor_buscado puede ser un valor (n√∫mero, texto o valor l√≥gico) o una referencia de celda a un n√∫mero, texto o valor l√≥gico.</para>
          <para>Si match_type es 1, <b>Match</b> busca el valor m√°s grande que sea menor o igual que lookup_value. Lookup_array debe colocarse en orden ascendente: ...-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>.</para>
          <para>Si match_type es 0, <b>Match</b> busca el primer valor que es exactamente igual a lookup_value. El argumento de matriz_buscada puede estar en cualquier orden.</para>
          <para>Si match_type es -1, <b>Match</b> busca el valor m√°s peque√±o que sea mayor o igual que lookup_value. Lookup_array debe colocarse en orden descendente: <b>true</b>, <b>false</b>, Z-A, ... 2, 1, 0, -1, -2, ..., etc. Si match_type se omite, se supone que es 1.</para>
          <para>
            <b>Match</b> devuelve la posici√≥n del valor coincidente dentro de lookup_array, no el valor en s√≠. Por ejemplo, MATCH("b",{"a","b","c"},0) devuelve 2, que es la posici√≥n relativa de "b" dentro de la matriz {"a","b","c"}. </para>
          <para>
            <b>Match</b> no distingue entre letras may√∫sculas y min√∫sculas al coincidir valores de texto. </para>
          <para>Si <b>Match</b> no encuentra una coincidencia, devuelve el #N/A de error. </para>
          <para>Si el argumento de tipo_de_coincidencia es 0 y el argumento de valor_buscado es texto, se pueden usar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*) en el argumento de valor_buscado. El signo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 n√∫meros para los que desea encontrar el valor m√°ximo.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el valor mayor de un conjunto de valores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si el argumento es una matriz o referencia, s√≥lo se utilizar√°n los n√∫meros de la matriz o de la referencia. Se omitir√°n las celdas vac√≠as, los valores l√≥gicos o el texto de la matriz o de la referencia.</para>
          <para>Si los argumentos no contienen n√∫meros, <b>Max</b> devuelve 0 (cero). </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si desea incluir valores l√≥gicos y representaciones de texto de n√∫meros en una referencia como parte del c√°lculo, use la <see cref="MAXA" /> funci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz num√©rica con el mismo n√∫mero de filas y columnas.</param>
        <summary>Devuelve el determinante matricial de una matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>La matriz se puede dar como un rango de celdas, por ejemplo, A1:C3; como una constante de matriz, como {1,2,3;4,5,6;7,8,9}; o como un nombre para cualquiera de estos. <b>MDeterm</b> devuelve el #VALUE! cuando: </para>
          <para>Alguna celda de la matriz est√° vac√≠a o contiene texto.</para>
          <para>La matriz no tiene el mismo n√∫mero de filas y columnas.</para>
          <para>El tama√±o de la matriz es mayor que 73 columnas por 73 filas.</para>
          <para>El determinante matricial es un n√∫mero obtenido de los valores de la matriz. Para una matriz de tres filas y tres columnas, A1:C3, el determinante se define como: 

</para>
          <code>MDETERM(A1:C3)</code>
          <para>Igual a</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Los determinantes de matriz se usan generalmente para resolver sistemas de ecuaciones matem√°ticas que implican varias variables. </para>
          <para>
            <b>MDeterm</b> se calcula con una precisi√≥n de aproximadamente 16 d√≠gitos, lo que puede provocar un peque√±o error num√©rico cuando el c√°lculo no se ha completado. Por ejemplo, el determinante de una matriz singular puede diferir de cero en 1E-16.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Cup√≥n: tasa de inter√©s nominal anual (inter√©s en los cupones) de un valor burs√°til.</param>
        <param name="Arg4">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg5">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la duraci√≥n modificada de Macauley de un valor burs√°til con un valor nominal supuesto de 100 $.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, como un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n, el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, frecuencia y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>MDuration</b> devuelve el #VALUE! valor de error. </para>
          <para>Si yld &lt; 0 o si el cup√≥n &lt; 0, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, <b>MDuration</b> devuelve el #NUM! valor de error. </para>
          <para>La duraci√≥n modificada se define del modo siguiente: 

 </para>
          <para>Figura 1: Ecuaci√≥n de duraci√≥n modificada</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya mediana se desea calcular.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la mediana de los n√∫meros especificados. La mediana es el n√∫mero central de un conjunto de n√∫meros.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si hay un n√∫mero par de n√∫meros en el conjunto, <b>Mediana</b> calcula el promedio de los dos n√∫meros en el medio. Vea la segunda f√≥rmula del ejemplo.</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>Nota:</b>La <b>funci√≥n Mediana</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres indicaciones de tendencia central m√°s comunes son las siguientes:</para>
          <list type="bullet">
            <item>
              <description>Promedio que es la media aritm√©tica y se calcula agregando un grupo de n√∫meros y dividiendo por el recuento de esos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es igual a 5. </description>
            </item>
            <item>
              <description>Mediana que es el n√∫mero medio de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores mayores que la mediana y la mitad de los n√∫meros tienen valores inferiores a la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4.</description>
            </item>
            <item>
              <description>Modo que es el n√∫mero que se produce con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, la moda de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 n√∫meros para los que desea encontrar el valor m√≠nimo.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el n√∫mero menor de un conjunto de valores.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si el argumento es una matriz o referencia, s√≥lo se utilizar√°n los n√∫meros de la matriz o de la referencia. Se omitir√°n las celdas vac√≠as, los valores l√≥gicos o el texto de la matriz o de la referencia.</para>
          <para>Si los argumentos no contienen n√∫meros, <b>Min</b> devuelve 0. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si desea incluir valores l√≥gicos y representaciones textuales de n√∫meros en una referencia como parte del c√°lculo, utilice la funci√≥n MINA.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz num√©rica con el mismo n√∫mero de filas y columnas.</param>
        <summary>Devuelve la matriz inversa de la matriz dentro de una matriz.</summary>
        <returns>To be added.</returns>
        <remarks><para>El tama√±o de la matriz no debe superar las 52 columnas por 52 filas. Si lo hace, la funci√≥n devuelve un #VALUE! error. </para>
          <para>La matriz puede especificarse como un rango de celdas (como A1:C3), como una constante matricial (como {1,2,3;4,5,6;7,8,9}) o como un nombre de un rango o una constante.</para>
          <para>Si alguna celda de la matriz est√° vac√≠a o contiene texto, <b>MInverse</b> devuelve el #VALUE! valor de error. </para>
          <para>
            <b>MInverse</b> tambi√©n devuelve el #VALUE! si la matriz no tiene el mismo n√∫mero de filas y columnas. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para>Las matrices inversas, como los determinantes, se suelen utilizar para resolver sistemas de ecuaciones matem√°ticas con varias variables. El producto de una matriz y su inversa es la matriz de identidad: la matriz cuadrada en la que los valores diagonales son 1 y todos los dem√°s valores son 0.</para>
          <para>Para ejemplificar el c√°lculo de una matriz de dos filas y dos columnas, supongamos que el rango A1:B2 contiene las letras a, b, c y d que representan cuatro n√∫meros cualesquiera. En la tabla siguiente se muestra la matriz inversa de la matriz A1:B2. 

</para>
          <list type="table">
            <item>
              <term>Fila 1</term>
              <description>d/(a *d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>Fila 2</term>
              <description>c/(b *c-a* d)</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> se calcula con una precisi√≥n de aproximadamente 16 d√≠gitos, lo que puede provocar un peque√±o error num√©rico cuando no se completa la cancelaci√≥n. </para>
          <para>Algunas matrices cuadradas no se pueden invertir y devuelven el valor de error # NUM! valor de error <b>con MInverse</b>. El determinante de una matriz que no se puede invertir es 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores: matriz o referencia a celdas que contienen n√∫meros. Estos n√∫meros representan una serie de pagos (valores negativos) o ingresos (valores positivos) realizados en per√≠odos constantes.</param>
        <param name="Arg2">Tasa_financiamiento: tasa de inter√©s que se paga del dinero utilizado en flujos de efectivo.</param>
        <param name="Arg3">Tasa_reinversi√≥n: tasa de inter√©s que se recibe de los flujos de efectivo a medida que se vuelven a invertir.</param>
        <summary>Devuelve la tasa interna de retorno modificada de una serie de flujos de efectivo peri√≥dicos. MIRR considera el costo de la inversi√≥n y el inter√©s recibido al volver a invertir el efectivo.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los valores deben contener al menos un valor positivo y un valor negativo para calcular la tasa interna modificada de devoluci√≥n. De lo <b>contrario, MIrr</b> devuelve el #DIV/0! valor de error. </para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>
            <b>MIrr</b> usa el orden de los valores para interpretar el orden de los flujos de efectivo. Aseg√∫rese de especificar valores de pago e ingresos en el orden en el que desee con los signos correctos (valores positivos para el efectivo recibido y valores negativos para el efectivo pagado). </para>
          <para>Si n es el n√∫mero de flujos de efectivo en valores, frate es el finance_rate y rrate es el reinvest_rate, la f√≥rmula de <b>MIrr</b> es: </para>
          <para>Figura 1: F√≥rmula para el m√©todo MIrr</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1, matriz2: las matrices que se desea multiplicar.</param>
        <param name="Arg2">Matriz1, matriz2: las matrices que se desea multiplicar.</param>
        <summary>Devuelve el producto matricial de dos matrices. El resultado es una matriz con el mismo n√∫mero de filas que matriz1 y el mismo n√∫mero de columnas que matriz2.</summary>
        <returns>To be added.</returns>
        <remarks><para>El n√∫mero de columnas de matriz1 debe ser el mismo que el n√∫mero de filas de matriz2, y ambas matrices s√≥lo deben contener n√∫meros.</para>
          <para>Matriz1 y matriz2 pueden especificarse como rangos de celdas, constantes matriciales o referencias.</para>
          <para>
            <b>MMult</b> devuelve el #VALUE! cuando: </para>
          <para>Alguna celda est√° vac√≠a o contiene texto.</para>
          <para>El n√∫mero de columnas de matriz1 es diferente del n√∫mero de filas de matriz2.</para>
          <para>El tama√±o de la matriz resultante es igual o mayor que un total de 5.461 celdas.</para>
          <para>La matriz de productos de matriz a de dos matrices b y c es: </para>
          <para>Figura1: Matriz de productos a de dos matrices b y c</para>
          <para> </para>
          <para> </para>
          <para>donde i es el n√∫mero de fila y j es el n√∫mero de columna.</para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya moda se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el valor que se repite con m√°s frecuencia en una matriz o rango de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> m√©todos y.</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si el conjunto de datos no contiene puntos de datos duplicados, <b>Mode</b> devuelve el valor de error #N/A.</para>
          <para>
            <b>Nota:</b>La <b>funci√≥n Mode</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres indicaciones de tendencia central m√°s comunes son las siguientes:</para>
          <list type="bullet">
            <item>
              <description>Promedio que es la media aritm√©tica y se calcula agregando un grupo de n√∫meros y dividiendo por el recuento de esos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es igual a 5. </description>
            </item>
            <item>
              <description>Mediana que es el n√∫mero medio de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores mayores que la mediana y la mitad de los n√∫meros tienen valores inferiores a la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4. </description>
            </item>
            <item>
              <description>Modo que es el n√∫mero que se produce con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, la moda de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1: primer argumento de n√∫mero para el que desea calcular el modo.</param>
        <param name="Arg2">N√∫mero 2, n√∫mero 30: de 2 a 30 argumentos cuya moda se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve una matriz vertical de los valores que se repiten con m√°s frecuencia en una matriz o rango de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si el conjunto de datos no contiene puntos de datos duplicados, <b>Mode_Mult</b> devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuya moda se desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el valor que se repite con m√°s frecuencia en una matriz o rango de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si el conjunto de datos no contiene puntos de datos duplicados, <b>Mode_Sngl</b> devuelve el valor de error #N/A.</para>
          <para>
            <b>Nota:</b>la <b>Mode_Sngl</b> mide la tendencia central, que es la ubicaci√≥n del centro de un grupo de n√∫meros en una distribuci√≥n estad√≠stica. Las tres indicaciones de tendencia central m√°s comunes son las siguientes:</para>
          <list type="bullet">
            <item>
              <description>Promedio La media aritm√©tica y se calcula agregando un grupo de n√∫meros y dividiendo por el recuento de esos n√∫meros. Por ejemplo, el promedio de 2, 3, 3, 5, 7 y 10 es 30 dividido por 6, que es igual a 5. </description>
            </item>
            <item>
              <description>Mediana El n√∫mero medio de un grupo de n√∫meros; es decir, la mitad de los n√∫meros tienen valores mayores que la mediana y la mitad de los n√∫meros tienen valores inferiores a la mediana. Por ejemplo, la mediana de 2, 3, 3, 5, 7 y 10 es 4. </description>
            </item>
            <item>
              <description>Modo El n√∫mero que se produce con m√°s frecuencia en un grupo de n√∫meros. Por ejemplo, la moda de 2, 3, 3, 5, 7 y 10 es 3.</description>
            </item>
          </list>
          <para>En el caso de una distribuci√≥n sim√©trica de un grupo de n√∫meros, estas tres mediciones de tendencia central son iguales. Si se usa una distribuci√≥n sesgada de un grupo de n√∫meros, las mediciones pueden ser distintas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <param name="Arg2">M√∫ltiplo: m√∫ltiplo al que se desea redondear el n√∫mero.</param>
        <summary>Devuelve un n√∫mero redondeado al m√∫ltiplo deseado.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound</b> redondea hacia arriba, lejos de cero, si el resto del n√∫mero de divisi√≥n por m√∫ltiplo es mayor o igual a la mitad del valor de multiple.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero1, n√∫mero2, ...: de 1 a 29 valores para los que desea calcular el polinomio.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve el cociente del factorial de una suma de valores con respecto al producto de factoriales.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>MultiNomial</b> devuelve el #VALUE! valor de error. </para>
          <para>Si cualquier argumento es menor que cero, <b>MultiNomial</b> devuelve el #NUM! valor de error. </para>
          <para>El polinomio es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo MultiNomial</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Entero que especifica la dimensi√≥n de la matriz de unidades que desea devolver.</param>
        <summary>Devuelve la matriz de unidades de la dimensi√≥n especificada.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_fracasos: el n√∫mero de fracasos.</param>
        <param name="Arg2">N√∫m_√©xitos: el n√∫mero m√°ximo de √©xitos.</param>
        <param name="Arg3">prob_√©xito: la probabilidad de un √©xito.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>NegBinom_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n binomial negativa. <b>NegBinom_Dist</b> devuelve la probabilidad de que number_f errores antes del number_s-th correcto, cuando la probabilidad constante de un √©xito es probability_s. Esta funci√≥n es similar a la distribuci√≥n binomial, excepto en que el n√∫mero de √©xitos es fijo y el n√∫mero de ensayos es variable. Como en la distribuci√≥n binomial, los ensayos se consideran independientes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Por ejemplo, supongamos que necesita encontrar 10 personas que dispongan de excelentes reflejos y sabe que la probabilidad de que un candidato tenga esta cualidad es 0,3. <b>NegBinom_Dist</b> calcula la probabilidad de entrevistar a un n√∫mero determinado de candidatos no calificados antes de encontrar a los 10 candidatos calificados: </para>
          <para>Los argumentos de n√∫m_fracasos y n√∫m_√©xitos se truncan a valores enteros.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>NegBinom_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probability_s &lt; 0 o si la probabilidad &gt; 1, <b>NegBinom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si number_f &lt; 0 o number_s &lt; 1, <b>NegBinom_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la distribuci√≥n binomial negativa es: </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n binomial negativa</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>x es number_f, r es number_s y p es probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫m_fracasos: el n√∫mero de fracasos.</param>
        <param name="Arg2">N√∫m_√©xitos: el n√∫mero m√°ximo de √©xitos.</param>
        <param name="Arg3">prob_√©xito: la probabilidad de un √©xito.</param>
        <summary>Devuelve la distribuci√≥n binomial negativa. NegBinomDist devuelve la probabilidad de que number_f haya errores antes del number_s-th correcto, cuando la probabilidad constante de un √©xito es probability_s. Esta funci√≥n es similar a la distribuci√≥n binomial, excepto en que el n√∫mero de √©xitos es fijo y el n√∫mero de ensayos es variable. Como en la distribuci√≥n binomial, los ensayos se consideran independientes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Por ejemplo, supongamos que necesita encontrar 10 personas que dispongan de excelentes reflejos y sabe que la probabilidad de que un candidato tenga esta cualidad es 0,3. <b>NegBinomDist</b> calcula la probabilidad de que entreviste a un n√∫mero determinado de candidatos no calificados antes de encontrar los 10 candidatos calificados. </para>
          <para>Los argumentos de n√∫m_fracasos y n√∫m_√©xitos se truncan a valores enteros.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>NegBinomDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probability_s &lt; 0 o si la probabilidad &gt; 1, <b>NegBinomDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si number_f &lt; 0 o number_s &lt; 1, <b>NegBinomDist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n de la distribuci√≥n binomial negativa es: </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n binomial negativa</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>x es number_f, r es number_s y p es probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial.</param>
        <param name="Arg2">Fecha_final: fecha que representa la fecha final.</param>
        <param name="Arg3">Festivos: rango opcional de una o varias fechas que deben excluirse del calendario laboral, como los d√≠as festivos nacionales y locales. La lista puede ser un rango de celdas que contengan fechas o una constante matricial de los n√∫meros de serie que representen las fechas.</param>
        <summary>Devuelve el n√∫mero de d√≠as laborables completos entre fecha_inicial y fecha_final. En los d√≠as laborables se excluyen los d√≠as de fin de semana y cualquier fecha identificada como d√≠a festivo. Use <b>NetworkDays</b> para calcular los beneficios de los empleados que se acumulan en funci√≥n del n√∫mero de d√≠as trabajados durante un t√©rmino espec√≠fico.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si alg√∫n argumento no es una fecha v√°lida, <b>NetworkDays</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date: la fecha de inicio para la que se va a calcular la diferencia. La fecha_inicial puede ser anterior, la misma o posterior a la fecha_final.</param>
        <param name="Arg2">End_date: la fecha de finalizaci√≥n para la que se va a calcular la diferencia. La fecha_inicial puede ser anterior, la misma o posterior a la fecha_final.</param>
        <param name="Arg3">Fin de semana: indica los d√≠as de la semana que son d√≠as de fin de semana y no se incluyen en el n√∫mero de d√≠as laborables completos entre start_date y end_date. Fin_de_semana es un n√∫mero de fin de semana o cadena que especifica cu√°ndo ocurren los fines de semana.</param>
        <param name="Arg4">D√≠as festivos: un conjunto opcional de una o m√°s fechas que se van a excluir del calendario del d√≠a laborable. Holidays es un rango de celdas que contienen las fechas o una constante de matriz de los valores en serie que representan esas fechas. El orden de fechas o valores de serie en d√≠as festivos puede ser arbitrario.</param>
        <summary>Devuelve el n√∫mero de todos los d√≠as laborables entre dos fechas mediante par√°metros para indicar cu√°les y cu√°ntos son d√≠as de fin de semana. Los d√≠as de fin de semana y los d√≠as que se especifiquen como d√≠as festivos no se consideran d√≠as laborables.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la fecha_inicial es posterior a la fecha_final, el valor devuelto ser√° negativo, y la magnitud ser√° el n√∫mero de todos los d√≠as laborales.</para>
          <para>Si start_date est√° fuera del intervalo para el valor base de fecha actual, <b>NetworkDays_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si end_date est√° fuera del intervalo para el valor base de fecha actual, <b>NetworkDays_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si una cadena de fin de semana es de longitud no v√°lida o contiene caracteres no v√°lidos, <b>NetworkDays_Intl</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa_efect: tasa de inter√©s efectiva.</param>
        <param name="Arg2">N√∫m_per_a√±o: n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</param>
        <summary>Devuelve la tasa nominal del inter√©s anual, si se conocen la tasa efectiva y el n√∫mero de per√≠odos de inter√©s compuesto por a√±o.</summary>
        <returns>To be added.</returns>
        <remarks><para>El argumento de n√∫m_per_a√±o se trunca a un valor entero.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>Nominal</b> devuelve el #VALUE! valor de error. </para>
          <para>Si effect_rate ‚â§ 0 o si npery &lt; 1, <b>Nominal</b> devuelve la #NUM! valor de error. </para>
          <para>
            <b>Nominal</b> est√° relacionado con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> como se muestra en la siguiente ecuaci√≥n: </para>
          <para>Figura 1: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular la distribuci√≥n.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>Norm_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false</b>, devuelve la funci√≥n de masa de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n normal para la media y la desviaci√≥n est√°ndar especificadas. Esta funci√≥n tiene un campo muy amplio de aplicaciones en estad√≠stica, incluidas las pruebas de hip√≥tesis.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si mean o standard_dev es nonum√©rico, <b>Norm_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si standard_dev ‚â§ 0, <b>Norm_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si mean = 0, standard_dev = 1, y cumulative = <b>true</b>, <b>Norm_Dist</b> devuelve la distribuci√≥n normal est√°ndar, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad normal (acumulativa = <b>false</b>) es: </para>
          <para>Figura 1: Ecuaci√≥n para la funci√≥n de densidad normal</para>
          <para> </para>
          <para> </para>
          <para>Cuando cumulative = <b>true</b>, la f√≥rmula es la integral de infinito negativo a x de la f√≥rmula determinada.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <summary>Devuelve el inverso de la distribuci√≥n acumulativa normal para la media y la desviaci√≥n est√°ndar especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no es num√©rico, <b>Norm_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; = 0 o si probabilidad &gt; = 1, <b>Norm_Inv</b> devuelve la #NUM! valor de error. </para>
          <para>Si standard_dev ‚â§ 0, <b>Norm_Inv</b> devuelve el #NUM! valor de error. </para>
          <para>Si mean = 0 y standard_dev = 1, <b>Norm_Inv</b> la distribuci√≥n normal est√°ndar (vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> ).</para>
          <para>Dado un valor de probabilidad, <b>Norm_Inv</b> busca ese valor x de forma que NORM_DIST(x, media, standard_dev, TRUE) = probabilidad. Por lo tanto, la <b>precisi√≥n Norm_Inv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z: valor para el que se desea calcular la distribuci√≥n.</param>
        <param name="Arg2">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>Norm_S_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false</b>, devuelve la funci√≥n de masa de probabilidad.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno. Puede usar esta funci√≥n en lugar de una tabla de √°reas curvas normales est√°ndar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si z no es num√©rico, <b>Norm_S_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>La ecuaci√≥n de la funci√≥n de densidad normal est√°ndar es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la funci√≥n de densidad normal est√°ndar</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <summary>Devuelve el inverso de la distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la probabilidad no es num√©rica, <b>Norm_S_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>Norm_S_Inv</b> devuelve la #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>Norm_S_Inv</b> busca ese valor z de forma que NORM_S_DIST(z) = probabilidad. Por lo tanto, la <b>precisi√≥n Norm_S_Inv</b>depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . <b>Norm_S_Inv</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor para el que se desea calcular la distribuci√≥n.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si el valor <b>acumulado es true,</b> <b>NormDist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false</b>, devuelve la funci√≥n de masa de probabilidad.</param>
        <summary>Devuelve la distribuci√≥n normal para la media y la desviaci√≥n est√°ndar especificadas. Esta funci√≥n tiene un gran variedad de aplicaciones en estad√≠stica, como la comprobaci√≥n de hip√≥tesis.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si mean o standard_dev es nonum√©rico, <b>NormDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si standard_dev ‚â§ 0, <b>NormDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si mean = 0, standard_dev = 1, y cumulative = <b>true</b>, <b>NormDist</b> devuelve la distribuci√≥n normal est√°ndar, <b>NormDist</b>. </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad normal (acumulativa = <b>false</b>) es: </para>
          <para>Figura 1: Ecuaci√≥n para la funci√≥n de densidad normal</para>
          <para> </para>
          <para> </para>
          <para>Cuando cumulative = <b>true</b>, la f√≥rmula es la integral de infinito negativo a x de la f√≥rmula determinada.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <summary>Devuelve el inverso de la distribuci√≥n acumulativa normal para la media y la desviaci√≥n est√°ndar especificadas.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> m√©todo.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>NormInv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>NormInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si standard_dev ‚â§ 0, <b>NormInv</b> devuelve el #NUM! valor de error. </para>
          <para>Si mean = 0 y standard_dev = 1, <b>NormInv</b> usa la distribuci√≥n normal est√°ndar (vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> ). </para>
          <para>Dado un valor de probabilidad, <b>NormInv</b> busca ese valor x de forma que NORMDIST(x, mean, standard_dev, TRUE) = probability. Por lo tanto, la precisi√≥n <b>de NormInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>NormInv usa</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z: valor para el que se desea calcular la distribuci√≥n.</param>
        <summary>Devuelve la funci√≥n de distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno. Puede usar esta funci√≥n en lugar de una tabla de √°reas curvas normales est√°ndar.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si z no esnum√©rico, <b>NormSDist</b> devuelve el #VALUE! valor de error. </para>
          <para>La ecuaci√≥n de la funci√≥n de densidad normal est√°ndar es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la funci√≥n de densidad normal est√°ndar</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad correspondiente a la distribuci√≥n normal.</param>
        <summary>Devuelve el inverso de la distribuci√≥n normal est√°ndar acumulativa. La distribuci√≥n tiene una media de 0 (cero) y una desviaci√≥n est√°ndar de uno.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> m√©todo.</para>
          <para>Si la probabilidad no esnum√©rica, <b>NormSInv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; = 0 o si probabilidad &gt; = 1, <b>NormSInv</b> devuelve el #NUM! valor de error.</para>
          <para>Dado un valor de probabilidad, <b>NormSInv</b> busca ese valor z de forma que NORMSDIST(z) = probabilidad. Por lo tanto, la precisi√≥n <b>de NormSInv</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Pago: pago efectuado cada per√≠odo y que no se puede cambiar durante la vigencia de la anualidad. Generalmente, el argumento de pago incluye el capital y el inter√©s pero ning√∫n otro arancel o impuesto.</param>
        <param name="Arg3">Va: valor actual o importe total de una serie de pagos futuros.</param>
        <param name="Arg4">Vf: valor futuro o un saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento de vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0).</param>
        <param name="Arg5">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <summary>Devuelve el n√∫mero de per√≠odos de una inversi√≥n en funci√≥n de los pagos peri√≥dicos constantes y de una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de descuento durante un per√≠odo.</param>
        <param name="Arg2">Valor1, valor2, ...: de 1 a 29 argumentos que representan los pagos y los ingresos.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula el valor neto presente de una inversi√≥n a partir de una tasa de descuento y una serie de pagos futuros (valores negativos) e ingresos (valores positivos).</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de valor1, valor2, etc., deben estar igualmente distribuidos en el tiempo y deben producirse al final de cada per√≠odo.</para>
          <para>
            <b>Npv</b> usa el orden de value1, value2, ... para interpretar el orden de los flujos de efectivo. Aseg√∫rese de escribir los valores de los pagos e ingresos en el orden correcto. </para>
          <para>Se tienen en cuenta los argumentos que son n√∫meros, celdas vac√≠as, valores l√≥gicos o representaciones textuales de n√∫meros; los argumentos que son valores de error o texto que no se convierten en n√∫meros se omiten.</para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se omiten las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>La <b>inversi√≥n Npv</b> comienza un per√≠odo antes de la fecha del flujo de efectivo value1 y termina con el √∫ltimo flujo de efectivo de la lista. El <b>c√°lculo de Npv</b> se basa en flujos de efectivo futuros. Si el primer flujo de efectivo se produce al principio del primer per√≠odo, el primer valor debe agregarse al resultado <b>Npv,</b> no incluido en los argumentos de valores. Para obtener m√°s informaci√≥n, vea los ejemplos a continuaci√≥n. </para>
          <para>Si n es el n√∫mero de flujos de efectivo en la lista de valores, la f√≥rmula de <b>Npv</b> es: </para>
          <para>Figura 1: F√≥rmula para el m√©todo Npv</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv</b> es similar a la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> funci√≥n (valor actual). La diferencia principal entre PV y <b>Npv</b> es que permite que los flujos de efectivo comiencen al final o al <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> principio del per√≠odo. A diferencia de los valores de flujo de efectivo <b>Npv</b> variables, los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> flujos de efectivo deben ser constantes durante toda la inversi√≥n. Para obtener informaci√≥n sobre anualidades y funciones financieras, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . </para>
          <para>
            <b>Npv</b> tambi√©n est√° relacionado con la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> funci√≥n (tasa interna de devoluci√≥n). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> es la tasa para la que <b>Npv</b> es igual a cero: NPV(IRR(...), ...) = 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cadena que representa el n√∫mero que desea convertir.</param>
        <param name="Arg2">Car√°cter usado como separador decimal en la cadena.</param>
        <param name="Arg3">Car√°cter usado como separador de grupo en la cadena.</param>
        <summary>Convierte texto en n√∫mero de forma independiente de la configuraci√≥n regional.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero octal que se desea convertir. El n√∫mero no puede contener m√°s de 10 d√≠gitos. El bit m√°s significativo del argumento de n√∫mero es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Oct2Bin</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero octal en binario.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el n√∫mero es negativo, <b>Oct2Bin</b> omite los lugares y devuelve un n√∫mero binario de 10 caracteres. </para>
          <para>Si el argumento de n√∫mero es negativo, no puede ser menor que 7777777000 y, si es positivo, no puede ser mayor que 777.</para>
          <para>Si number no es un n√∫mero octal v√°lido, <b>Oct2Bin</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Oct2Bin requiere</b> m√°s de caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Oct2Bin</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es negativo, <b>Oct2Bin</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero octal que se desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres octales (30 bits). El bit m√°s significativo del argumento de n√∫mero es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <summary>Convierte un n√∫mero octal en decimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number no es un n√∫mero octal v√°lido, <b>Oct2Dec</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero octal que se desea convertir. El n√∫mero no puede contener m√°s de 10 caracteres octales (30 bits). El bit m√°s significativo del argumento de n√∫mero es el bit de signo. Los 29 bits restantes son bits de magnitud. Los n√∫meros negativos se representan usando la notaci√≥n complementaria de 2.</param>
        <param name="Arg2">Caracteres: n√∫mero de caracteres que se deben utilizar. Si se omiten los lugares, <b>Oct2Hex</b> usa el n√∫mero m√≠nimo de caracteres necesarios. Especificar el n√∫mero de caracteres es √∫til para completar el valor devuelto con ceros a la izquierda.</param>
        <summary>Convierte un n√∫mero octal en hexadecimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el n√∫mero es negativo, <b>Oct2Hex</b> omite los lugares y devuelve un n√∫mero hexadecimal de 10 caracteres. </para>
          <para>Si number no es un n√∫mero octal v√°lido, <b>Oct2Hex</b> devuelve el #NUM! valor de error. </para>
          <para>Si <b>Oct2Hex requiere</b> m√°s de caracteres, devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de caracteres no es un n√∫mero entero, se trunca.</para>
          <para>Si places no esnum√©rico, <b>Oct2Hex</b> devuelve el #VALUE! valor de error. </para>
          <para>Si places es negativo, <b>Oct2Hex</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: valor que se desea redondear.</param>
        <summary>Devuelve un n√∫mero redondeado hacia arriba hasta el pr√≥ximo entero impar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si n√∫mero no esnum√©rico, <b>Impar</b> devuelve el #VALUE! valor de error. </para>
          <para>Independientemente del signo del n√∫mero, los valores se redondean hacia arriba. Si el argumento de n√∫mero es un entero impar, no se redondea.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg4">Primer_cup√≥n: fecha del primer cup√≥n del valor burs√°til.</param>
        <param name="Arg5">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg6">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg7">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg8">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg9">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio de un valor nominal de 100 $ de un valor burs√°til con un per√≠odo inicial impar (largo o corto).</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n, primer_cup√≥n y base se truncan a enteros.</para>
          <para>Si liquidaci√≥n, vencimiento, problema o first_coupon no es una fecha v√°lida, <b>OddFPrice</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la &lt; tasa 0 o si yld &lt; 0, <b>OddFPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>OddFPrice</b> devuelve el #NUM! valor de error. </para>
          <para>La siguiente condici√≥n de fecha debe cumplirse; de lo contrario, <b>OddFPrice</b> devuelve el #NUM! valor de error: </para>
          <para>vencimiento first_coupon &gt; de &gt; &gt; liquidaci√≥n</para>
          <para> </para>
          <para>
            <b>OddFPrice se</b> calcula de la siguiente manera: Primer cup√≥n corto impar:</para>
          <para>Figura 1: Primer cup√≥n corto impar</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>A = n√∫mero de d√≠as desde el principio del per√≠odo de cup√≥n hasta la fecha de liquidaci√≥n (d√≠as acumulados).</para>
          <para>DSC = n√∫mero de d√≠as desde la liquidaci√≥n hasta la siguiente fecha de cup√≥n.</para>
          <para>DFC = n√∫mero de d√≠as desde el principio del primer cup√≥n impar hasta la primera fecha del cup√≥n.</para>
          <para>E = n√∫mero de d√≠as en el per√≠odo de cup√≥n.</para>
          <para>N = n√∫mero de cupones pagaderos entre la fecha de liquidaci√≥n y la fecha de canje. (Si este n√∫mero contiene una fracci√≥n, se eleva al siguiente n√∫mero entero).</para>
          <para>Primer cup√≥n largo impar:</para>
          <para>Figura 2: Primer cup√≥n largo impar</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>Ai = n√∫mero de d√≠as desde el comienzo del per√≠odo cuasi-cup√≥n de ith, o √∫ltimo, dentro del per√≠odo impar.</para>
          <para>DCi = n√∫mero de d√≠as desde la fecha de fecha (o fecha de emisi√≥n) hasta el primer cuasi-cup√≥n (i = 1) o el n√∫mero de d√≠as en cuasi-cup√≥n (i = 2,..., i = NC).</para>
          <para>DSC = n√∫mero de d√≠as desde la liquidaci√≥n hasta la siguiente fecha de cup√≥n.</para>
          <para>E = n√∫mero de d√≠as en el per√≠odo de cup√≥n.</para>
          <para>N = n√∫mero de cupones pagaderos entre la primera fecha de cup√≥n real y la fecha de canje. (Si este n√∫mero contiene una fracci√≥n, se eleva al siguiente n√∫mero entero).</para>
          <para>NC = n√∫mero de per√≠odos cuasi-cup√≥n que caben en un per√≠odo impar. (Si este n√∫mero contiene una fracci√≥n, se eleva al siguiente n√∫mero entero).</para>
          <para>NLi = longitud normal en d√≠as del per√≠odo de ith completo, o √∫ltimo, cuasi-cup√≥n dentro del per√≠odo impar.</para>
          <para>Nq = n√∫mero de per√≠odos cuasi-cup√≥n completos entre la fecha de liquidaci√≥n y el primer cup√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg4">Primer_cup√≥n: fecha del primer cup√≥n del valor burs√°til.</param>
        <param name="Arg5">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg6">Pr: precio del valor burs√°til.</param>
        <param name="Arg7">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg8">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg9">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento de un valor burs√°til con un primer per√≠odo impar (corto o largo).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n, primer_cup√≥n y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n, vencimiento, problema o first_coupon no es una fecha v√°lida, <b>OddFYield</b> devuelve el #VALUE. valor de error. </para>
          <para>Si la &lt; tasa 0 o si pr ‚â§ 0, <b>OddFYield</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>OddFYield</b> devuelve el #NUM! valor de error. </para>
          <para>La siguiente condici√≥n de fecha debe cumplirse; de lo <b>contrario, OddFYield</b> devuelve el #NUM! valor de error: </para>
          <para>vencimiento first_coupon &gt; de &gt; &gt; liquidaci√≥n</para>
          <para>Excel usa una t√©cnica iterativa para calcular <b>OddFYield</b>. Esta funci√≥n usa el m√©todo Newton bas√°ndose en la f√≥rmula usada para la funci√≥n <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . El rendimiento va cambiando en las 100 iteraciones hasta que el precio estimado con el rendimiento especificado se aproxima al precio. Consulta <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> la f√≥rmula que usa <b>OddFYield.</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">√öltimo_inter√©s: fecha del √∫ltimo cup√≥n del valor burs√°til.</param>
        <param name="Arg4">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg5">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg6">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg7">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg8">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio de un valor nominal de 100 $ de un valor burs√°til con un per√≠odo de cup√≥n final impar (largo o corto).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, √∫ltimo_inter√©s y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n, el vencimiento o last_interest no es una fecha v√°lida, <b>OddLPrice</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la &lt; tasa es 0 o si yld &lt; 0, <b>OddLPrice</b> devuelve la #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>OddLPrice</b> devuelve el #NUM! valor de error. </para>
          <para>La siguiente condici√≥n de fecha debe cumplirse; de lo contrario, <b>OddLPrice</b> devuelve el #NUM! valor de error: </para>
          <para>liquidaci√≥n &gt; de &gt; vencimiento last_interest</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">√öltimo_inter√©s: fecha del √∫ltimo cup√≥n del valor burs√°til.</param>
        <param name="Arg4">Tasa: tasa de inter√©s del valor burs√°til.</param>
        <param name="Arg5">Pr: precio del valor burs√°til.</param>
        <param name="Arg6">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg7">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg8">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento de un valor burs√°til con un √∫ltimo per√≠odo impar (corto o largo).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, √∫ltimo_inter√©s y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n, el vencimiento o last_interest no es una fecha v√°lida, <b>OddLYield</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la &lt; tasa 0 o si pr ‚â§ 0, <b>OddLYield</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>OddLYield</b> devuelve el #NUM! valor de error. </para>
          <para>La siguiente condici√≥n de fecha debe cumplirse; de lo <b>contrario, OddLYield</b> devuelve el #NUM! valor de error: </para>
          <para>liquidaci√≥n &gt; de &gt; vencimiento last_interest </para>
          <para>
            <b>OddLYield</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo OddLYield</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>Ai = n√∫mero de d√≠as acumulados para el per√≠odo cuasi-cup√≥n de ith, o √∫ltimo, dentro del per√≠odo impar contando hacia delante desde la √∫ltima fecha de inter√©s antes del canje.</para>
          <para>DCi = n√∫mero de d√≠as contados en el per√≠odo cuasi-cup√≥n de ith o √∫ltimo, delimitado por la longitud del per√≠odo de cup√≥n real.</para>
          <para>NC = n√∫mero de per√≠odos cuasi-cup√≥n que caben en un per√≠odo impar; si este n√∫mero contiene una fracci√≥n, se elevar√° al siguiente n√∫mero entero.</para>
          <para>NLi = longitud normal en d√≠as del per√≠odo de cuasi cup√≥n de ith, o √∫ltimo, dentro del per√≠odo de cup√≥n impar.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1,logical2,... - 1 a 30 condiciones que desea probar que pueden ser <b>true</b> o <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve <b>true</b> si cualquier argumento es <b>true</b>; devuelve <b>false</b> si todos los argumentos son <b>false</b>.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben evaluarse en valores l√≥gicos como <b>true</b> o <b>false,</b>o en matrices o referencias que contienen valores l√≥gicos. </para>
          <para>Si un argumento de matriz o referencia contiene texto o celdas vac√≠as, esos valores se omiten.</para>
          <para>Si el intervalo especificado no contiene valores l√≥gicos, <b>O</b> devuelve la #VALUE! valor de error. </para>
          <para>Puede usar una f√≥rmula <b>de matriz Or</b> para ver si se produce un valor en una matriz. Para escribir una f√≥rmula de matriz, presione CTRL + MAY√öS + ENTRAR.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve el objeto primario para el objeto especificado. Solo lectura.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Valor actual de la inversi√≥n.</param>
        <param name="Arg3">Valor futuro deseado de la inversi√≥n.</param>
        <summary>Devuelve el n√∫mero de per√≠odos requeridos por una inversi√≥n para alcanzar un valor especificado.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz1: conjunto de valores independientes.</param>
        <param name="Arg2">Matriz2: conjunto de valores dependientes.</param>
        <summary>Devuelve el coeficiente de correlaci√≥n producto momento de Pearson, r, que es un √≠ndice sin dimensiones que abarca desde -1,0 a 1,0, inclusive y refleja la extensi√≥n de una relaci√≥n lineal entre dos conjuntos de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices, constantes o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se omiten; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si matriz1 y matriz2 est√°n vac√≠as o tienen un n√∫mero diferente de puntos de datos, <b>Pearson</b> devuelve el valor de error #N/A. </para>
          <para>La f√≥rmula para el coeficiente de correlaci√≥n del momento del producto de Pearson, r, es: </para>
          <para>Figura 1: Coeficiente de correlaci√≥n del momento del producto de Pearson</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son el ejemplo significa AVERAGE(array1) y AVERAGE(array2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos que define la posici√≥n relativa.</param>
        <param name="Arg2">K: valor de percentil en el rango 0..1, inclusive.</param>
        <summary>Devuelve el percentil k-√©simo de los valores de un rango. Puede utilizar esta funci√≥n para establecer un umbral de valores aceptables. Por ejemplo, puede decidir examinar a candidatos con una puntuaci√≥n superior al nonag√©simo percentil.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> m√©todo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> and. </para>
          <para>Si la matriz est√° vac√≠a, <b>Percentile</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no esnum√©rico, <b>Percentile</b> devuelve el #VALUE! valor de error. </para>
          <para>Si k es &lt; 0 o si k &gt; 1, <b>Percentile</b> devuelve la #NUM! valor de error. </para>
          <para>Si k no es un m√∫ltiplo de 1/(n - 1), <b>Percentile</b> interpola para determinar el valor en el percentil k-th.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos que define la posici√≥n relativa.</param>
        <param name="Arg2">K: el valor percentil del intervalo 0,.1, exclusivo.</param>
        <summary>Devuelve el k-√©simo percentil de los valores en un rango, donde k est√° en el rango de 0 a 1, ambos no incluidos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, Percentile_Exc</b> devuelve el #NUM! valor de error </para>
          <para>Si k no esnum√©rico, <b>Percentile_Exc</b> devuelve el #VALUE! valor de error. </para>
          <para>Si k es ‚â§ 0 o si k ‚â• 1, <b>Percentile_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un m√∫ltiplo de <b></b> 1/(n - 1), Percentile_Exc interpola para determinar el valor en el percentil k-th. </para>
          <para>
            <b>Percentile_Exc</b> interpolar√° cuando el valor del percentil especificado se encuentra entre dos valores de la matriz. Si no puede interpolar para el percentil, k especificado, Excel devolver√° #NUM! error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos que define la posici√≥n relativa.</param>
        <param name="Arg2">K: valor de percentil en el rango de 0 a 1, ambos incluidos.</param>
        <summary>Devuelve el k-√©simo percentil de los valores de un rango. Esta funci√≥n permite establecer un umbral de aceptaci√≥n. Por ejemplo, podr√° examinar a los candidatos cuya calificaci√≥n sea superior al nonag√©simo percentil.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, Percentile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no esnum√©rico, <b>Percentile_Inc</b> devuelve el #VALUE! valor de error. </para>
          <para>Si k es &lt; 0 o si k &gt; 1, <b>Percentile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si k no es un m√∫ltiplo de <b></b> 1/(n - 1), Percentile_Inc interpola para determinar el valor en el percentil k-th.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos con valores num√©rico que define la posici√≥n relativa.</param>
        <param name="Arg2">X: valor cuya clasificaci√≥n desea conocer.</param>
        <param name="Arg3">Cifra_significativa: valor opcional que identifica el n√∫mero de d√≠gitos significativos del valor de porcentaje devuelvo. Si se omite, <b>PercentRank</b> usa tres d√≠gitos (0.xxx).</param>
        <summary>Devuelve la clasificaci√≥n de un valor en un conjunto de datos como porcentaje del conjunto. Esta funci√≥n se puede utilizar para obtener la posici√≥n relativa de un valor dentro de un conjunto de datos. Por ejemplo, puede usar <b>PercentRank</b> para evaluar la posici√≥n de una puntuaci√≥n de prueba de aptitud entre todas las puntuaciones de la prueba.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> m√©todos y.</para>
          <para>Si la matriz est√° vac√≠a, <b>PercentRank</b> devuelve el #NUM! valor de error. </para>
          <para>Si significa &lt; 1, <b>PercentRank</b> devuelve el #NUM! valor de error. </para>
          <para>Si x no coincide con uno de los valores de la matriz, <b>PercentRank</b> interpola para devolver la clasificaci√≥n de porcentaje correcta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos con valores num√©rico que define la posici√≥n relativa.</param>
        <param name="Arg2">X: valor cuya clasificaci√≥n desea conocer.</param>
        <param name="Arg3">Importancia: valor que identifica el n√∫mero de d√≠gitos significativos para el valor porcentual devuelto. Si se omite, <b>PercentRank_Exc</b> tres d√≠gitos (0.xxx).</param>
        <summary>Devuelve el rango de un valor en un conjunto de datos como un porcentaje (de 0 a 1 exclusive) del conjunto de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, PercentRank_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si significa &lt; 1, <b>PercentRank_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si x no coincide con uno de los valores de <b>la matriz, PercentRank_Exc</b> interpola para devolver la clasificaci√≥n de porcentaje correcta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos con valores num√©rico que define la posici√≥n relativa.</param>
        <param name="Arg2">X: valor cuya clasificaci√≥n desea conocer.</param>
        <param name="Arg3">Cifra_significativa: valor opcional que identifica el n√∫mero de cifras significativas para el valor de porcentaje devuelto. Si se omite, <b>PercentRank_Inc</b> tres d√≠gitos (0.xxx).</param>
        <summary>Devuelve la clasificaci√≥n de un valor en un conjunto de datos como porcentaje (de 0 a 1, ambos incluidos) del conjunto. Esta funci√≥n se puede usar para obtener la posici√≥n relativa de un valor dentro de un conjunto de datos. Por ejemplo, puede usar <b>PercentRank_Inc</b> para evaluar la posici√≥n de una puntuaci√≥n de prueba de aptitud entre todas las puntuaciones de la prueba.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, PercentRank_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si significa &lt; 1, <b>PercentRank_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si x no coincide con uno de los valores de la <b>matriz, PercentRank_Inc</b> interpola para devolver la clasificaci√≥n porcentual correcta.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: entero que describe el n√∫mero de objetos.</param>
        <param name="Arg2">Tama√±o: entero que describe el n√∫mero de objetos en cada permutaci√≥n.</param>
        <summary>Devuelve el n√∫mero de permutaciones para un n√∫mero determinado de objetos que pueden ser seleccionados de los objetos de n√∫mero. Una permutaci√≥n es un conjunto o subconjunto de objetos o eventos cuyo orden interno es importante. Las permutaciones difieren de las combinaciones, ya que en √©stas √∫ltimas el orden interno no es importante. Utilice esta funci√≥n para c√°lculos de probabilidad como la loter√≠a.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ambos argumentos se truncan a n√∫meros enteros.</para>
          <para>Si number o number_chosen es nonum√©rico, <b>Permut</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el ‚â§ 0 o si number_chosen &lt; 0, <b>Permut</b> devuelve el #NUM! valor de error. </para>
          <para>Si el &lt; number_chosen n√∫mero, <b>Permut</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n del n√∫mero de permutaciones es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para el n√∫mero de permutaciones</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero total de objetos.</param>
        <param name="Arg2">N√∫mero de objetos en cada permutaci√≥n.</param>
        <summary>Devuelve el n√∫mero de permutaciones de un n√∫mero determinado de objetos (con repeticiones) que se pueden seleccionar de los objetos totales.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero para el que desea la densidad de la distribuci√≥n normal est√°ndar.</param>
        <summary>Devuelve el valor de la funci√≥n de densidad de una distribuci√≥n normal est√°ndar.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referencia: cadena de texto o referencia a una √∫nica celda o un rango de celdas que contienen una cadena de texto furigana.</param>
        <summary>Extrae los caracteres fon√©ticos (furigana) de una cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la referencia es un rango de celdas, se devuelve la cadena de texto furigana situada en la celda de la esquina superior izquierda del rango. </para>
          <para>Si la referencia es un rango de celdas no adyacentes, se devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el n√∫mero 3,14159265358979, la constante matem√°tica pi, con una precisi√≥n de 15 d√≠gitos.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s del pr√©stamo.</param>
        <param name="Arg2">Nper: n√∫mero total de pagos del pr√©stamo.</param>
        <param name="Arg3">Va: valor actual o cantidad total que tiene en la actualidad una serie de pagos futuros; se conoce tambi√©n como el capital.</param>
        <param name="Arg4">Vf: valor futuro o saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento vf se omite, se supone que el valor es 0 (cero), es decir, el valor futuro de un pr√©stamo es 0.</param>
        <param name="Arg5">Tipo: n√∫mero 0 (cero) o 1 que indica el vencimiento de los pagos.</param>
        <summary>Calcula el pago de un pr√©stamo basado en pagos y una tasa de inter√©s constantes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obtener una descripci√≥n m√°s completa de los argumentos de <b>Pmt,</b>vea la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> funci√≥n.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>El pago devuelto por <b>Pmt</b> incluye entidades de seguridad e intereses, pero no impuestos, pagos de reserva o tasas asociadas a veces con pr√©stamos. </para>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con una tasa de inter√©s anual del 12 por ciento, use 12%/12 para el argumento de tasa y 4*12 para el argumento de n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: n√∫mero de eventos.</param>
        <param name="Arg2">Media: valor num√©rico previsto.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la distribuci√≥n de probabilidad devuelta. Si el argumento de acumulado es TRUE, POISSON devuelve la probabilidad acumulativa de Poisson de que el n√∫mero de eventos aleatorios producidos est√© entre cero y x, inclusive. Si es FALSE, devuelve la funci√≥n de probabilidad bruta de Poisson de que el n√∫mero de eventos producidos sea exactamente x.</param>
        <summary>Devuelve la distribuci√≥n de Poisson. Una aplicaci√≥n com√∫n de la distribuci√≥n de Poisson es prever el n√∫mero de eventos durante un per√≠odo de tiempo espec√≠fico, como los autom√≥viles que llegan a un peaje en un minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si el argumento de x no es un entero, se trunca.</para>
          <para>Si x o mean no sonnum√©ricos, <b>Poisson</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Poisson</b> devuelve el #NUM! valor de error. </para>
          <para>Si significa ‚â§ 0, <b>Poisson</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>Poisson</b> se calcula de la siguiente manera. </para>
          <para>Para cumulative = <b>false</b>:</para>
          <para>Figura 1: Calcuation cuando el acumulado es false</para>
          <para> </para>
          <para> </para>
          <para>For cumulative = <b>true</b>:</para>
          <para>Figura 2: Calcuation when cumulative is true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: n√∫mero de eventos.</param>
        <param name="Arg2">Media: valor num√©rico previsto.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la distribuci√≥n de probabilidad devuelta. Si el valor acumulado es <b>true,</b> <b>Poisson_Dist</b> devuelve la probabilidad acumulada de Poisson de que el n√∫mero de eventos aleatorios que se produzcan sea entre 0 (cero) y x inclusive; si <b>es false</b>, devuelve la funci√≥n de masa de probabilidad de Poisson de que el n√∫mero de eventos que se produzcan ser√° exactamente x.</param>
        <summary>Devuelve la distribuci√≥n de Poisson. Una de las aplicaciones comunes de la distribuci√≥n de Poisson es la predicci√≥n del n√∫mero de eventos en un determinado per√≠odo de tiempo, como por ejemplo, el n√∫mero de autom√≥viles que se presenta a una zona de peaje en el intervalo de un minuto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el argumento de x no es un entero, se trunca.</para>
          <para>Si x o mean no esnum√©rico, <b>Poisson_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Poisson_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â§ 0, <b>Poisson_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>Poisson_Dist</b> se calcula de la siguiente manera. </para>
          <para>Para cumulative = <b>false</b>:</para>
          <para>Figura 1: Calcuation cuando el acumulado es false</para>
          <para> </para>
          <para> </para>
          <para>For cumulative = <b>true</b>:</para>
          <para>Figura 2: Calcuation when cumulative is true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero base. Puede ser cualquier n√∫mero real.</param>
        <param name="Arg2">Potencia: exponente al que desea elevar el n√∫mero base.</param>
        <summary>Devuelve el resultado de elevar un n√∫mero a una potencia.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo.</param>
        <param name="Arg2">Per√≠odo: el per√≠odo, que debe encontrarse en el rango comprendido entre 1 y nper.</param>
        <param name="Arg3">N√∫mero de per√≠odos: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg4">Va: cantidad total que tiene en la actualidad una serie de pagos futuros.</param>
        <param name="Arg5">Vf: valor futuro o saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento vf se omite, se supone que el valor es 0 (cero), es decir, el valor futuro de un pr√©stamo es 0.</param>
        <param name="Arg6">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <summary>Devuelve el pago del capital en un determinado per√≠odo de una inversi√≥n, basado en pagos constantes peri√≥dicos y una tasa de inter√©s constante.</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obtener una descripci√≥n m√°s completa de los argumentos de <b>Ppmt</b>, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Tasa: tasa de inter√©s nominal anual de un valor burs√°til.</param>
        <param name="Arg4">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg5">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg6">Frecuencia: n√∫mero de pagos contra presentaci√≥n del cup√≥n por a√±o. Para pagos anuales, la frecuencia es igual a 1; para pagos semestrales, la frecuencia es igual a 2; en caso de pagos trimestrales, la frecuencia es 4.</param>
        <param name="Arg7">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de un valor burs√°til que paga una tasa de inter√©s peri√≥dica.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, frecuencia y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>Price</b> devuelve el #VALUE! valor de error. </para>
          <para>Si yld &lt; 0 o si la &lt; tasa 0, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si el ‚â§ 0, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si la frecuencia es cualquier n√∫mero distinto de 1, 2 o 4, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>Price</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, <b>Price</b> devuelve el #NUM! valor de error. <b>El</b> precio se calcula de la siguiente manera: </para>
          <para>Figura 1: M√©todo Ecuaci√≥n para precio</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>DSC = n√∫mero de d√≠as desde la liquidaci√≥n hasta la siguiente fecha de cup√≥n.</para>
          <para>E = n√∫mero de d√≠as en el per√≠odo de cup√≥n en el que cae la fecha de liquidaci√≥n.</para>
          <para>N = n√∫mero de cupones pagaderos entre la fecha de liquidaci√≥n y la fecha de canje.</para>
          <para>A = n√∫mero de d√≠as desde el comienzo del per√≠odo de cup√≥n hasta la fecha de liquidaci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Descuento: tasa de descuento del valor burs√°til.</param>
        <param name="Arg4">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de un valor burs√°til con descuento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>PriceDisc</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el ‚â§ 0 o si el ‚â§ 0, <b>PriceDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>PriceDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la liquidaci√≥n ‚â• vencimiento, <b>PriceDisc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>PriceDisc</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo PriceDisc</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en el a√±o, seg√∫n la base del a√±o.</para>
          <para>DSM = n√∫mero de d√≠as desde la liquidaci√≥n hasta el vencimiento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til, expresada como n√∫mero de serie.</param>
        <param name="Arg4">Tasa: tasa de inter√©s en la fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg5">Rdto: rendimiento anual del valor burs√°til.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de un valor burs√°til que genera intereses al vencimiento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n, el vencimiento o el problema no es una fecha v√°lida, <b>PriceMat</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la &lt; tasa 0 o si yld &lt; 0, <b>PriceMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>PriceMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, <b>PriceMat</b> devuelve el #NUM! valor de error. <b>PriceMat</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo PriceMat</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en el a√±o, seg√∫n la base del a√±o.</para>
          <para>DSM = n√∫mero de d√≠as desde la liquidaci√≥n hasta el vencimiento.</para>
          <para>DIM = n√∫mero de d√≠as desde el problema hasta el vencimiento.</para>
          <para>A = n√∫mero de d√≠as desde el problema hasta la liquidaci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango_x: rango de valores num√©ricos de x con el que hay probabilidades asociadas.</param>
        <param name="Arg2">Rango_probabilidad: conjunto de probabilidades asociado a valores del rango_x.</param>
        <param name="Arg3">L√≠mite_inf: l√≠mite inferior del valor para el que se desea obtener una probabilidad.</param>
        <param name="Arg4">L√≠mite_sup: l√≠mite superior opcional del valor para el que se desea obtener una probabilidad.</param>
        <summary>Devuelve la probabilidad de que los valores de un rango se encuentren entre dos l√≠mites. Si no se especifica el argumento de l√≠mite_sup, se devuelve la probabilidad de que los valores del argumento de rango_x sean iguales al argumento de l√≠mite_inf.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si hay alg√∫n valor en prob_range ‚â§ 0 o si hay alg√∫n valor en prob_range &gt; 1, <b>Prob</b> devuelve el #NUM! valor de error. </para>
          <para>Si la suma de los valores de prob_range ¬π 1, <b>Prob</b> devuelve el #NUM! valor de error. </para>
          <para>Si upper_limit se omite, <b>Prob</b> devuelve la probabilidad de ser igual a lower_limit. </para>
          <para>Si x_range y prob_range contienen un n√∫mero diferente de puntos de datos, <b>Prob</b> devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos que desea multiplicar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplica todos los n√∫meros especificados como argumentos y devuelve el producto.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se tienen en cuenta los argumentos que son n√∫meros, valores l√≥gicos o representaciones textuales de n√∫meros; los argumentos que son valores de error o texto que no se convierten en n√∫meros causan un error. </para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se omiten las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto incluido entre comillas, una f√≥rmula que devuelve texto o una referencia a una celda que contiene el texto que desea convertir parcialmente a may√∫sculas.</param>
        <summary>Pone en may√∫sculas la primera letra de una cadena de texto y cualquier otra letra del texto que aparezca detr√°s de un car√°cter distinto de una letra. Convierte todas las dem√°s letras a letras min√∫sculas.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tasa: tasa de inter√©s por per√≠odo. Por ejemplo, si obtiene un pr√©stamo para la compra de un autom√≥vil con una tasa de inter√©s anual del 10% y realiza los pagos mensualmente, la tasa de inter√©s al mes es 10%/12 √≥ 0,83%. En tal caso, en la f√≥rmula deber√≠a especificar 10%/12, 0,83% √≥ 0,0083 como tasa.</param>
        <param name="Arg2">Nper: n√∫mero total de per√≠odos de pago en una anualidad. Por ejemplo, si obtiene un pr√©stamo para la compra de un autom√≥vil a cuatro a√±os y realiza pagos mensuales, el pr√©stamo tiene 4*12 (o 48) per√≠odos. En tal caso, deber√≠a especificar 48 en la f√≥rmula como argumento nper.</param>
        <param name="Arg3">Pago: pago efectuado en cada per√≠odo, que no puede variar durante la vigencia de la anualidad. Generalmente el argumento de pago incluye el capital y el inter√©s, pero no incluye ning√∫n otro arancel o impuesto. Por ejemplo, los pagos mensuales de un pr√©stamo a cuatro a√±os de 10.000 $ al 12% son de 263,33 $. En ese caso, en la f√≥rmula deber√≠a especificar -263,33 como pago. Si se omite este argumento, deber√° incluirse el argumento vf.</param>
        <param name="Arg4">Vf: valor futuro o saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0). Por ejemplo, si desea ahorrar 50.000 $ para pagar un determinado proyecto en 18 a√±os, el valor futuro es 50.000 $. A continuaci√≥n, podr√≠a hacer una estimaci√≥n conservadora a cierto tipo de inter√©s y determinar cu√°nto debe ahorrar cada mes. Si se omite este argumento, debe incluirse el argumento de pago.</param>
        <param name="Arg5">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <summary>Devuelve el valor actual de una inversi√≥n. El valor actual es la cantidad total que tiene actualmente la suma de una serie de pagos futuros. Por ejemplo, cuando se presta dinero, el importe del pr√©stamo es el valor actual para el prestamista.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Aseg√∫rese de mantener la uniformidad en las unidades usadas para especificar la tasa y el n√∫mero de per√≠odos. Si realiza pagos mensuales de un pr√©stamo de cuatro a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para la tasa y 4*12 para el n√∫mero de per√≠odos. Si realiza pagos anuales del mismo pr√©stamo, use 12% para la tasa y 4 para el n√∫mero de per√≠odos. </para>
          <para>Las siguientes funciones se aplican a las anualidades: </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>PV</description>
            </item>
            <item>
              <term>FV</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Una anualidad es una serie de pagos en efectivo constantes realizados durante un per√≠odo continuo. Por ejemplo, el pr√©stamo para comprar un autom√≥vil o una hipoteca es una anualidad. Para obtener m√°s informaci√≥n, vea la descripci√≥n de cada funci√≥n de anualidad. </para>
          <para>En las funciones de anualidad, el efectivo que se paga, como un dep√≥sito en una cuenta de ahorros, se representa con n√∫meros negativos; el efectivo que se recibe, como los cheques de dividendos, se representa con n√∫meros positivos. Por ejemplo, un dep√≥sito de 1.000 $ en el banco se representar√≠a mediante el argumento -1000 si es el depositante y mediante el argumento 1000 si es el banco. </para>
          <para>Microsoft Excel resuelve un argumento financiero en funci√≥n de los otros. Si la tasa no es 0, entonces: </para>
          <para>Figura 1: Ecuaci√≥n cuando la tasa no es 0</para>
          <para> </para>
          <para> </para>
          <para>Si la tasa es 0, entonces:</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de celdas de valores num√©ricos cuyo cuartil se desea obtener.</param>
        <param name="Arg2">Cuartil: indica el valor que se debe devolver.</param>
        <summary>Devuelve el cuartil de un conjunto de datos. Los cuartiles se usan con frecuencia en los datos de ventas y encuestas para dividir las poblaciones en grupos. Por ejemplo, puede usar <b>Quartile</b> para encontrar el 25% superior de los ingresos de una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> m√©todos y.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>El valor m√≠nimo</description>
            </item>
            <item>
              <term>1</term>
              <description>El primer cuartil (percentil 25)</description>
            </item>
            <item>
              <term>2</term>
              <description>El valor de la mediana (percentil 50)</description>
            </item>
            <item>
              <term>3</term>
              <description>El tercer cuartil (percentil 75)</description>
            </item>
            <item>
              <term>4 </term>
              <description>El valor m√°ximo</description>
            </item>
          </list>
          <para>Si la matriz est√° vac√≠a, <b>Quartile</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de cuartil no es un n√∫mero entero, se trunca.</para>
          <para>Si quart &lt; 0 o si quart &gt; 4, <b>Quartile</b> devuelve el #NUM! valor de error. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, y devuelve el mismo valor que Quartile cuando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> quart es igual a <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (cero), 2 y 4, respectivamente. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: la matriz o el intervalo de celdas de valores num√©ricos para los que desea el valor de cuartil.</param>
        <param name="Arg2">Cuartil: valor que se debe devolver.</param>
        <summary>Devuelve el cuartil del conjunto de datos, seg√∫n los valores de percentil de 0 a 1, ambos no incluidos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, Quartile_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de cuartil no es un n√∫mero entero, se trunca.</para>
          <para>Si quart ‚â§ 0 o si quart ‚â• 4, <b>Quartile_Exc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y devuelve el mismo valor que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>Quartile_Exc</b> cuando quart es igual a 0 (cero), 2 y 4, respectivamente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de celdas de valores num√©ricos cuyo cuartil se desea obtener.</param>
        <param name="Arg2">Cuartil: valor que se debe devolver.</param>
        <summary>Devuelve el cuartil del conjunto de datos, seg√∫n los valores de percentil de 0 a 1, ambos incluidos. Los cuartiles se usan con frecuencia en los datos de ventas y encuestas para dividir las poblaciones en grupos. Por ejemplo, puede usar QUARTILE_INC para determinar el 25% de los ingresos m√°s altos en una poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, Quartile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>Si el argumento de cuartil no es un n√∫mero entero, se trunca.</para>
          <para>Si quart &lt; 0 o si quart &gt; 4, <b>Quartile_Inc</b> devuelve el #NUM! valor de error. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y devuelve el mismo valor que <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>Quartile_Inc</b> cuando quart es igual a 0 (cero), 2 y 4, respectivamente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numerador: el dividendo.</param>
        <param name="Arg2">Denominador: el divisor.</param>
        <summary>Devuelve la parte entera de una divisi√≥n. Use este m√©todo cuando desee descartar el resto de una divisi√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si cualquiera de los argumentos no esnum√©rico, <b>Quotient</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo: √°ngulo expresado en grados que se desea convertir.</param>
        <summary>Convierte grados en radianes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inferior: n√∫mero entero m√°s bajo que devolver√° RANDBETWEEN.</param>
        <param name="Arg2">Superior: n√∫mero entero m√°s alto que devolver√° RANDBETWEEN.</param>
        <summary>Devuelve un n√∫mero entero aleatorio entre los n√∫meros que especifique. Devuelve un nuevo n√∫mero entero aleatorio cada vez que se calcula la hoja de c√°lculo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero cuya jerarqu√≠a se desea conocer.</param>
        <param name="Arg2">Referencia: matriz de una lista de n√∫meros o referencia a ella. Los valores no num√©ricos se pasan por alto.</param>
        <param name="Arg3">Orden: n√∫mero que especifica c√≥mo se debe clasificar el n√∫mero entero.</param>
        <summary>Devuelve la jerarqu√≠a de un n√∫mero en una lista de n√∫meros. La jerarqu√≠a de un n√∫mero es su tama√±o en comparaci√≥n con otros valores de la lista (si ordenara la lista, la jerarqu√≠a del n√∫mero ser√≠a su posici√≥n).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> m√©todos y.</para>
          <para>Si el argumento orden es 0 (cero) o se omite, Microsoft Excel determina la jerarqu√≠a de un n√∫mero como si la lista definida por el argumento de referencia estuviese ordenada en forma descendente.</para>
          <para>Si el argumento de orden es distinto de cero, Microsoft Excel determina la jerarqu√≠a del n√∫mero como si la lista definida por el argumento de referencia estuviera ordenada en forma ascendente.</para>
          <para>
            <b>Rank</b> proporciona n√∫meros duplicados de la misma clasificaci√≥n. Sin embargo, la presencia de n√∫meros duplicados afecta a la jerarqu√≠a de los n√∫meros subsiguientes. Por ejemplo, en una lista de n√∫meros enteros clasificados en orden ascendente, si el n√∫mero 10 aparece dos veces y tiene una jerarqu√≠a de 5, el n√∫mero 11 tendr√≠a una jerarqu√≠a de 7 (ning√∫n n√∫mero tendr√≠a una jerarqu√≠a de 6).</para>
          <para>Para algunos fines es posible que desee utilizar una definici√≥n de jerarqu√≠a que tenga en cuenta las relaciones. En el ejemplo anterior, puede que desee una jerarqu√≠a revisada de 5,5 para el n√∫mero 10. Para ello, agregue el siguiente factor de correcci√≥n al valor devuelto por <b>Rank</b>. Este factor de correcci√≥n es adecuado tanto para el caso en que la clasificaci√≥n se calcula en orden descendente (orden = 0 u omitido) como en orden ascendente (order = valor distinto de cero).</para>
          <para>Factor de correcci√≥n para rangos empatados=[COUNT(ref) + 1 ‚Äì RANK(number, ref, 0) ‚Äì RANK(number, ref, 1)]/2.</para>
          <para>En el siguiente ejemplo, RANK(A2,A1:A5,1) es igual a 3. El factor de correcci√≥n es (5 + 1 ‚Äì 2 ‚Äì 3)/2 = 0,5 y la jerarqu√≠a revisada que tiene en cuenta las relaciones es 3 + 0,5 = 3,5. Si el n√∫mero se produce solo una vez en ref, el factor de correcci√≥n ser√° 0, ya que <b>Rank</b> no tendr√≠a que ajustarse para un empate.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero cuya jerarqu√≠a se desea conocer.</param>
        <param name="Arg2">Referencia: matriz de una lista de n√∫meros o referencia a ella. Los valores no num√©ricos se pasan por alto.</param>
        <param name="Arg3">Order: un n√∫mero que especifica c√≥mo clasificar el n√∫mero. Si el argumento orden es 0 (cero) o se omite, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma descendente. Si el argumento orden es diferente de cero, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma ascendente.</param>
        <summary>Devuelve la jerarqu√≠a de un n√∫mero dentro de una lista, es decir, su tama√±o relativo a otros valores en la lista. Si m√°s de un valor tiene la misma jerarqu√≠a, se devuelve la jerarqu√≠a promedio.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero cuya jerarqu√≠a se desea conocer.</param>
        <param name="Arg2">Referencia: matriz de una lista de n√∫meros o referencia a ella. Los valores no num√©ricos se pasan por alto.</param>
        <param name="Arg3">Orden: n√∫mero que especifica c√≥mo se debe clasificar el n√∫mero.</param>
        <summary>Devuelve la jerarqu√≠a de un n√∫mero en una lista de n√∫meros. La jerarqu√≠a de un n√∫mero es su tama√±o en comparaci√≥n con otros valores de la lista (si ordenara la lista, la jerarqu√≠a del n√∫mero ser√≠a su posici√≥n).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el argumento orden es 0 (cero) o se omite, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma descendente.</para>
          <para>Si el argumento orden es diferente de cero, Microsoft¬†Excel clasifica el n√∫mero como si la referencia fuera una lista ordenada en forma ascendente.</para>
          <para>
            <b>Rank_Eq</b> proporciona a los n√∫meros duplicados la misma clasificaci√≥n. Sin embargo, la presencia de n√∫meros duplicados afecta a la jerarqu√≠a de los n√∫meros subsiguientes. Por ejemplo, en una lista de n√∫meros enteros clasificados en orden ascendente, si el n√∫mero 10 aparece dos veces y tiene una jerarqu√≠a de 5, el n√∫mero 11 tendr√≠a una jerarqu√≠a de 7 (ning√∫n n√∫mero tendr√≠a una jerarqu√≠a de 6).</para>
          <para>Para algunos fines es posible que desee usar una definici√≥n de jerarqu√≠a que tenga en cuenta las relaciones. En el ejemplo anterior, puede que desee una jerarqu√≠a revisada de 5,5 para el n√∫mero 10. Para ello, agregue el siguiente factor de correcci√≥n al valor devuelto por <b>Rank_Eq</b>. Este factor de correcci√≥n es adecuado tanto para el caso en que la clasificaci√≥n se calcula en orden descendente (orden = 0 u omitido) como en orden ascendente (order = valor distinto de cero).</para>
          <para>Factor de correcci√≥n para rangos empatados=[COUNT(ref) + 1 ‚Äì RANK_EQ(number, ref, 0) ‚Äì RANK_EQ(number, ref, 1)]/2.In the following example, RANK_EQ(A2,A1:A5,1) equals 3. El factor de correcci√≥n es (5 + 1 ‚Äì 2 ‚Äì 3)/2 = 0,5 y la jerarqu√≠a revisada que tiene en cuenta las relaciones es 3 + 0,5 = 3,5. Si el n√∫mero se produce solo una vez en <b></b> ref, el factor de correcci√≥n ser√° 0, ya que Rank_Eq no tendr√≠a que ajustarse para un empate.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de per√≠odos: n√∫mero total de per√≠odos de pago en una anualidad.</param>
        <param name="Arg2">Pago: pago efectuado en cada per√≠odo, que no puede variar durante la vida de la anualidad. Generalmente el argumento de pago incluye el capital y el inter√©s, pero no incluye ning√∫n otro arancel o impuesto. Si se omite el argumento de pago, deber√° incluirse el argumento de valor futuro.</param>
        <param name="Arg3">Va: cantidad total que tiene en la actualidad una serie de pagos futuros.</param>
        <param name="Arg4">Vf: valor futuro o un saldo en efectivo que se desea lograr despu√©s de efectuar el √∫ltimo pago. Si el argumento de vf se omite, se supone que el valor es 0 (por ejemplo, el valor futuro de un pr√©stamo es 0).</param>
        <param name="Arg5">Tipo: n√∫mero 0 o 1 que indica el vencimiento de los pagos.</param>
        <param name="Arg6">Adivinar: su conjetura de cu√°l ser√° la tasa.</param>
        <summary>Devuelve la tasa de inter√©s por per√≠odo de una anualidad. RATE se calcula por iteraci√≥n y puede tener cero o m√°s soluciones. Si los resultados sucesivos de RATE no convergen dentro de 0,0000001 despu√©s de 20 iteraciones, devuelve el valor de error #¬°NUM!</summary>
        <returns>To be added.</returns>
        <remarks><para>Para obtener una descripci√≥n completa de los argumentos nper, pmt, pv, fv y type, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>Al final del per√≠odo</description>
            </item>
            <item>
              <term>1</term>
              <description>Al inicio del per√≠odo</description>
            </item>
          </list>
          <para>Si se omite el argumento de estimaci√≥n, se supone que es el 10 por ciento.</para>
          <para>Si <b>Rate</b> no converge, pruebe diferentes valores para adivinar. <b>La</b> tasa suele converger si la conjetura est√° entre 0 y 1.</para>
          <para>Mantenga uniformidad en el uso de las unidades con las que especifica los argumentos de estimaci√≥n y n√∫mero de per√≠odos. Si realiza pagos mensuales sobre un pr√©stamo de 4 a√±os con un inter√©s anual del 12 por ciento, use 12%/12 para el argumento de estimaci√≥n y 4*12 para el argumento de n√∫mero de per√≠odos. Si realiza pagos anuales sobre el mismo pr√©stamo, use 12% para el argumento de estimaci√≥n y 4 para el argumento de n√∫mero de per√≠odos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Inversi√≥n: cantidad de dinero que se ha invertido en el valor burs√°til.</param>
        <param name="Arg4">Descuento: tasa de descuento del valor burs√°til.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve la cantidad recibida al vencimiento de un valor burs√°til completamente invertido.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>Received</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la inversi√≥n ‚â§ 0 o si el descuento ‚â§ 0, <b>Received</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>Received</b> devuelve el #NUM! valor de error. </para>
          <para>Si la liquidaci√≥n ‚â• vencimiento, Received devuelve el #NUM! valor de error. <b>Recibido</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo Received</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>B = n√∫mero de d√≠as en un a√±o, seg√∫n el a√±o.</para>
          <para>DIM = n√∫mero de d√≠as desde el problema hasta el vencimiento.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto en el que se desea reemplazar algunos caracteres.</param>
        <param name="Arg2">Posici√≥n del car√°cter en <paramref name="Arg1" /> el que desea reemplazar por <paramref name="Arg4" /> .</param>
        <param name="Arg3">N√∫mero de caracteres en <paramref name="Arg1" /> los que desea que el m√©todo reemplace por <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <paramref name="Arg4" /> .</param>
        <param name="Arg4">Texto que reemplazar√° los caracteres de <paramref name="Arg1" /> .</param>
        <summary>Reemplaza parte de una cadena de texto por otra cadena, de acuerdo con el n√∫mero de caracteres especificado.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto original: texto en el que se desea reemplazar algunos caracteres.</param>
        <param name="Arg2">N√∫mero inicial: posici√≥n del car√°cter dentro del texto original que se desea reemplazar por el argumento de texto nuevo especificado.</param>
        <param name="Arg3">N√∫mero de caracteres: n√∫mero de caracteres del texto original que desea que REPLACE reemplace por el texto nuevo.</param>
        <param name="Arg4">Texto nuevo: texto que reemplazar√° los caracteres del argumento de texto original.</param>
        <summary>REPLACEB reemplaza parte de una cadena de texto, en funci√≥n del n√∫mero de bytes que especifique, por una cadena de texto diferente.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>est√° pensado para su uso con idiomas que usan el juego de caracteres de un solo byte (SBCS), mientras que ReplaceB est√° pensado para su uso con idiomas que usan el juego de caracteres de doble <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> byte <b></b> (DBCS). La configuraci√≥n predeterminada de idioma del equipo influye en el valor devuelto de la siguiente manera:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> siempre cuenta cada car√°cter, ya sea de un byte o de doble byte, como 1, independientemente de cu√°l sea la configuraci√≥n de idioma predeterminada. </para>
          <para>
            <b>ReplaceB</b> cuenta cada car√°cter de doble byte como 2 cuando se ha habilitado la edici√≥n de un idioma compatible con DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo contrario, <b>ReplaceB</b> cuenta cada car√°cter como 1. </para>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto que se desea repetir.</param>
        <param name="Arg2">N√∫mero de veces: n√∫mero positivo que especifica el n√∫mero de veces que debe repetirse el texto.</param>
        <summary>Repite el texto un n√∫mero determinado de veces. Use el m√©todo Rept para llenar una celda con una cadena de texto repetida un n√∫mero determinado de veces.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number_times es 0 (cero), <b>Rept</b> devuelve "" (texto vac√≠o). </para>
          <para>Si el argumento de n√∫mero de veces no es un n√∫mero entero, se trunca.</para>
          <para>El resultado de la <b>funci√≥n Rept</b> no puede tener m√°s de 32.767 caracteres, o <b>Rept</b> devuelve #VALUE!. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero ar√°bigo que se desea convertir.</param>
        <param name="Arg2">Forma: n√∫mero que especifica el tipo de n√∫mero romano que se desea obtener. El estilo de n√∫mero romano var√≠a entre cl√°sico y simplificado; cuanto m√°s aumenta el valor del argumento de forma, m√°s conciso es el estilo devuelto.</param>
        <summary>Convierte un n√∫mero √°rabe en romano, como texto.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 u omitida</term>
              <description>Cl√°sico.</description>
            </item>
            <item>
              <term>1</term>
              <description>M√°s conciso.</description>
            </item>
            <item>
              <term>2</term>
              <description>M√°s conciso.</description>
            </item>
            <item>
              <term>3</term>
              <description>M√°s conciso.</description>
            </item>
            <item>
              <term>4 </term>
              <description>Simplificado.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Cl√°sico.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Simplificado.</description>
            </item>
          </list>
          <para>Si el argumento de n√∫mero es negativo, se devuelve el valor de error #¬°VALOR!</para>
          <para>Si el argumento de n√∫mero es mayor que 3999, se devuelve el valor de error #¬°VALOR!</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero que se desea redondear.</param>
        <param name="Arg2">N√∫mero de decimales: especifica el n√∫mero de d√≠gitos al que se desea redondear el argumento de n√∫mero.</param>
        <summary>Redondea un n√∫mero al n√∫mero de decimales especificado.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el argumento de n√∫mero de decimales es mayor que 0 (cero), el n√∫mero se redondear√° al n√∫mero de caracteres de decimales especificado. </para>
          <para>Si el argumento de n√∫mero de decimales es 0, n√∫mero se redondear√° al entero m√°s pr√≥ximo. </para>
          <para>Si el argumento de n√∫mero de decimales es menor que 0, el n√∫mero se redondear√° hacia la izquierda del separador decimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real que se desea redondear hacia abajo.</param>
        <param name="Arg2">N√∫mero de decimales: especifica el n√∫mero de d√≠gitos al que se desea redondear el argumento de n√∫mero.</param>
        <summary>Redondea un n√∫mero hacia abajo, hacia el cero.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> se comporta como <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , excepto que siempre redondea un n√∫mero hacia abajo. </para>
          <para>Si el argumento de n√∫mero de decimales es mayor que 0 (cero), el n√∫mero se redondea hacia abajo, hasta el n√∫mero de decimales especificado.</para>
          <para>Si el argumento de n√∫mero de decimales es 0, el n√∫mero se redondea hacia abajo hasta el entero m√°s pr√≥ximo.</para>
          <para>Si el argumento de n√∫mero de decimales es menor que 0, el n√∫mero se redondea hacia abajo, a la izquierda del separador decimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real que se desea redondear hacia arriba.</param>
        <param name="Arg2">N√∫mero de decimales: especifica el n√∫mero de d√≠gitos al que se desea redondear el argumento de n√∫mero.</param>
        <summary>Redondea un n√∫mero hacia arriba, en direcci√≥n contraria a cero.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> se comporta como <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , excepto que siempre redondea un n√∫mero hacia arriba. </para>
          <para>Si el argumento de n√∫mero de decimales es mayor que 0 (cero), el n√∫mero se redondea hacia arriba hasta el n√∫mero de decimales especificado.</para>
          <para>Si el argumento de n√∫mero de decimales es 0, el n√∫mero se redondea hacia arriba, hasta el n√∫mero entero m√°s pr√≥ximo.</para>
          <para>Si el argumento de n√∫mero de decimales es menor que 0, el n√∫mero se redondea hacia arriba, a la izquierda del separador decimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de per√≠odos para la inversi√≥n.</param>
        <param name="Arg2">Valor actual de la inversi√≥n.</param>
        <param name="Arg3">Valor futuro de la inversi√≥n.</param>
        <summary>Devuelve una tasa de inter√©s equivalente para el crecimiento de una inversi√≥n.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: matriz o rango de puntos de datos.</param>
        <param name="Arg2">Valores conocidos de x: matriz o rango de puntos de datos.</param>
        <summary>Devuelve el cuadrado del coeficiente de correlaci√≥n producto momento de Pearson mediante los puntos de datos conocidos de y y de x. Para m√°s informaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. El valor R cuadrado puede interpretarse como la proporci√≥n de la varianza de y que puede atribuirse a la varianza de x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si known_y y known_x est√°n vac√≠os o tienen un n√∫mero diferente de puntos de datos, <b>RSq</b> devuelve el valor de error #N/A. </para>
          <para>Si known_y y known_x contienen solo 1 punto de datos, <b>RSq</b> devuelve el #DIV/0. valor de error. </para>
          <para>La ecuaci√≥n del coeficiente de correlaci√≥n del momento del producto de Pearson, r, es: </para>
          <para>Figura 1: Coeficiente de correlaci√≥n del momento del producto de Pearson</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son el ejemplo significa AVERAGE(known_x's) y AVERAGE(known_y's).</para>
          <para>
            <b>RSq devuelve</b> r2, que es el cuadrado de este coeficiente de correlaci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Cadena que representa el identificador de programaci√≥n del servidor en tiempo real.</param>
        <param name="server">nombre del servidor, <b>cadena null</b> o <b>constante vbNullString.</b></param>
        <param name="topic1"><paramref name="topic1" /> ‚Äì <paramref name="topic28" /> Una cadena <b>que</b> representa un tema.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Este m√©todo conecta con un origen para recibir datos en tiempo real.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto buscado: texto que se desea encontrar.</param>
        <param name="Arg2">Dentro del texto: texto en el que se desea localizar el texto buscado.</param>
        <param name="Arg3">N√∫mero inicial: n√∫mero de car√°cter correspondiente del argumento de dentro del texto donde desea iniciar la b√∫squeda.</param>
        <summary><b>Busque</b> y busque una cadena de texto dentro de una segunda cadena de texto y devuelva el n√∫mero de la posici√≥n inicial de la primera cadena de texto desde el primer car√°cter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> de la segunda cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b> <b>La</b> b√∫squeda est√° dise√±ada para su uso con idiomas que usan el juego de caracteres de un solo byte (SBCS), mientras que est√° dise√±ada para su uso con idiomas que usan el juego de caracteres de doble <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> byte (DBCS). La configuraci√≥n de idioma predeterminada en el equipo afecta al valor devuelto de la siguiente manera:<b>la</b> b√∫squeda siempre cuenta cada car√°cter, ya sea de byte √∫nico o de doble byte, como 1, independientemente de cu√°l sea la configuraci√≥n de idioma predeterminada. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> cuenta cada car√°cter de doble byte como 2 cuando se ha habilitado la edici√≥n de un idioma compatible con DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> contrario, cuenta cada car√°cter como 1.</para>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para>Use <b>La b√∫squeda</b> y para determinar la ubicaci√≥n de un car√°cter o cadena de texto dentro de otra cadena de texto para que pueda usar mid y MIDB o funciones para cambiar el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> texto. </para>
          <para>
            <b>Busque</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> no distingue may√∫sculas de min√∫sculas. Si desea realizar una b√∫squeda entre may√∫sculas y min√∫sculas, puede usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>En el argumento de texto buscado se pueden utilizar los caracteres comod√≠n signo de interrogaci√≥n (?) y asterisco (*). El signo de interrogaci√≥n corresponde a un solo car√°cter cualquiera, y el asterisco equivale a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco reales, escriba una tilde (~) delante del car√°cter que desea buscar.</para>
          <para>Si no se encuentra el texto del argumento de texto buscado, se devuelve el valor de error #¬°VALOR!</para>
          <para>Si se omite el argumento de n√∫mero inicial, se supone que es 1.</para>
          <para>Si el valor del argumento de n√∫mero inicial no es mayor que 0 (cero), o si es mayor que la longitud del argumento de dentro del texto, se devuelve el valor de error #¬°VALOR!</para>
          <para>Utilice el argumento de n√∫mero inicial para omitir un n√∫mero espec√≠fico de caracteres. Usando <b>Search</b> como ejemplo, supongamos que est√° trabajando con la cadena de texto "AYF0093. YoungMensApparel". Para encontrar el n√∫mero de la primera "A" en la parte descriptiva de la cadena de texto, establezca el argumento de n√∫mero inicial en 8, de manera que la funci√≥n no busque en la parte correspondiente al n√∫mero de serie. <b>La</b> b√∫squeda comienza con el car√°cter 8, busca find_text en el siguiente car√°cter y devuelve el n√∫mero 9. <b>La</b> b√∫squeda siempre devuelve el n√∫mero de caracteres desde el inicio del within_text, contando los caracteres que omite si start_num es mayor que 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto buscado: texto que se desea encontrar.</param>
        <param name="Arg2">Dentro del texto: texto en el que se desea localizar el texto buscado.</param>
        <param name="Arg3">N√∫mero inicial: n√∫mero de car√°cter correspondiente del argumento de dentro del texto donde desea iniciar la b√∫squeda.</param>
        <summary>Los m√©todos Search y SearchB buscan una cadena de texto dentro de una segunda cadena de texto y devuelven el n√∫mero de la posici√≥n inicial de la primera cadena de texto desde el primer car√°cter de la segunda cadena de texto.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b> <b>La</b> b√∫squeda est√° dise√±ada para su uso con idiomas que usan el juego de caracteres de un solo byte (SBCS), mientras que est√° dise√±ada para su uso con idiomas que usan el juego de caracteres de doble <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> byte (DBCS). La configuraci√≥n de idioma predeterminada en el equipo afecta al valor devuelto de la siguiente manera:<b>la</b> b√∫squeda siempre cuenta cada car√°cter, ya sea de byte √∫nico o de doble byte, como 1, independientemente de cu√°l sea la configuraci√≥n de idioma predeterminada. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> cuenta cada car√°cter de doble byte como 2 cuando se ha habilitado la edici√≥n de un idioma compatible con DBCS y, a continuaci√≥n, se establece como el idioma predeterminado. De lo <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> contrario, cuenta cada car√°cter como 1.</para>
          <para>Entre los idiomas que admiten DBCS se incluyen japon√©s, chino (simplificado), chino (tradicional) y coreano.</para>
          <para>Use <b>La b√∫squeda</b> y para determinar la ubicaci√≥n de un car√°cter o cadena de texto dentro de otra cadena de texto para que pueda usar mid y MIDB o funciones para cambiar el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> texto. </para>
          <para>
            <b>Busque</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> no distingue may√∫sculas de min√∫sculas. Si desea realizar una b√∫squeda entre may√∫sculas y min√∫sculas, puede usar <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>En el argumento de texto buscado se pueden utilizar los caracteres comod√≠n signo de interrogaci√≥n (?) y asterisco (*). El signo de interrogaci√≥n corresponde a un solo car√°cter cualquiera, y el asterisco equivale a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco reales, escriba una tilde (~) delante del car√°cter que desea buscar.</para>
          <para>Si no se encuentra el texto del argumento de texto buscado, se devuelve el valor de error #¬°VALOR!</para>
          <para>Si se omite el argumento de n√∫mero inicial, se supone que es 1.</para>
          <para>Si el valor del argumento de n√∫mero inicial no es mayor que 0 (cero), o si es mayor que la longitud del argumento de dentro del texto, se devuelve el valor de error #¬°VALOR!</para>
          <para>Utilice el argumento de n√∫mero inicial para omitir un n√∫mero espec√≠fico de caracteres. Usando <b>Search</b> como ejemplo, supongamos que est√° trabajando con la cadena de texto "AYF0093. YoungMensApparel". Para encontrar el n√∫mero de la primera "A" en la parte descriptiva de la cadena de texto, establezca el argumento de n√∫mero inicial en 8, de manera que la funci√≥n no busque en la parte correspondiente al n√∫mero de serie. <b>La</b> b√∫squeda comienza con el car√°cter 8, busca find_text en el siguiente car√°cter y devuelve el n√∫mero 9. <b>La</b> b√∫squeda siempre devuelve el n√∫mero de caracteres desde el inicio del within_text, contando los caracteres que omite si start_num es mayor que 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo en radianes para el que desea el secant.</param>
        <summary>Devuelve el secant de un √°ngulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">√Ångulo en radianes para el que quieres el secant hiperb√≥lico.</param>
        <summary>Devuelve el secant hiperb√≥lico de un √°ngulo.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: base especificada para la serie exponencial.</param>
        <param name="Arg2">N: exponente inicial al que se desea elevar la base x.</param>
        <param name="Arg3">M: paso en el que se debe incrementar el valor de N para cada t√©rmino de la serie.</param>
        <param name="Arg4">Coeficientes: conjunto de coeficientes por el que se multiplica cada exponente sucesivo de x. El n√∫mero de valores especificado en coeficientes determina el n√∫mero de t√©rminos de la serie exponencial. Por ejemplo, si hay tres valores en coeficientes, habr√° tres t√©rminos en la serie exponencial.</param>
        <summary>Devuelve la suma de una serie de energ√≠a basada en la f√≥rmula: SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>SeriesSum</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real.</param>
        <summary>Devuelve el seno hiperb√≥lico de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks><para>La f√≥rmula para el seno hiperb√≥lico es:</para>
          <para>Figura 1: F√≥rmula para el seno hiperb√≥lico</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2,...: de 1 a 30 argumentos cuya asimetr√≠a desea calcular. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la asimetr√≠a de una distribuci√≥n. Esta funci√≥n caracteriza el grado de asimetr√≠a de una distribuci√≥n con respecto a su media. Una asimetr√≠a positiva indica una distribuci√≥n unilateral que se extiende hacia valores m√°s positivos. Una asimetr√≠a negativa indica una distribuci√≥n unilateral que se extiende hacia valores m√°s negativos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si hay menos de tres puntos de datos o la desviaci√≥n est√°ndar de muestra es cero, <b>Skew</b> devuelve el #DIV/0. valor de error. </para>
          <para>La ecuaci√≥n para la asimetr√≠a se define como: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la asimetr√≠a</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg2">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg3">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg4">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg5">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg6">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg7">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg8">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg9">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg10">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg11">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg12">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg13">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg14">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg15">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg16">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg17">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg18">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg19">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg20">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg21">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg22">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg23">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg24">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg25">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg26">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg27">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg28">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg29">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <param name="Arg30">De 1 a 254 n√∫meros o nombres, matrices o referencias que contienen n√∫meros para los que desea la asimetr√≠a de la poblaci√≥n.</param>
        <summary>Devuelve la asimetr√≠a de una distribuci√≥n basada en una poblaci√≥n: una caracterizaci√≥n del grado de asimetr√≠a de una distribuci√≥n alrededor de su media.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo).</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <summary>Devuelve la depreciaci√≥n por m√©todo directo de un bien en un per√≠odo dado.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: matriz o rango de celdas que contiene puntos de datos num√©ricos dependientes.</param>
        <param name="Arg2">Valores conocidos de x: conjunto de puntos de datos independientes.</param>
        <summary>Devuelve la pendiente de una l√≠nea de regresi√≥n lineal creada con los datos de los argumentos de valores conocidos de x e y. La pendiente es la distancia vertical dividida por la distancia horizontal entre dos puntos cualquiera de la recta, lo que corresponde a la tasa de cambio a lo largo de la l√≠nea de regresi√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si known_y y known_x est√°n vac√≠os o tienen un n√∫mero diferente de puntos de datos, <b>Slope</b> devuelve el valor de error #N/A. </para>
          <para>La ecuaci√≥n para la pendiente de la l√≠nea de regresi√≥n es: </para>
          <para>Figura 1: Ecuaci√≥n para la pendiente de la l√≠nea de regresi√≥n</para>
          <para> </para>
          <para> </para>
          <para>El algoritmo subyacente usado en <b>slope</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> funciones es diferente del algoritmo subyacente usado en la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> funci√≥n. La diferencia entre estos algoritmos puede producir resultados distintos cuando los datos son indeterminados y colineales. Por ejemplo, si los puntos de datos del argumento de valores conocidos de y son 0 y los puntos de datos del argumento de valores conocidos de x son 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Pendiente</b> y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> devolver un #DIV/0! error. La <b>pendiente</b> y el algoritmo est√°n dise√±ados para buscar una sola respuesta y, en este caso, puede haber <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> m√°s de una respuesta. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> devuelve un valor de 0. El algoritmo est√° dise√±ado para devolver resultados razonables para los datos de colisi√≥n y, en este caso, se puede encontrar al menos <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> una respuesta.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos num√©ricos cuyo k-√©simo menor valor se desea determinar.</param>
        <param name="Arg2">K: posici√≥n, dentro de la matriz o del rango de datos, de los datos que se van a devolver, determinada a partir del menor de los valores.</param>
        <summary>Devuelve el k-√©simo menor valor de un conjunto de datos. Utilice este m√©todo para devolver valores con una posici√≥n relativa espec√≠fica dentro de un conjunto de datos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° vac√≠a, <b>Small</b> devuelve el #NUM! valor de error. </para>
          <para>Si k ‚â§ 0 o si k supera el n√∫mero de puntos de datos, <b>Small</b> devuelve la #NUM! valor de error. </para>
          <para>Si n es el n√∫mero de puntos de datos del argumento de matriz, SMALL(array,1) devuelve el valor m√°s peque√±o y SMALL(array,n) el valor m√°s grande.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: n√∫mero que se multiplicar√° por pi.</param>
        <summary>Devuelve la ra√≠z cuadrada de un n√∫mero multiplicado por pi (n√∫mero * pi).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el &lt; n√∫mero 0, <b>SqrtPi</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor que se desea normalizar.</param>
        <param name="Arg2">Media: media aritm√©tica de la distribuci√≥n.</param>
        <param name="Arg3">Desv_est√°ndar: desviaci√≥n est√°ndar de la distribuci√≥n.</param>
        <summary>Devuelve un valor normalizado de una distribuci√≥n caracterizada por los argumentos de media y desviaci√≥n est√°ndar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si standard_dev ‚â§ 0, <b>Estandarizar</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para el valor normalizado es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para el valor normalizado</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar a partir de una muestra. La desviaci√≥n est√°ndar es una medida de la dispersi√≥n de unos valores con respecto al promedio (la media).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> m√©todo.</para>
          <para>
            <b>StDev asume</b> que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, calcule la desviaci√≥n est√°ndar con <b>StDev</b>. </para>
          <para>La desviaci√≥n est√°ndar se calcula con el m√©todo "no sesgada" o "n-1".</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>StDev</b> usa la siguiente f√≥rmula: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo StDev</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos num√©ricos correspondientes a una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de la poblaci√≥n total determinada por los argumentos. La desviaci√≥n est√°ndar es la medida de la dispersi√≥n de los valores respecto a la media (valor promedio).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> supone que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, calcule la desviaci√≥n est√°ndar <b>mediante StDev_P</b>. </para>
          <para>Para tama√±os de muestra grandes <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> y StDev_P valores aproximadamente iguales. <b></b> </para>
          <para>La desviaci√≥n est√°ndar se calcula mediante el m√©todo "con sesgo" o "n".</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>StDev_P</b> usa la siguiente f√≥rmula: </para>
          <para>Figura 1: Ecuaci√≥n para el StDev_P m√©todo</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar a partir de una muestra. La desviaci√≥n est√°ndar es una medida de la dispersi√≥n de unos valores con respecto al promedio (la media).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> supone que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, calcule la desviaci√≥n est√°ndar mediante <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>La desviaci√≥n est√°ndar se calcula con el m√©todo "no sesgada" o "n-1".</para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>StDev_S</b> la siguiente f√≥rmula: </para>
          <para>Figura 1: Ecuaci√≥n para el StDev_S m√©todo</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la desviaci√≥n est√°ndar de la poblaci√≥n total determinada por los argumentos. La desviaci√≥n est√°ndar es la medida de la dispersi√≥n de los valores respecto a la media (valor promedio).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> m√©todo.</para>
          <para>
            <b>StDevP supone</b> que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, calcule la desviaci√≥n est√°ndar mediante <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Para tama√±os de muestra grandes, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>y StDevP</b> devuelven aproximadamente valores iguales. </para>
          <para>La desviaci√≥n est√°ndar se calcula mediante el m√©todo "con sesgo" o "n". Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros. </para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. <b>StDevP usa</b> la siguiente f√≥rmula: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo StDevP</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: matriz o rango de puntos de datos dependientes.</param>
        <param name="Arg2">Valores conocidos de x: matriz o rango de puntos de datos independientes.</param>
        <summary>Devuelve el error t√≠pico del valor de y previsto para cada x de la regresi√≥n. El error t√≠pico es una medida de la cuant√≠a de error en el pron√≥stico del valor de y para un valor individual de x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>Si known_y y known_x tienen un n√∫mero diferente de puntos de datos, <b>StEyx</b> devuelve el valor de error #N/A. </para>
          <para>Si known_y y known_x est√°n vac√≠os o tienen menos de tres puntos de datos, <b>StEyx</b> devuelve el #DIV/0. valor de error. </para>
          <para>La ecuaci√≥n del error est√°ndar de la y predicho es: </para>
          <para>Figura 1: Ecuaci√≥n para el error est√°ndar de la y predicho</para>
          <para> </para>
          <para> </para>
          <para>donde x e y son la muestra significa AVERAGE(known_x's) y AVERAGE(known_y's), y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto o referencia a una celda que contiene el texto en el que se desea sustituir caracteres.</param>
        <param name="Arg2">Texto original: texto que se desea reemplazar.</param>
        <param name="Arg3">Texto nuevo: texto por el que se desea reemplazar el texto original.</param>
        <param name="Arg4">N√∫mero de instancia: especifica la instancia del texto original que se desea reemplazar por el texto nuevo. Si se especifica el argumento de n√∫mero de instancia, s√≥lo se reemplazar√° esa instancia del texto original. De lo contrario, todas las apariciones del texto original se cambian por el texto nuevo.</param>
        <summary>El m√©todo Substitute reemplaza el texto nuevo por el texto original dentro de una cadena de texto. Utilice el m√©todo Substitute cuando desee reemplazar texto espec√≠fico en una cadena de texto; use el m√©todo Replace si desea reemplazar cualquier texto que aparezca en una ubicaci√≥n espec√≠fica dentro de una cadena de caracteres.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero que indica la funci√≥n de agregaci√≥n que el m√©todo usa.</param>
        <param name="Arg2">El primer <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objeto para el que se va a calcular un subtotal.</param>
        <param name="Arg3"><paramref name="Arg3" /> ‚Äì Objetos subsiguientes para los que se va a calcular <paramref name="Arg30" /> <see cref="T:Microsoft.Office.Interop.Excel.Range" /> un subtotal.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Crea subtotales.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos cuyo valor total o suma se desea obtener.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Suma todos los n√∫meros de un rango de celdas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Se toman en cuenta n√∫meros, valores l√≥gicos y representaciones textuales de n√∫meros escritos directamente en la lista de argumentos. </para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasar√°n por alto las celdas vac√≠as, los valores l√≥gicos o el texto contenidos en la matriz o en la referencia. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Range: el rango de celdas que desea evaluar por criterios.</param>
        <param name="Arg2">Criterios: los criterios en forma de n√∫mero, expresi√≥n o texto, que determinan las celdas que se deben sumar. Por ejemplo, los criterios se pueden expresar como 32, "32", " &gt; 32" o "manzanas".</param>
        <param name="Arg3">Rango de suma: celdas reales que se deben sumar si sus celdas correspondientes en el rango cumplen los criterios. Si se omite el argumento de rango de suma, las celdas del rango se evaluar√°n seg√∫n los criterios y se sumar√°n si se cumplen dichos criterios.</param>
        <summary>Suma las celdas del rango que cumplen los criterios especificados.</summary>
        <returns>To be added.</returns>
        <remarks><para>No es necesario que el rango especificado por el argumento de rango de suma tenga el mismo tama√±o y la forma que el argumento de rango. Las celdas reales que se deben sumar se determinan utilizando la celda superior izquierda del rango de suma como la celda inicial e incluyendo las celdas que corresponden con el tama√±o y la forma del rango. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>En los criterios pueden utilizarse los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El signo de interrogaci√≥n corresponde a un solo car√°cter cualquiera y el asterisco equivale a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o un asterisco reales, escriba una tilde (~) antes del car√°cter que desea buscar.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rango de suma: rango que se va a sumar.</param>
        <param name="Arg2">Rango de criterios 1, rango de criterios 2, ‚Ä¶: uno o m√°s rangos en los que evaluar los criterios asociados.</param>
        <param name="Arg3">Criteria1, criteria2, ... - uno o m√°s criterios en forma de n√∫mero, expresi√≥n, referencia de celda o texto que definen las celdas que se agregar√°n. Por ejemplo, los criterios pueden expresarse como 32, "32", " &gt; 32", "manzanas" o B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Suma las celdas de un rango que cumplen varios criterios.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cada celda del rango de suma se suma s√≥lo si todos los criterios correspondientes especificados son verdaderos para dicha celda.</para>
          <para>Las celdas sum_range que contienen <b>true</b> eval√∫an como 1; las celdas sum_range que contienen <b>false</b> eval√∫an como 0 (cero). </para>
          <para>En los criterios se pueden utilizar los caracteres comod√≠n de signo de interrogaci√≥n (?) y asterisco (*). El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si desea buscar un signo de interrogaci√≥n o asterisco reales, escriba una tilde (~) delante del car√°cter.</para>
          <para>No es necesario que cada rango de criterios tenga el mismo tama√±o y forma que el rango de suma. Las celdas reales que se deben sumar se determinan utilizando la celda superior izquierda del argumento de rango de criterios como la celda inicial e incluyendo las celdas que corresponden con el tama√±o y la forma del rango de suma. Por ejemplo:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1, matriz 2, matriz 3, ...: de 2 a 30 matrices cuyos componentes desea multiplicar y despu√©s sumar.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplica los componentes correspondientes de las matrices indicadas y devuelve la suma de esos productos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos de matriz deben tener las mismas dimensiones. Si no lo hacen, <b>SumProduct</b> devuelve el #VALUE! valor de error. </para>
          <para>
            <b>SumProduct</b> trata las entradas de matriz que no son num√©ricas como si fueran ceros.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos de los cuales desea calcular la suma de los cuadrados. Tambi√©n puede usar una sola matriz o una referencia a una matriz en lugar de especificar los argumentos separados por comas.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Devuelve la suma de los cuadrados de los argumentos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros. </para>
          <para>Se toman en cuenta n√∫meros, valores l√≥gicos y representaciones textuales de n√∫meros escritos directamente en la lista de argumentos. </para>
          <para>Si un argumento es una matriz o una referencia, s√≥lo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia. </para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de x: primera matriz o rango de valores.</param>
        <param name="Arg2">Matriz de y: segunda matriz o rango de valores.</param>
        <summary>Devuelve la suma de la diferencia de los cuadrados entre los valores correspondientes en dos matrices.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si array_x y array_y tienen un n√∫mero diferente de valores, <b>SumX2MY2 devuelve</b> el valor de error #N/A. </para>
          <para>La ecuaci√≥n para la suma de la diferencia de cuadrados es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la suma de la diferencia de cuadrados</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de x: primera matriz o rango de valores.</param>
        <param name="Arg2">Matriz de y: segunda matriz o rango de valores.</param>
        <summary>Devuelve el sumatorio de la suma de cuadrados entre los valores correspondientes en dos matrices. El sumatorio de la suma de cuadrados es un t√©rmino com√∫n en muchas operaciones estad√≠sticas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si array_x y array_y tienen un n√∫mero diferente de valores, <b>SumX2PY2</b> devuelve el valor de error #N/A. </para>
          <para>La ecuaci√≥n para el sumatorio de la suma de cuadrados es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la suma de la suma de cuadrados</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz de x: primera matriz o rango de valores.</param>
        <param name="Arg2">Matriz de y: segunda matriz o rango de valores.</param>
        <summary>Devuelve la suma de los cuadrados de las diferencias entre los valores correspondientes en dos matrices.</summary>
        <returns>To be added.</returns>
        <remarks><para>Los argumentos deben ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Si un argumento de matriz o referencia contiene texto, valores l√≥gicos o celdas vac√≠as, esos valores se pasan por alto; sin embargo, se incluyen las celdas que tengan el valor cero.</para>
          <para>Si array_x y array_y tienen un n√∫mero diferente de valores, <b>SumXMY2</b> devuelve el valor de error #N/A. </para>
          <para>La ecuaci√≥n para la suma de la diferencia de cuadrados es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la suma de diferencias cuadradas</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo).</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo: per√≠odo, que debe utilizar las mismas unidades que el argumento de vida.</param>
        <summary>Devuelve la depreciaci√≥n de un activo por suma de d√≠gitos de los a√±os de durante un per√≠odo espec√≠fico.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd</b> se calcula de la siguiente manera:</para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo Syd</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Deg_freedom: un entero que indica el n√∫mero de grados de libertad.</param>
        <param name="Arg3">Acumulado: valor l√≥gico que determina la forma de la funci√≥n. Si cumulative es <b>true</b>, <b>T_Dist</b> devuelve la funci√≥n de distribuci√≥n acumulativa; si <b>es false,</b>devuelve la funci√≥n de densidad de probabilidad.</param>
        <summary>Devuelve una distribuci√≥n t de Student donde un valor num√©rico (x) es un valor calculado de t para el que se calculan los puntos porcentuales.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no esnum√©rico, <b>T_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si deg_freedom &lt; 1, <b>T_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0, T_Dist devuelve <b></b> el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Deg_freedom: un entero que indica el n√∫mero de grados de libertad.</param>
        <summary>Devuelve la distribuci√≥n t de Student de dos colas.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no es num√©rico, <b>T_Dist_2T</b> devuelve el #VALUE! valor de error. </para>
          <para>Si deg_freedom &lt; 1, <b>T_Dist_2T</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0, T_Dist_2T devuelve <b></b> el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero entero que indica el n√∫mero de grados de libertad.</param>
        <summary>Devuelve la distribuci√≥n t de Student de cola derecha, donde un valor num√©rico (x) es un valor calculado de t para el que se van a calcular los puntos porcentuales. La distribuci√≥n t se usa en las pruebas de hip√≥tesis de conjuntos de datos de muestras peque√±as. Use esta funci√≥n en lugar de una tabla de valores cr√≠ticos de la distribuci√≥n t.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si alg√∫n argumento no es num√©rico, <b>T_Dist_RT</b> devuelve el #VALUE! valor de error. </para>
          <para>Si degrees_freedom &lt; 1, <b>T_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Los argumentos de grados de libertad y de colas se truncan a enteros.</para>
          <para>Si tails es cualquier valor distinto de 1 o 2, <b>T_Dist_RT</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0, T_Dist_RT devuelve <b></b> el #NUM! valor de error. </para>
          <para>Si colas = 1, <b>T_Dist_RT</b> se calcula como T_DIST_RT = P( X x ), donde X es una variable aleatoria que sigue a la &gt; distribuci√≥n t. Si colas = 2, <b>T_Dist_RT</b> se calcula como T_DIST_RT = P(| X| &gt; x) = P(X &gt; x o X &lt; -x). </para>
          <para>Dado que x 0 no est√° permitido, para usar T_Dist_RT cuando x 0, tenga en cuenta que &lt; <b></b> &lt; T_DIST_RT(-x,df) = 1 ‚Äì T_DIST_RT(x,df) = P(X &gt; -x) y T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(| X| &gt;x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n t del alumno.</param>
        <param name="Arg2">Deg_freedom: n√∫mero de grados de libertad con los que caracterizar la distribuci√≥n.</param>
        <summary>Devuelve el inverso de la distribuci√≥n t de Student de cola izquierda.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si cualquiera de los argumentos no es <b>num√©rico, T_Inv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>T_Inv</b> devuelve la #NUM! valor de error. </para>
          <para>Si el argumento grados_de_libertad no es un entero, se trunca.</para>
          <para>Si deg_freedom &lt; 1, <b>T_Inv</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n t de Student de dos colas.</param>
        <param name="Arg2">Grados_de_libertad: n√∫mero de grados de libertad que caracteriza la distribuci√≥n.</param>
        <summary>Devuelve el valor t de la distribuci√≥n t de Student como funci√≥n de la probabilidad y los grados de libertad.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si cualquiera de los argumentos no es <b>num√©rico, T_Inv_2T</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>T_Inv_2T</b> devuelve el #NUM! valor de error. Si el n√∫mero de grados de libertad no es un entero, se trunca. </para>
          <para>Si degrees_freedom &lt; 1, <b>T_Inv_2T</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>T_Inv_2T</b> devuelve ese valor t, de forma que P(| X| &gt; t) = probabilidad donde X es una variable aleatoria que sigue a la distribuci√≥n t y P(| X| &gt; t) = P(X &lt; -t o X &gt; t). </para>
          <para>Se puede devolver un valor t de una cola reemplazando la probabilidad por 2 *probabilidad. Para una probabilidad de 0,05 y grados de libertad de 10, el valor de dos colas se calcula con T_INV_2T(0,05,10), que devuelve 2,28139. El valor de* una cola para la misma probabilidad y grados de libertad se puede calcular con T_INV_2T(2 0,05,10), que devuelve 1,812462. </para>
          <para>
            <b>Nota:</b>En algunas tablas, la probabilidad se describe como (1-p).</para>
          <para>Dado un valor de probabilidad <b>T_Inv_2T</b> busca ese valor x de forma que T_DIST_RT(x, degrees_freedom, 2) = probabilidad. Por lo tanto, la <b>precisi√≥n T_Inv_2T</b> depende de la precisi√≥n de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> . <b>T_Inv_2T</b> una t√©cnica de b√∫squeda iterativa. Si la b√∫squeda no converge despu√©s de 100 iteraciones, la funci√≥n devuelve el valor de error #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primer conjunto de datos.</param>
        <param name="Arg2">Matriz 2: segundo conjunto de datos.</param>
        <param name="Arg3">Colas: especifica el n√∫mero de colas de la distribuci√≥n. Si tails = 1, <b>T_Test</b> la distribuci√≥n de una cola. Si colas = 2, <b>T_Test</b> la distribuci√≥n de dos colas.</param>
        <param name="Arg4">Tipo: tipo de prueba t que se debe realizar.</param>
        <summary>Devuelve la probabilidad asociada con la prueba t de Student. Use T_TEST para determinar la probabilidad de que dos muestras puedan proceder de dos poblaciones subyacentes con igual media.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si matriz1 y matriz2 tienen un n√∫mero diferente de puntos de datos y tipo = 1 (emparejado), <b>T_Test</b> devuelve el valor de error #N/A. </para>
          <para>Los argumentos de colas y de tipo se truncan a enteros.</para>
          <para>Si las colas o el tipo no son num√©ricos, <b>T_Test</b> devuelve el #VALUE! valor de error. </para>
          <para>Si tails es cualquier valor distinto de 1 o 2, <b>T_Test</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>T_Test</b> los datos de matriz1 y matriz2 para calcular una estad√≠stica t no negativa. Si tails=1, <b>T_Test</b> devuelve la probabilidad de un valor m√°s alto de la estad√≠stica t bajo la suposici√≥n de que matriz1 y matriz2 son muestras de poblaciones con la misma media. El valor devuelto por <b>T_Test</b> cuando tails=2 es doble que se devuelve cuando tails=1 y corresponde a la probabilidad de un valor absoluto m√°s alto de la estad√≠stica t bajo la suposici√≥n "misma poblaci√≥n significa".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero: cualquier n√∫mero real.</param>
        <summary>Devuelve la tangente hiperb√≥lica de un n√∫mero.</summary>
        <returns>To be added.</returns>
        <remarks><para>La f√≥rmula para la tangente hiperb√≥lica es:</para>
          <para>Figura 1: F√≥rmula para la tangente hiperb√≥lica</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n de la letra del Tesoro. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere la letra del Tesoro.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento de la letra del Tesoro. La fecha de vencimiento es aquella en que expira la letra del Tesoro.</param>
        <param name="Arg3">ImportantDates debe especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se introducen como texto. Descuento: tasa de descuento de la factura del Tesoro.</param>
        <summary>Devuelve el rendimiento de un bono equivalente a una letra del Tesoro (de EE.UU.).</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los argumentos de liquidaci√≥n y vencimiento se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>TBillEq</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el ‚â§ 0, <b>TBillEq</b> devuelve el #NUM! valor de error. </para>
          <para>Si el vencimiento de la liquidaci√≥n, o si el vencimiento es superior a un a√±o despu√©s de la &gt; liquidaci√≥n, <b>TBillEq</b> devuelve el #NUM. valor de error. </para>
          <para>
            <b>TBillEq</b> se calcula como TBILLEQ = (365 x tasa)/(360-(rate x DSM)), donde DSM es el n√∫mero de d√≠as entre liquidaci√≥n y vencimiento calculado seg√∫n la base de 360 d√≠as por a√±o.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n de la letra del Tesoro. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere la letra del Tesoro.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento de la letra del Tesoro. La fecha de vencimiento es aquella en que expira la letra del Tesoro.</param>
        <param name="Arg3">Descuento: tasa de descuento de la letra del Tesoro.</param>
        <summary>Devuelve el precio por 100 $ de valor nominal de una letra del Tesoro (de EE.UU.).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los argumentos de liquidaci√≥n y vencimiento se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>TBillPrice</b> devuelve el #VALUE! valor de error. </para>
          <para>Si el ‚â§ 0, <b>TBillPrice</b> devuelve el #NUM! valor de error. </para>
          <para>Si el vencimiento de la liquidaci√≥n, o si el vencimiento es superior a un a√±o despu√©s de la &gt; liquidaci√≥n, <b>TBillPrice</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TBillPrice</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo TBillPrice</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>DSM = n√∫mero de d√≠as desde la liquidaci√≥n hasta el vencimiento, excluyendo cualquier fecha de vencimiento que sea m√°s de un a√±o calendario despu√©s de la fecha de liquidaci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n de la letra del Tesoro. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere la letra del Tesoro.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento de la letra del Tesoro. La fecha de vencimiento es aquella en que expira la letra del Tesoro.</param>
        <param name="Arg3">Precio: precio de la letra del Tesoro por cada 100 $ de valor nominal.</param>
        <summary>Devuelve el rendimiento de una letra del Tesoro (de EE.UU.).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los argumentos de liquidaci√≥n y vencimiento se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>TBillYield</b> devuelve el #VALUE! valor de error. </para>
          <para>Si pr ‚â§ 0, <b>TBillYield</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, o si el vencimiento es superior a un a√±o despu√©s de la liquidaci√≥n, <b>TBillYield</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TBillYield</b> se calcula de la siguiente manera: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo TBillYield</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>DSM = n√∫mero de d√≠as desde la liquidaci√≥n hasta el vencimiento, excluyendo cualquier fecha de vencimiento que sea m√°s de un a√±o calendario despu√©s de la fecha de liquidaci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor num√©rico al que debe evaluarse la distribuci√≥n.</param>
        <param name="Arg2">Grados de libertad: n√∫mero entero que indica el n√∫mero de grados de libertad.</param>
        <param name="Arg3">Colas: especifica el n√∫mero de colas de la distribuci√≥n que deben devolverse. Si el valor de colas es igual a 1, TDIST devuelve la distribuci√≥n de una cola. Si el n√∫mero de colas es 2, TDIST devuelve la distribuci√≥n de dos colas.</param>
        <summary>Devuelve los puntos porcentuales (probabilidad) de la distribuci√≥n t de Student, donde un valor num√©rico (x) es un valor calculado de t para el que deben calcularse los puntos porcentuales. La distribuci√≥n t de Student se utiliza para la comprobaci√≥n de pruebas de hip√≥tesis cuando el tama√±o de la muestra es peque√±o. Utilice esta funci√≥n en lugar de una tabla de valores cr√≠ticos para la distribuci√≥n t.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> , <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> y los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> m√©todos.</para>
          <para>Si alg√∫n argumento no esnum√©rico, <b>TDist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si degrees_freedom &lt; 1, <b>TDist</b> devuelve el #NUM! valor de error. </para>
          <para>Los argumentos de grados de libertad y de colas se truncan a enteros.</para>
          <para>Si tails es cualquier valor distinto de 1 o 2, <b>TDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si x &lt; 0, <b>TDist</b> devuelve el #NUM! valor de error. </para>
          <para>Si colas = 1, <b>TDist</b> se calcula como TDIST = P( X x ), donde X es una variable aleatoria que sigue &gt; a la distribuci√≥n t. Si colas = 2, <b>TDist</b> se calcula como TDIST = P(| X| &gt; x) = P(X &gt; x o X &lt; -x). </para>
          <para>Dado que x 0 no est√° permitido, para usar TDist cuando x 0, tenga en cuenta que &lt; <b></b> &lt; TDIST(-x,df,1) = 1 ‚Äì TDIST(x,df,1) = P(X &gt; -x) y TDIST(-x,df,2) = TDIST(x df,2) = P(| X| &gt;x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor num√©rico, f√≥rmula que eval√∫a el valor num√©rico o referencia a una celda que contiene un valor num√©rico.</param>
        <param name="Arg2">Formato num√©rico en forma de texto del cuadro Categor√≠a en la ficha N√∫mero del cuadro de di√°logo Formato de celdas.</param>
        <summary>Convierte en texto un valor con un formato num√©rico determinado.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Reservado para uso interno.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilidad: probabilidad asociada con la distribuci√≥n t de Student de dos colas.</param>
        <param name="Arg2">Grados de libertad: n√∫mero de grados de libertad que caracteriza la distribuci√≥n.</param>
        <summary>Devuelve el valor t de la distribuci√≥n t de Student como funci√≥n de la probabilidad y los grados de libertad.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de las nuevas funciones, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> m√©todos y.</para>
          <para>Si cualquiera de los argumentos no esnum√©rico, <b>TInv</b> devuelve el #VALUE! valor de error. </para>
          <para>Si probabilidad &lt; 0 o si probabilidad &gt; 1, <b>TInv</b> devuelve la #NUM! valor de error. </para>
          <para>Si el n√∫mero de grados de libertad no es un entero, se trunca.</para>
          <para>Si degrees_freedom &lt; 1, <b>TInv</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TInv</b> devuelve ese valor t, de forma que P(| X| &gt; t) = probabilidad donde X es una variable aleatoria que sigue a la distribuci√≥n t y P(| X| &gt; t) = P(X &lt; -t o X &gt; t). </para>
          <para>Se puede devolver un valor t de una cola reemplazando la probabilidad por 2 *probabilidad. Para una probabilidad de 0,05 y grados de libertad de 10, el valor de dos colas se calcula con TINV(0,05,10), que devuelve 2,28139. El valor de una* cola para la misma probabilidad y grados de libertad se puede calcular con TINV(2 0,05,10), que devuelve 1,812462. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de celdas de una hoja de c√°lculo que se desea transponer. La transposici√≥n de una matriz se crea utilizando la primera fila de la matriz como primera columna de la nueva matriz, la segunda fila de la matriz como segunda columna de la nueva matriz, y as√≠ sucesivamente.</param>
        <summary>Devuelve un rango de celdas vertical como un rango horizontal o viceversa. El m√©todo Transpose debe escribirse como una f√≥rmula de matriz en un rango que tenga el mismo n√∫mero de filas y columnas, respectivamente, que el n√∫mero de columnas y filas de una matriz. Utilice el m√©todo Transpose para cambiar la orientaci√≥n vertical y horizontal de una matriz en una hoja de c√°lculo.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores conocidos de y: conjunto de valores conocidos de y en la relaci√≥n y = mx + b.</param>
        <param name="Arg2">Valores conocidos de x: conjunto opcional de valores de x que se conocen en la relaci√≥n y = mx+b.</param>
        <param name="Arg3">Nuevos valores de x: nuevos valores de x para los que se desea que el m√©todo Trend devuelva los correspondientes valores de y.</param>
        <param name="Arg4">Constante: un valor l√≥gico que especifica si se fuerza la constante b para que sea igual a 0.</param>
        <summary>Devuelve valores que resultan de una tendencia lineal. Ajusta una recta (calculada con el m√©todo de m√≠nimos cuadrados) a los valores de las matrices definidas por los argumentos de valores conocidos de y y de valores conocidos de x. Devuelve, a lo largo de esa recta, los valores de y correspondientes a la matriz definida por el argumento de nuevos valores de x especificado.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz de valores conocidos de y se encuentra en una sola columna, cada columna de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>Si la matriz de valores conocidos de y se encuentra en una sola fila, cada fila de valores conocidos de x se interpreta como una variable independiente.</para>
          <para>La matriz de valores conocidos de x puede incluir uno o varios conjuntos de variables. Si se usa una sola variable, los argumentos de valores conocidos de y, as√≠ como los de x, pueden ser rangos con cualquier forma, siempre y cuando sus dimensiones sean iguales. Si se usa m√°s de una variable, el argumento de valores conocidos de y tiene que ser un vector (es decir, un rango compuesto por una fila o por una columna).</para>
          <para>Si se omite el argumento de valores conocidos de x, se supone que √©sta es la matriz {1,2,3,...} que tiene el mismo tama√±o que la de los valores conocidos de y.</para>
          <para>El argumento de nuevos valores de x debe incluir una columna (o una fila) para cada variable independiente, como ocurre con el argumento de valores conocidos de x. Por consiguiente, si el argumento de valores conocidos de y ocupa una sola columna, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de columnas. Si el argumento de valores de y conocidos ocupa una sola fila, los valores conocidos de x y los nuevos valores de x deben tener el mismo n√∫mero de filas.</para>
          <para>Si se omite el argumento de nuevos valores de x, se supone que es el mismo que el de valores conocidos de x.</para>
          <para>Si se omiten los argumentos de valores conocidos de x y de nuevos valores de x, se supone que son la matriz {1;2;3;...} que tiene el mismo tama√±o que el argumento de valores conocidos de y.</para>
          <para>Si const es <b>true</b> u omitido, b se calcula normalmente. </para>
          <para>Si const es <b>false</b>, b se establece en 0 (cero) y los valores m se ajustan de modo que y = mx. </para>
          <para>Para obtener informaci√≥n sobre c√≥mo Microsoft Excel una l√≠nea a los datos, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Puede usar <b>Trend para ajustar</b> curvas polinomiales si retrocede con la misma variable que se eleva a diferentes potencias. Por ejemplo, supongamos que la columna A contiene valores y y la columna B contiene valores x. Puede escribir x^2 en la columna C, x^3 en la columna D y as√≠ sucesivamente y, despu√©s, revertir las columnas B a D en la columna A. </para>
          <para>Las f√≥rmulas que devuelven matrices deben escribirse como f√≥rmulas de matriz.</para>
          <para>Cuando especifique una constante matricial para un argumento, como valores conocidos de x, utilice la  coma para separar los valores de una misma fila y el punto y coma para separar las filas.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texto: texto del que se desea quitar espacios.</param>
        <summary>Elimina los espacios del texto, excepto el espacio normal que se deja entre palabras. Use el m√©todo Trim en texto procedente de otras aplicaciones que pueda contener espacios irregulares.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>La <b>funci√≥n Trim</b> se dise√±√≥ para recortar el car√°cter de espacio ASCII de 7 bits (valor 32) del texto. En el juego de caracteres Unicode, hay un car√°cter adicional llamado espacio de no separaci√≥n, que tiene un valor decimal de 160. Este car√°cter se usa com√∫nmente en p√°ginas web como la entidad HTML, <b> &amp; nbsp;</b>. Por s√≠ misma, <b>la funci√≥n Trim</b> no quita este car√°cter de espacio no rompedor.</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de valores que se desea acotar y cuya media se desea calcular.</param>
        <param name="Arg2">Porcentaje: n√∫mero fraccionario de puntos de datos que se excluyen del c√°lculo. Por ejemplo, si el argumento de porcentaje es igual a 0,2, se eliminar√°n cuatro puntos de un conjunto de datos de 20 puntos (20 x 0,2), dos de la parte superior y dos de la parte inferior.</param>
        <summary>Devuelve la media del interior del conjunto de datos. TRIMMEAN calcula la media de un conjunto de datos despu√©s de eliminar el porcentaje de los extremos inferior y superior de los puntos de datos. Puede utilizar esta funci√≥n cuando desee excluir del an√°lisis los valores extremos.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si el &lt; porcentaje 0 o el &gt; 1, <b>TrimMean</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TrimMean</b> redondea el n√∫mero de puntos de datos excluidos hasta el m√∫ltiplo m√°s cercano de 2. Si el argumento de porcentaje es igual a 0,1, el 10 por ciento de 30 puntos de datos es igual a 3 puntos. Para la simetr√≠a, <b>TrimMean</b> excluye un solo valor de la parte superior e inferior del conjunto de datos.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz 1: primer conjunto de datos.</param>
        <param name="Arg2">Matriz 2: segundo conjunto de datos.</param>
        <param name="Arg3">Colas: especifica el n√∫mero de colas de la distribuci√≥n. Si el argumento de colas es igual a 1, TTEST utiliza la distribuci√≥n de una cola. Si el argumento de colas es igual a 2, TTEST utiliza la distribuci√≥n de dos colas.</param>
        <param name="Arg4">Tipo: tipo de prueba t que se debe realizar.</param>
        <summary>Devuelve la probabilidad asociada con la prueba t de Student. Utilice TTEST para determinar la probabilidad de que dos muestras puedan proceder de dos poblaciones subyacentes con igual media.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> m√©todo.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Emparejado</description>
            </item>
            <item>
              <term>2</term>
              <description>En dos muestras con varianzas iguales (homosced√°stica)</description>
            </item>
            <item>
              <term>3</term>
              <description>En dos muestras con varianzas diferentes (heterosced√°stica)</description>
            </item>
          </list>
          <para>Si matriz1 y matriz2 tienen un n√∫mero diferente de puntos de datos y tipo = 1 (emparejado), <b>TTest</b> devuelve el valor de error #N/A. </para>
          <para>Los argumentos de colas y de tipo se truncan a enteros.</para>
          <para>Si las colas o el tipo no sonnum√©ricos, <b>TTest</b> devuelve el #VALUE! valor de error. </para>
          <para>Si tails es cualquier valor distinto de 1 o 2, <b>TTest</b> devuelve el #NUM! valor de error. </para>
          <para>
            <b>TTest</b> usa los datos de matriz1 y matriz2 para calcular una estad√≠stica t no negativa. Si tails=1, <b>TTest</b> devuelve la probabilidad de un valor m√°s alto de la estad√≠stica t bajo el supuesto de que matriz1 y matriz2 son muestras de poblaciones con la misma media. El valor devuelto por <b>TTest</b> cuando tails=2 es doble que se devuelve cuando tails=1 y corresponde a la probabilidad de un valor absoluto m√°s alto de la estad√≠stica t en la suposici√≥n "mismo t√©rmino de poblaci√≥n".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero Unicode que representa un car√°cter.</param>
        <summary>Devuelve el car√°cter Unicode al que hace referencia el valor num√©rico especificado.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Car√°cter del que desea tener el valor Unicode.</param>
        <summary>Devuelve el n√∫mero (punto de c√≥digo) correspondiente al primer car√°cter del texto.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Referencia a una celda que contiene un n√∫mero o una f√≥rmula que se eval√∫a en un n√∫mero.</param>
        <param name="Arg2">N√∫mero de d√≠gitos a la derecha del separador decimal. Si Arg2 es negativo, el n√∫mero se redondea hacia la izquierda del separador decimal. Si se omite el argumento de decimales, se calcular√° como 2.</param>
        <summary>Convierte un n√∫mero en formato de texto y le aplica un s√≠mbolo de moneda. El nombre del m√©todo (y el s√≠mbolo que aplica) depende de la configuraci√≥n de idioma.
</summary>
        <returns>To be added.</returns>
        <remarks><para>El <b>m√©todo USDollar</b> convierte un n√∫mero en texto con formato de moneda, con los decimales redondeados al lugar especificado. El formato usado es $#,##0.00_);($#,##0.00).</para>
          <para>La principal diferencia entre dar formato a una celda que contiene un n√∫mero con el comando Formato de celdas y dar formato a un n√∫mero directamente con el m√©todo es que convierte su resultado <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> en texto. Un n√∫mero al que se le da formato con el comando Format Cells sigue siendo un n√∫mero. Puede seguir usando n√∫meros con formato en f√≥rmulas, ya que Excel convierte los n√∫meros escritos como valores de texto en n√∫meros cuando <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> calcula.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de una muestra.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> asume que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, calcule la varianza mediante <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>Var</b> usa la siguiente f√≥rmula: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo Var</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos num√©ricos correspondientes a una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de toda la poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> supone que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, calcule la varianza mediante <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>La ecuaci√≥n <b>para Var_P</b> es: </para>
          <para>Figura 1: Ecuaci√≥n para el Var_P m√©todo</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2, ...: de 1 a 30 argumentos num√©ricos correspondientes a una muestra de una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de una muestra.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> supone que sus argumentos son una muestra de la poblaci√≥n. Si los datos representan toda la poblaci√≥n, calcule la varianza mediante <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se cuentan los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>
            <b>Var_S</b> la siguiente f√≥rmula: </para>
          <para>Figura 1: Ecuaci√≥n para el Var_S m√©todo</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero 1, n√∫mero 2...: de 1 a 30 argumentos num√©ricos correspondientes a una poblaci√≥n.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcula la varianza en funci√≥n de toda la poblaci√≥n.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> m√©todo.</para>
          <para>
            <b>VarP asume</b> que sus argumentos son toda la poblaci√≥n. Si los datos representan una muestra de la poblaci√≥n, calcule la varianza mediante <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Los argumentos pueden ser n√∫meros o nombres, matrices o referencias que contienen n√∫meros.</para>
          <para>Se tienen en cuenta los valores l√≥gicos y las representaciones textuales de n√∫meros escritos directamente en la lista de argumentos.</para>
          <para>Si un argumento es una matriz o una referencia, solo se considerar√°n los n√∫meros de esa matriz o referencia. Se pasan por alto las celdas vac√≠as, valores l√≥gicos, texto o valores de error de la matriz o de la referencia.</para>
          <para>Los argumentos que son valores de error o texto que no se puede convertir en n√∫meros pueden producir errores.</para>
          <para>La ecuaci√≥n de <b>VarP</b> es: </para>
          <para>Figura 1: Ecuaci√≥n para el m√©todo VarP</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media media de muestra AVERAGE(number1,number2,...) y n es el tama√±o de la muestra.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Costo: costo inicial del activo.</param>
        <param name="Arg2">Remanente: valor del activo al finalizar la depreciaci√≥n (denominado a veces valor residual del activo). Este valor puede ser 0.</param>
        <param name="Arg3">Vida: n√∫mero de per√≠odos durante los cuales se produce la depreciaci√≥n del activo (tambi√©n se conoce como vida √∫til del bien).</param>
        <param name="Arg4">Per√≠odo inicial: per√≠odo inicial para el que se desea calcular la amortizaci√≥n. El argumento de per√≠odo inicial debe utilizar las mismas unidades que el argumento de vida.</param>
        <param name="Arg5">Per√≠odo final: per√≠odo final para el que se desea calcular la amortizaci√≥n. El argumento de per√≠odo inicial debe utilizar las mismas unidades que el argumento de vida.</param>
        <param name="Arg6">Factor: tasa a la que disminuye el saldo. Si el argumento de factor se omite, se calcular√° como 2 (el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo). Si no desea usar el m√©todo de depreciaci√≥n por doble disminuci√≥n del saldo, cambie el argumento de factor. Para obtener una descripci√≥n del m√©todo de saldo en doble declinaci√≥n, vea <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> .</param>
        <param name="Arg7">Sin cambios: valor l√≥gico que especifica si se deber√° cambiar al m√©todo directo de depreciaci√≥n cuando la depreciaci√≥n sea mayor que el c√°lculo del saldo en disminuci√≥n.</param>
        <summary>Devuelve la amortizaci√≥n de un activo durante un per√≠odo especificado, incluidos per√≠odos parciales, usando el m√©todo de amortizaci√≥n por doble depreciaci√≥n de saldo u otro m√©todo que se especifique. Las iniciales VDB corresponden a disminuci√≥n variable del saldo, en ingl√©s.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si no_switch es <b>true</b>, Microsoft Excel cambia a depreciaci√≥n en l√≠nea recta incluso cuando la depreciaci√≥n es mayor que el c√°lculo de saldo en disminuci√≥n. </para>
          <para>Si no_switch es <b>false</b> u omitido, Excel cambia a depreciaci√≥n en l√≠nea recta cuando la depreciaci√≥n es mayor que el c√°lculo de saldo en disminuci√≥n.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valor buscado: valor que se va a buscar en la primera columna de la matriz de tabla. El argumento de valor buscado puede ser un valor o una referencia. Si valor buscado es inferior al menor de los valores de la primera columna de la matriz en la que realizar la b√∫squeda, VLookup devuelve el valor de error #N/A.</param>
        <param name="Arg2">Matriz de tabla: dos o m√°s columnas de datos. Utilice una referencia a un rango o un nombre de rango. Los valores de la primera columna de la tabla en la que se busca son los valores utilizados en el argumento de valor buscado. Estos valores pueden ser texto, n√∫meros o valores l√≥gicos. Las may√∫sculas y min√∫sculas del texto son equivalentes.</param>
        <param name="Arg3">Indicador de columna: n√∫mero de columna de la matriz en la que buscar y desde la que se deben devolver los valores coincidentes. Un valor de 1 para el argumento del indicador de columna devuelve el valor de la primera columna de la matriz de tabla, un valor de 2 devuelve el valor de la segunda columna de la matriz de tabla, y as√≠ sucesivamente.</param>
        <param name="Arg4">Range_lookup: un valor l√≥gico que especifica si desea que el m√©todo encuentre una coincidencia exacta <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> o una coincidencia aproximada:</param>
        <summary>Busca un valor espec√≠fico en la primer columna de una matriz de tabla y devuelve, en la misma fila, un valor de otra columna de dicha matriz de tabla.</summary>
        <returns>To be added.</returns>
        <remarks><para>La V de <b>VLookup</b> significa vertical. Use el <b>m√©todo VLookup</b> en lugar del m√©todo cuando los valores de comparaci√≥n se encuentren en una columna a la izquierda de los datos <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> que desea encontrar.</para>
          <para>Si el valor del argumento de indicador de columna es inferior a 1, el m√©todo <b>VLookup</b> da error.</para>
          <para>Si el valor del argumento de indicador de columna es superior al n√∫mero de columnas de la matriz de tabla, el m√©todo <b>VLookup</b> da error.</para>
          <para>Si Range_lookup es <b>true</b> u omitido, se devuelve una coincidencia exacta o aproximada. Si no se encuentra una coincidencia exacta, se devolver√° el siguiente valor mayor que sea menor que valor_buscado. </para>
          <para>Los valores de la primera columna de matriz_buscar_en deben colocarse en orden ascendente. En caso contrario, es posible que el m√©todo <b>BUSCARV</b> no devuelva el valor correcto.</para>
          <para>Si Range_lookup es <b>false,</b>el <b>m√©todo VLookup</b> solo encontrar√° una coincidencia exacta. En este caso, no es necesario ordenar los valores de la primera columna de matriz_buscar_en. Si hay dos o m√°s valores de la primera columna de matriz_buscar_en que coincidan con el valor_buscado, se usa el primer valor encontrado. Si no se encuentra una coincidencia exacta, se produce un error.</para>
          <para>Al buscar valores de texto en la primera columna de table_array, aseg√∫rese de que los datos de la primera columna de table_array no tienen espacios iniciales, espacios finales, uso incoherente de comillas rectas ( ' o " ) y rizado ( ' o ") o caracteres no imprimibles. En estos casos, el m√©todo <b>VLookup</b> puede devolver un valor inesperado o incorrecto. Para obtener informaci√≥n sobre c√≥mo limpiar o recortar valores, vea los <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> m√©todos y. Al buscar valores de fechas o n√∫meros, aseg√∫rese de que los datos de la primera columna de la matriz en la que buscar no se almacenan como valores de texto. En ese caso, el m√©todo <b>VLookup</b> puede devolver un valor incorrecto o inesperado. </para>
          <para>Si range_lookup es <b>false</b> y lookup_value es texto, puede usar los caracteres comod√≠n, signo de interrogaci√≥n (?) y asterisco (*), en lookup_value. El s√≠mbolo de interrogaci√≥n corresponde a cualquier car√°cter √∫nico, mientras que un asterisco corresponde a cualquier secuencia de caracteres. Si quiere buscar un asterisco o un signo de interrogaci√≥n actual, escriba una tilde (~) antes del car√°cter.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Direcci√≥n URL del servicio web al que se debe realizar la solicitud HTTP GET.</param>
        <summary>Funci√≥n subyacente que llama al servicio web de forma asincr√≥nica, mediante una solicitud HTTP GET, y devuelve la respuesta.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de serie: n√∫mero secuencial que representa la fecha del d√≠a que desea buscar. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Tipo devuelto: n√∫mero que determina el tipo del valor devuelto.</param>
        <summary>Devuelve el d√≠a de la semana correspondiente a una fecha. De forma predeterminada, el d√≠a se devuelve como un n√∫mero entero entre 1 (domingo) y 7 (s√°bado).</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 u omitido</term>
              <description>N√∫meros del 1 (domingo) al 7 (s√°bado). Igual que en versiones anteriores de Microsoft Excel.</description>
            </item>
            <item>
              <term>2</term>
              <description>N√∫meros del 1 (lunes) al 7 (domingo).</description>
            </item>
            <item>
              <term>3</term>
              <description>N√∫meros del 0 (lunes) al 6 (domingo).</description>
            </item>
            <item>
              <term>11</term>
              <description>N√∫meros del 1 (lunes) al 7 (domingo).</description>
            </item>
            <item>
              <term>12 </term>
              <description>N√∫meros del 1 (martes) al 7 (lunes)</description>
            </item>
            <item>
              <term>13</term>
              <description>N√∫meros del 1 (mi√©rcoles) al 7 (martes)</description>
            </item>
            <item>
              <term>14 </term>
              <description>N√∫meros del 1 (jueves) al 7 (mi√©rcoles)</description>
            </item>
            <item>
              <term>15</term>
              <description>N√∫meros del 1 (viernes) al 7 (jueves)</description>
            </item>
            <item>
              <term>16 </term>
              <description>N√∫meros del 1 (s√°bado) al 7 (viernes)</description>
            </item>
            <item>
              <term>17 </term>
              <description>N√∫meros del 1 (domingo) al 7 (s√°bado)</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">N√∫mero de serie: fecha contenida en una semana. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg2">Tipo devuelto: n√∫mero que determina en qu√© d√≠a comienza la semana. El valor predeterminado es 1.</param>
        <summary>Devuelve un n√∫mero que indica d√≥nde est√° situada la semana num√©ricamente dentro un a√±o.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>La <b>funci√≥n WeekNum</b> considera que la semana que contiene el 1 de enero es la primera semana del a√±o. Sin embargo, hay un est√°ndar europeo que define la primera semana como la que tiene la mayor√≠a de d√≠as (cuatro o m√°s) en el a√±o nuevo. Esto significa que durante a√±os en los que hay tres d√≠as o menos en la primera semana de enero, la funci√≥n <b>WeekNum</b> devuelve n√∫meros de semana incorrectos seg√∫n el est√°ndar europeo.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>El domingo. Los d√≠as de la semana se numeran del 1 al 7.</description>
            </item>
            <item>
              <term>2</term>
              <description>El lunes. Los d√≠as de la semana se numeran del 1 al 7.</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: determina la forma de la funci√≥n.</param>
        <summary>Devuelve la distribuci√≥n de Weibull. Utilice esta distribuci√≥n en los an√°lisis de confiabilidad para calcular, por ejemplo, el per√≠odo medio de vida de un dispositivo hasta que se produce un error.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> m√©todo.</para>
          <para>Si x, alfa o beta no sonnum√©ricos, <b>Weibull</b> devuelve el #VALUE! valor de error. Si x &lt; 0, <b>Weibull</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Weibull</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa de Weibull es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa de Weibull</para>
          <para> </para>
          <para> </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de probabilidad de Weibull es: 

</para>
          <para>Figura 2: Ecuaci√≥n para la densidad de probabilidad de Weibull</para>
          <para> </para>
          <para> </para>
          <para>Cuando alfa = 1, <b>Weibull</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X: valor en el que se desea evaluar la funci√≥n.</param>
        <param name="Arg2">Alfa: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg3">Beta: un par√°metro de la distribuci√≥n.</param>
        <param name="Arg4">Acumulado: determina la forma de la funci√≥n.</param>
        <summary>Devuelve la distribuci√≥n de Weibull. Esta distribuci√≥n se usa en los an√°lisis de confiabilidad, como calcular el tiempo medio que tarda un dispositivo en generar un error.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x, alfa o beta no son num√©ricos, <b>Weibull_Dist</b> devuelve el #VALUE! valor de error. </para>
          <para>Si x &lt; 0, <b>Weibull_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>Si alfa ‚â§ 0 o si beta ‚â§ 0, <b>Weibull_Dist</b> devuelve el #NUM! valor de error. </para>
          <para>La ecuaci√≥n para la funci√≥n de distribuci√≥n acumulativa de Weibull es: 

 </para>
          <para>Figura 1: Ecuaci√≥n para la distribuci√≥n acumulativa de Weibull</para>
          <para> </para>
          <para> </para>
          <para>La ecuaci√≥n para la funci√≥n de densidad de probabilidad de Weibull es: 

</para>
          <para>Figura 2: Ecuaci√≥n para la densidad de probabilidad de Weibull</para>
          <para> </para>
          <para> </para>
          <para>Cuando alfa = 1, <b>Weibull_Dist</b> devuelve la distribuci√≥n exponencial con:</para>
          <para>Figura 3: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial.</param>
        <param name="Arg2">D√≠as: n√∫mero de d√≠as laborables (d√≠as que no sean fines de semana ni d√≠as festivos) anteriores o posteriores al argumento de fecha inicial. Un valor positivo para el argumento de d√≠as produce una fecha futura; un n√∫mero negativo produce una fecha pasada.</param>
        <param name="Arg3">Festivos: lista opcional de una o varias fechas que deben excluirse del calendario laboral, como los d√≠as festivos nacionales y locales. La lista puede ser un rango de celdas que contengan fechas o una constante matricial de los n√∫meros de serie que representen las fechas.</param>
        <summary>Devuelve un n√∫mero que representa una fecha que es el n√∫mero de d√≠as laborables antes o despu√©s de una fecha (la fecha inicial). Los d√≠as laborables excluyen los d√≠as de fin de semana y cualquier fecha identificada como d√≠a festivo. Use WORKDAY para excluir fines de semana o d√≠as festivos cuando calcule fechas de vencimiento de facturas, las fechas de entrega esperadas o el n√∫mero de d√≠as de trabajo realizados.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se introducen como texto .</para>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Si alg√∫n argumento no es una fecha v√°lida, <b>WorkDay</b> devuelve el #VALUE! valor de error. </para>
          <para>Si start_date d√≠as m√°s produce una fecha no v√°lida, <b>WorkDay</b> devuelve la #NUM! valor de error. </para>
          <para>Si el argumento de d√≠as no es un entero, se trunca.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date: la fecha de inicio, truncada a entero.</param>
        <param name="Arg2">D√≠as: n√∫mero de d√≠as laborables antes o despu√©s de la start_date. Un valor positivo da como resultado una fecha futura; un valor negativo proporciona una fecha pasada; un valor de 0 (cero) proporciona la fecha_inicial. El desplazamiento de d√≠as se trunca a entero.</param>
        <param name="Arg3">Fin de semana: indica los d√≠as de la semana que son d√≠as de fin de semana y que no se consideran d√≠as laborables. Fin_de_semana es un n√∫mero de fin de semana o cadena que especifica cu√°ndo ocurren los fines de semana.</param>
        <param name="Arg4">D√≠as festivos: un conjunto opcional de una o m√°s fechas que se van a excluir del calendario del d√≠a laborable. Holidays es un rango de celdas que contienen las fechas o una constante de matriz de los valores en serie que representan esas fechas. El orden de fechas o valores de serie en d√≠as festivos puede ser arbitrario.</param>
        <summary>Devuelve el n√∫mero de serie de la fecha que tiene lugar antes o despu√©s de un n√∫mero determinado de d√≠as laborables con par√°metros de fin de semana personalizados. Los par√°metros de fin de semana indican cu√°les y cu√°ntos d√≠as son d√≠as de fin de semana. Los d√≠as de fin de semana y cualquier d√≠a especificado como festivo no se consideran d√≠as laborables.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si start_date est√° fuera del intervalo para el valor base de fecha actual, <b>WorkDay_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si alguna fecha en d√≠as festivos est√° fuera del intervalo para el valor base de fecha actual, <b>WorkDay_Intl</b> devuelve la #NUM! valor de error. </para>
          <para>Si start_date desplazamiento de d√≠a m√°s produce una fecha no v√°lida, <b>WorkDay_Intl</b> devuelve el #NUM! valor de error. </para>
          <para>Si una cadena de fin de semana es de longitud no v√°lida o contiene caracteres no v√°lidos, <b>WorkDay_Intl</b> devuelve el #VALUE! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valores: una serie de flujos de caja que corresponde a un calendario de pagos determinado por el argumento de fechas. El primer pago es opcional y corresponde al costo o pago en que se incurre al principio de la inversi√≥n. Si el primer valor es un costo o un pago, debe ser un valor negativo. Todos los pagos sucesivos se descuentan bas√°ndose en un a√±o de 365 d√≠as. La serie de valores debe incluir al menos un valor positivo y un valor negativo.</param>
        <param name="Arg2">Fechas: calendario de fechas de pago que corresponde a los pagos del flujo de caja. La primera fecha de pago indica el principio del calendario de pagos. El resto de las fechas deben ser posteriores a √©sta, pero pueden aparecer en cualquier orden. Las fechas deben especificarse mediante la funci√≥n FECHA o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</param>
        <param name="Arg3">Guess: un n√∫mero que se supone que est√° cerca del resultado de <b>Xirr</b>.</param>
        <summary>Devuelve la tasa interna de retorno para un flujo de caja que no es necesariamente peri√≥dico. Para calcular la tasa interna de retorno de una serie de flujos de caja peri√≥dicos, utilice la funci√≥n IRR.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Los n√∫meros del argumento de fechas se truncan a enteros.</para>
          <para>
            <b>Xirr</b> espera al menos un flujo de efectivo positivo y un flujo de efectivo negativo; de lo contrario, <b>Xirr</b> devuelve el #NUM! valor de error. </para>
          <para>Si alg√∫n n√∫mero de fechas no es una fecha v√°lida, <b>Xirr</b> devuelve el #VALUE! valor de error. </para>
          <para>Si alg√∫n n√∫mero de fechas precede a la fecha de inicio, <b>Xirr</b> devuelve el #NUM! valor de error. </para>
          <para>Si los valores y las fechas contienen un n√∫mero diferente de valores, <b>Xirr</b> devuelve el #NUM! valor de error. </para>
          <para>En la mayor√≠a de los casos no es necesario proporcionar informaci√≥n sobre el c√°lculo <b>de Xirr.</b> Si se omite el argumento de estimaci√≥n, se supone que es 0,1 (10%). </para>
          <para>
            <b>Xirr</b> est√° estrechamente relacionado con <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> , la funci√≥n de valor presente neto. La tasa de retorno calculada por <b>Xirr</b> es la tasa de inter√©s correspondiente a XNPV = 0. </para>
          <para>Excel usa una t√©cnica iterativa para calcular <b>Xirr</b>. Con una tasa de cambio (a partir de la conjetura), <b>Xirr</b> realiza un ciclo en el c√°lculo hasta que el resultado sea preciso dentro del 0,000001 por ciento. Si <b>Xirr</b> no encuentra un resultado que funcione despu√©s de 100 intentos, el #NUM! se devuelve el valor de error. La tasa se cambia hasta: </para>
          <para>Figura 1: Ecuaci√≥n</para>
          <para> </para>
          <para> </para>
          <para>donde:</para>
          <para>di = la fecha de pago anterior o anterior.</para>
          <para>d1 = la 0¬™ fecha de pago.</para>
          <para>Pi = el pago ith o last.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serie de flujos de caja que corresponde a un calendario de pagos determinado por el argumento de fechas. El primer pago es opcional y corresponde al costo o pago en que se incurre al principio de la inversi√≥n.</param>
        <param name="Arg2">Calendario de fechas de pago que corresponde a los pagos del flujo de caja. La primera fecha de pago indica el principio del calendario de pagos. El resto de las fechas deben ser posteriores a √©sta, pero pueden aparecer en cualquier orden.
</param>
        <summary>Devuelve el valor neto actual para un flujo de caja que no es necesariamente peri√≥dico.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>El <b>m√©todo Xnpv</b> no proporciona un par√°metro que corresponda al argumento rate requerido por la funci√≥n XNPV correspondiente (=XNPV(rate, values, dates)). Para evitar esta limitaci√≥n en el c√≥digo VBA, en lugar de usar el m√©todo <b>Xpnv,</b> llame a la funci√≥n XNPV mediante el <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> m√©todo.</para>
          <para>Para calcular el valor presente neto de una serie de flujos de efectivo peri√≥dicos, use el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> m√©todo.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg2">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg3">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg4">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg5">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg6">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg7">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg8">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg9">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg10">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg11">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg12">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg13">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg14">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg15">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg16">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg17">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg18">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg19">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg20">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg21">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg22">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg23">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg24">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg25">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg26">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg27">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg28">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg29">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <param name="Arg30">De 1 a 254 condiciones que desea probar que pueden ser <b>TRUE</b> o <b>FALSE</b> y pueden ser valores l√≥gicos, matrices o referencias.</param>
        <summary>Devuelve un OR l√≥gico exclusivo de todos los argumentos.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fecha inicial: fecha que representa la fecha inicial.</param>
        <param name="Arg2">Fecha_final: fecha que representa la fecha final.</param>
        <param name="Arg3">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Calcula la fracci√≥n de a√±o que representa el n√∫mero de d√≠as completos entre los argumentos de fecha inicial y fecha final. Utilice la funci√≥n YEARFRAC para determinar la proporci√≥n de los beneficios u obligaciones de todo un a√±o que corresponde a un per√≠odo espec√≠fico.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>Todos los argumentos se truncan a enteros.</para>
          <para>Si start_date o end_date no son fechas v√°lidas, <b>YearFrac</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>YearFrac</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Precio: precio del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg4">Amortizaci√≥n: valor de amortizaci√≥n del valor burs√°til de un valor nominal de 100 $.</param>
        <param name="Arg5">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento anual de un valor burs√°til con descuento. Por ejemplo, para una letra del Tesoro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n o el vencimiento no es una fecha v√°lida, <b>YieldDisc</b> devuelve el #VALUE! valor de error. </para>
          <para>Si pr ‚â§ 0 o si el ‚â§ 0, <b>YieldDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>YieldDisc</b> devuelve el #NUM! valor de error. </para>
          <para>Si la ‚â• vencimiento, <b>YieldDisc</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Liquidaci√≥n: fecha de liquidaci√≥n del valor burs√°til. La fecha de liquidaci√≥n del valor burs√°til es la fecha posterior a la fecha de emisi√≥n en la que el comprador adquiere el valor burs√°til.</param>
        <param name="Arg2">Vencimiento: fecha de vencimiento del valor burs√°til. La fecha de vencimiento es aqu√©lla en la que expira el valor burs√°til.</param>
        <param name="Arg3">Emisi√≥n: fecha de emisi√≥n del valor burs√°til, expresada como n√∫mero de serie.</param>
        <param name="Arg4">Tasa: tasa de inter√©s en la fecha de emisi√≥n del valor burs√°til.</param>
        <param name="Arg5">Precio: precio del valor burs√°til por cada 100 $ de valor nominal.</param>
        <param name="Arg6">Base: tipo de base que se debe utilizar para contar los d√≠as.</param>
        <summary>Devuelve el rendimiento anual de un valor burs√°til que paga intereses al vencimiento.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Las fechas deben especificarse mediante la funci√≥n DATE o como resultado de otras f√≥rmulas o funciones. Por ejemplo, use FECHA(2008,5,23) para el d√≠a 23 de mayo de 2008. Pueden producirse problemas si las fechas se escriben como texto.</para>
          <list type="table">
            <item>
              <term>0 u omitido</term>
              <description>EE.UU. (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Real/actual</description>
            </item>
            <item>
              <term>2</term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europea 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel almacena las fechas como n√∫meros de serie secuenciales para que puedan usarse en los c√°lculos. De forma predeterminada, el 1 de enero de 1900 es el n√∫mero de serie 1 y el 1 de enero de 2008 es el n√∫mero de serie 39448 porque viene 39.448 d√≠as despu√©s del 1 de enero de 1900. Microsoft Excel para Macintosh usa un sistema de fechas predeterminado diferente.</para>
          <para>La fecha de liquidaci√≥n es la fecha en que se compra el cup√≥n, por ejemplo, un bono. La fecha de vencimiento es la fecha en que expira el cup√≥n. Por ejemplo, supongamos que se emite un bono a treinta a√±os el 1 de enero de 2008 y, seis meses m√°s tarde, lo adquiere un comprador. La fecha de emisi√≥n ser√° el 1 de enero de 2008, la de liquidaci√≥n el 1 de julio de 2008 y la de vencimiento, el 1 de enero de 2038, es decir, treinta a√±os despu√©s del 1 de enero de 2008, la fecha de emisi√≥n.</para>
          <para>Los argumentos de liquidaci√≥n, vencimiento, emisi√≥n y base se truncan a enteros.</para>
          <para>Si la liquidaci√≥n, el vencimiento o el problema no es una fecha v√°lida, <b>YieldMat</b> devuelve el #VALUE! valor de error. </para>
          <para>Si la &lt; tasa 0 o si pr ‚â§ 0, <b>YieldMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si la &lt; base 0 o si la base &gt; 4, <b>YieldMat</b> devuelve el #NUM! valor de error. </para>
          <para>Si la liquidaci√≥n ‚â• vencimiento, <b>YieldMat</b> devuelve el #NUM! valor de error.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos respecto al que probar la media de la poblaci√≥n hip√≥tesis.</param>
        <param name="Arg2">El valor que se va a comprobar.</param>
        <param name="Arg3">Sigma: desviaci√≥n est√°ndar (conocida) de la poblaci√≥n. Si se omite, se usa la desviaci√≥n est√°ndar de la muestra.</param>
        <summary>Devuelve el valor de probabilidad de una cola de una prueba z. En una hip√≥tesis para una media de poblaci√≥n, Z_TEST devuelve la probabilidad de que la media de la muestra sea mayor que el promedio de las observaciones del conjunto (matriz) de datos (es decir, la media observada de la muestra).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matriz est√° <b>vac√≠a, Z_Test</b> devuelve el valor de error #N/A. </para>
          <para>
            <b>Z_Test</b> se calcula de la siguiente manera cuando no se omite sigma: </para>
          <para>Figura 1: Ecuaci√≥n para Z_Test cuando no se omite sigma</para>
          <para> </para>
          <para> </para>
          <para>o cuando se omite sigma:</para>
          <para>Figura 2: Ecuaci√≥n para Z_Test cuando se omite sigma</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media promedio de ejemplo AVERAGE(array); s es la desviaci√≥n est√°ndar de muestra STDEV_S(matriz); y n es el n√∫mero de observaciones de la muestra COUNT(array).</para>
          <para>
            <b>Z_Test</b> representa la probabilidad de que la media de muestra sea mayor que el valor observado AVERAGE(array), cuando la media de poblaci√≥n subyacente es Œº0. A partir de la simetr√≠a de la distribuci√≥n normal, si AVERAGE(array) Œº0, Z_Test devolver√° un valor &lt; mayor que <b></b> 0,5.</para>
          <para>La siguiente f√≥rmula Excel puede usarse para calcular la probabilidad de dos colas de que la media de muestra estar√≠a m√°s lejos de Œº0 (en cualquier direcci√≥n) que AVERAGE(array), cuando la media de poblaci√≥n subyacente es Œº0:</para>
          <para>=2 * MIN(Z_TEST(array,Œº0,sigma), 1 - Z_TEST(array,Œº0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matriz: matriz o rango de datos respecto al que probar la media de la poblaci√≥n hip√≥tesis.</param>
        <param name="Arg2">El valor que se va a comprobar.</param>
        <param name="Arg3">Sigma: desviaci√≥n est√°ndar (conocida) de la poblaci√≥n. Si se omite, se utiliza la desviaci√≥n est√°ndar de la muestra.</param>
        <summary>Devuelve el valor de probabilidad de una cola de una prueba z. En una hip√≥tesis para una media de poblaci√≥n, ZTEST devuelve la probabilidad de que la media de la muestra sea mayor que el promedio de las observaciones del conjunto (matriz) de datos (es decir, la media observada de la muestra).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Importante:</b>Esta funci√≥n se ha reemplazado por una o m√°s funciones nuevas que pueden proporcionar mayor precisi√≥n y cuyos nombres reflejan mejor su uso. Esta funci√≥n todav√≠a est√° disponible para la compatibilidad con versiones anteriores de Excel. Sin embargo, si no es necesaria la compatibilidad con versiones anteriores, debe considerar el uso de las nuevas funciones a partir de ahora, ya que describen con mayor precisi√≥n su funcionalidad. Para obtener m√°s informaci√≥n acerca de la nueva funci√≥n, vea el <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> m√©todo.</para>
          <para>Si la matriz est√° vac√≠a, <b>ZTest</b> devuelve el #N de error A/A. </para>
          <para>
            <b>ZTest</b> se calcula de la siguiente manera cuando no se omite sigma: </para>
          <para>Figura 1: Ecuaci√≥n para ZTest cuando no se omite sigma</para>
          <para> </para>
          <para> </para>
          <para>o cuando se omite sigma:</para>
          <para>Figura 2: Ecuaci√≥n para ZTest cuando se omite sigma</para>
          <para> </para>
          <para> </para>
          <para>donde x es la media promedio de ejemplo AVERAGE(array); s es la desviaci√≥n est√°ndar de muestra STDEV(array); y n es el n√∫mero de observaciones de la muestra COUNT(array).</para>
          <para>
            <b>ZTest</b> representa la probabilidad de que la media de muestra sea mayor que el valor observado AVERAGE(array), cuando la media de poblaci√≥n subyacente es Œº0. A partir de la simetr√≠a de la distribuci√≥n normal, si AVERAGE(array) &lt; Œº0, ZTEST devolver√° un valor mayor que 0,5.</para>
          <para>La siguiente f√≥rmula Excel se puede usar para calcular la probabilidad de dos colas de que la media de muestra estar√≠a m√°s lejos de Œº0 (en cualquier direcci√≥n) que AVERAGE(array), cuando la media de poblaci√≥n subyacente es Œº0:=2 * MIN(ZTEST(array,Œº0,sigma), 1 - ZTEST(array,Œº0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>